{"Variables":{"DashboardVariables":[{"VariableName":"LiveDeltaSegments","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"//Artiick-Ver 1.5.0: Live Delta\r\n\r\n// Track lengths and segment sizes (trackId: { length: kilometers, segment: meters })\r\nvar trackLengths = {\r\n    0: { length: 3.602, segment: 1 },  // Laguna Seca Full\r\n    1: { length: 2.961, segment: 1 },  // Laguna Seca Short\r\n    3: { length: 6.515, segment: 2 },  // Road America Full\r\n    5: { length: 3.520, segment: 1 },  // Road America East Route\r\n    16: { length: 4.088, segment: 1 }, // Road Atlanta Full\r\n    17: { length: 2.881, segment: 1 }, // Road Atlanta Club\r\n    21: { length: 5.891, segment: 2 }, // Silverstone GP\r\n    22: { length: 2.639, segment: 1 }, // Silverstone National\r\n    23: { length: 2.979, segment: 1 }, // Silverstone International\r\n    31: { length: 25.378, segment: 5 }, // Nurburgring Endurance\r\n    32: { length: 20.830, segment: 4 }, // Nurburgring Nordschleife\r\n    33: { length: 5.148, segment: 2 },  // Nurburgring GP\r\n    34: { length: 3.629, segment: 1 },  // Nurburgring Sprint\r\n    35: { length: 5.246, segment: 2 },  // Mugello Full\r\n    36: { length: 2.575, segment: 1 },  // Mugello Club\r\n    37: { length: 5.809, segment: 2 },  // Suzuka Full\r\n    38: { length: 2.253, segment: 1 },  // Suzuka East\r\n    40: { length: 5.954, segment: 2 },  // Sebring Full\r\n    42: { length: 3.219, segment: 1 },  // Sebring Short\r\n    67: { length: 4.812, segment: 2 },  // Maple Valley Full\r\n    68: { length: 1.851, segment: 1 }, // Maple Valley Short\r\n    70: { length: 1.851, segment: 1 }, // Maple Valley Short Reverse\r\n    78: { length: 16.480, segment: 3 }, // Fujimi Kaido Full\r\n    83: { length: 16.480, segment: 3 }, // Fujimi Kaido Full Reverse\r\n    100: { length: 13.626, segment: 3 }, // Le Mans Full\r\n    101: { length: 13.535, segment: 3 }, // Le Mans Old Mulsanne\r\n    110: { length: 4.657, segment: 2 },  // Barcelona Catalunya GP\r\n    111: { length: 3.071, segment: 1 },  // Barcelona Catalunya National\r\n    113: { length: 2.997, segment: 1 },  // Barcelona Catalunya National Alt\r\n    231: { length: 4.023, segment: 1 },  // Indianapolis Brickyard\r\n    232: { length: 3.925, segment: 1 },  // Indianapolis GP\r\n    250: { length: 4.574, segment: 2 },  // Hockenheimring\r\n    251: { length: 3.692, segment: 1 },  // Hockenheimring National\r\n    252: { length: 2.638, segment: 1 },  // Hockenheimring Short\r\n    510: { length: 5.280, segment: 2 },  // Yas Marina\r\n    511: { length: 3.000, segment: 1 },  // Yas Marina North\r\n    512: { length: 2.190, segment: 1 },  // Yas Marina South\r\n    513: { length: 2.290, segment: 1 },  // Yas Marina North Corkscrew\r\n    530: { length: 7.004, segment: 2 },  // Spa Francorchamps Full\r\n    540: { length: 6.213, segment: 2 },  // Mount Panorama Bathurst\r\n    840: { length: 5.777, segment: 2 },  // Daytona 24h Sports Car\r\n    841: { length: 4.023, segment: 1 },  // Daytona Tri-Oval\r\n    860: { length: 3.915, segment: 1 },  // Brands Hatch GP\r\n    861: { length: 1.944, segment: 1 }, // Brands Hatch Indy\r\n    870: { length: 5.552, segment: 2 },  // Watkins Glen Full\r\n    873: { length: 3.943, segment: 1 },  // Watkins Glen Short\r\n    880: { length: 2.414, segment: 1 },  // Lime Rock Park Full\r\n    882: { length: 2.366, segment: 1 },  // Lime Rock Park South Chicane\r\n    883: { length: 2.414, segment: 1 },  // Lime Rock Park Full Alt\r\n    990: { length: 5.260, segment: 2 },  // Virginia International Raceway Full\r\n    991: { length: 3.620, segment: 1 },  // Virginia International Raceway North\r\n    992: { length: 2.660, segment: 1 },  // Virginia International Raceway South\r\n    995: { length: 6.598, segment: 2 },  // Virginia International Raceway Grand West\r\n    996: { length: 6.759, segment: 2 },  // Virginia International Raceway Grand East\r\n    1110: { length: 2.414, segment: 1 }, // Homestead-Miami Speedway\r\n    1111: { length: 3.556, segment: 1 }, // Homestead-Miami Road Circuit\r\n    1450: { length: 3.622, segment: 1 }, // Mid-Ohio Sports Car Circuit\r\n    1452: { length: 2.817, segment: 1 }, // Mid-Ohio Short\r\n    1590: { length: 4.529, segment: 2 }, // Kyalami GP\r\n    1620: { length: 4.474, segment: 2 }, // Sunset Peninsula Raceway Full\r\n    1621: { length: 3.122, segment: 1 }, // Sunset Peninsula Raceway Club\r\n    1622: { length: 4.474, segment: 1 }, // Sunset Peninsula Raceway Full Reverse\r\n    1623: { length: 3.122, segment: 1 }, // Sunset Peninsula Raceway Club Reverse\r\n    1624: { length: 3.927, segment: 1 }, // Sunset Peninsula Raceway Speedway\r\n    1630: { length: 3.734, segment: 1 }, // Grand Oak National\r\n    1631: { length: 2.623, segment: 1 }, // Grand Oak Club\r\n    1632: { length: 3.734, segment: 1 }, // Grand Oak National Reverse\r\n    1640: { length: 4.281, segment: 1 }, // Hakone GP\r\n    1641: { length: 3.315, segment: 1 }, // Hakone Club\r\n    1643: { length: 3.315, segment: 1 }, // Hakone Club Reverse\r\n    1660: { length: 1.642, segment: 1 }, // Eaglerock Speedway Oval\r\n    1661: { length: 1.722, segment: 1 }, // Eaglerock Speedway Club\r\n    1663: { length: 1.722, segment: 1 } // Eaglerock Speedway Club Reverse\r\n};\r\n\r\n// Read current telemetry data\r\nvar currentLapTime = $prop(\"variable.CurrentLapTime\"); \r\nvar distanceTraveled = $prop(\"GameRawData.DistanceTraveled\");\r\nvar completedLaps = $prop(\"CompletedLaps\");\r\nvar bestLapTime = $prop(\"GameRawData.BestLap\");\r\nvar trackId = $prop(\"TrackId\");\r\nvar raceTime = $prop(\"GameRawData.CurrentRaceTime\");\r\nvar carId = $prop(\"CarId\");\r\nvar currentLap = $prop(\"GameRawData.CurrentLap\");\r\n\r\n// Initialize data structures (first-time only)\r\nif (typeof globalThis.deltaData === 'undefined') {\r\n    globalThis.deltaData = {\r\n        // Config\r\n        version: \"3.0\",\r\n        segmentSize: 1, // Default segment size, will be overridden per track\r\n        \r\n        // Track/session info\r\n        trackId: -1,\r\n        carId: -1,\r\n        trackLength: 0,\r\n        \r\n        // Lap info\r\n        lastCompletedLap: -1,\r\n        currentLapSegments: {},\r\n        \r\n        // Best lap info\r\n        bestLapTime: -1,\r\n        bestLapSegments: {},\r\n        calibrationOffset: 0,\r\n        lastBestLapTime: -1,\r\n        nonBestLapCount: 0,\r\n        \r\n        // State tracking\r\n        lastDistance: 0,\r\n        lastLapDistance: 0,\r\n        lastDelta: 0,\r\n        \r\n        // Reset tracking\r\n        lastResetTime: Date.now(),\r\n        resetCount: 0,\r\n        \r\n        // New offset switch tracking\r\n        lapStartTime: raceTime,\r\n        useHighOffset: true, // Default to 0.024s offset\r\n        checkTimeElapsed: 0,\r\n        \r\n        // Timed race compensation\r\n        timedRaceDetected: false,\r\n        initialCrossingTime: -1,\r\n        compensationValue: 0,\r\n        \r\n        // Debug info\r\n        lapChanges: []\r\n    };\r\n}\r\n\r\n// Check for session changes that require reset\r\nvar needsReset = false;\r\nif (raceTime < 0.5) needsReset = true;\r\nif (trackId !== globalThis.deltaData.trackId) needsReset = true;\r\nif (carId !== globalThis.deltaData.carId) needsReset = true;\r\nif (completedLaps < globalThis.deltaData.lastCompletedLap) needsReset = true;\r\n\r\n// Perform reset if needed (with cooldown)\r\nif (needsReset && Date.now() - globalThis.deltaData.lastResetTime > 1000) {\r\n    globalThis.deltaData.trackId = trackId;\r\n    globalThis.deltaData.carId = carId;\r\n    globalThis.deltaData.lastCompletedLap = -1;\r\n    globalThis.deltaData.currentLapSegments = {};\r\n    globalThis.deltaData.bestLapTime = -1;\r\n    globalThis.deltaData.bestLapSegments = {};\r\n    globalThis.deltaData.calibrationOffset = 0;\r\n    globalThis.deltaData.lastBestLapTime = -1;\r\n    globalThis.deltaData.nonBestLapCount = 0;\r\n    globalThis.deltaData.lastDistance = 0;\r\n    globalThis.deltaData.lastLapDistance = 0;\r\n    globalThis.deltaData.lastDelta = 0;\r\n    globalThis.deltaData.lastResetTime = Date.now();\r\n    globalThis.deltaData.resetCount++;\r\n    globalThis.deltaData.lapStartTime = raceTime;\r\n    globalThis.deltaData.useHighOffset = true; // Reset to default\r\n    globalThis.deltaData.checkTimeElapsed = 0;\r\n    globalThis.deltaData.lapChanges = [];\r\n    globalThis.deltaData.timedRaceDetected = false;\r\n    globalThis.deltaData.initialCrossingTime = -1;\r\n    globalThis.deltaData.compensationValue = 0;\r\n}\r\n\r\n// Get track length and segment size (meters)\r\nvar trackData = trackLengths[trackId] || { length: 0, segment: 1 }; // Default to 0 length, 1m segment if unknown\r\nglobalThis.deltaData.trackLength = trackData.length > 0 ? trackData.length * 1000 : 0;\r\nglobalThis.deltaData.segmentSize = trackData.segment; // Set segment size for this track\r\n\r\n// Early exit if no track data\r\nif (globalThis.deltaData.trackLength <= 0) {\r\n    return \"+0.00\";\r\n}\r\n\r\n// Calculate current lap distance precisely\r\nvar lapDistance = distanceTraveled - (completedLaps * globalThis.deltaData.trackLength);\r\nif (lapDistance < 0 || lapDistance > globalThis.deltaData.trackLength * 1.1) {\r\n    lapDistance = distanceTraveled % globalThis.deltaData.trackLength;\r\n}\r\n\r\n// Detect timed race start line crossing\r\nif (!globalThis.deltaData.timedRaceDetected && completedLaps === 0 && \r\n    distanceTraveled > 0 && globalThis.deltaData.lastDistance <= 0) {\r\n    // First time crossing start line in a timed race\r\n    globalThis.deltaData.timedRaceDetected = true;\r\n    globalThis.deltaData.initialCrossingTime = raceTime;\r\n    globalThis.deltaData.compensationValue = raceTime; // Store the time to compensate\r\n}\r\n\r\n// Record current segment - only if on valid lap\r\nif (currentLapTime > 0 && lapDistance >= 0) {\r\n    var segmentIdx = Math.floor(lapDistance / globalThis.deltaData.segmentSize);\r\n    globalThis.deltaData.currentLapSegments[segmentIdx] = currentLapTime;\r\n}\r\n\r\n// Offset switch logic - Check difference for first 5 seconds on lap 0\r\nif (completedLaps === 0 && raceTime >= globalThis.deltaData.lapStartTime) {\r\n    globalThis.deltaData.checkTimeElapsed = raceTime - globalThis.deltaData.lapStartTime;\r\n}\r\nif (completedLaps === 0 && globalThis.deltaData.checkTimeElapsed <= 5) {\r\n    var timeDifference = Math.abs(raceTime - currentLap);\r\n    if (timeDifference < 10) {\r\n        globalThis.deltaData.useHighOffset = true; // Normal mode, use 0.024s\r\n    } else {\r\n        globalThis.deltaData.useHighOffset = false; // Odometer mode, use 0.020s\r\n    }\r\n}\r\n\r\n// LAP CHANGE DETECTION - Detect lap completion and handle best lap tracking\r\nif (completedLaps > globalThis.deltaData.lastCompletedLap) {\r\n    if (bestLapTime > 0 && (globalThis.deltaData.bestLapTime <= 0 || bestLapTime < globalThis.deltaData.bestLapTime)) {\r\n        var prevBestTime = globalThis.deltaData.bestLapTime;\r\n        var prevSegments = globalThis.deltaData.bestLapSegments;\r\n        \r\n        globalThis.deltaData.calibrationOffset = 0;\r\n        globalThis.deltaData.nonBestLapCount = 0;\r\n        \r\n        globalThis.deltaData.bestLapTime = bestLapTime;\r\n        globalThis.deltaData.bestLapSegments = JSON.parse(JSON.stringify(globalThis.deltaData.currentLapSegments));\r\n        \r\n        if (prevBestTime > 0 && Object.keys(prevSegments).length > 0) {\r\n            var lastSegment = Math.max(...Object.keys(prevSegments).map(Number));\r\n            if (lastSegment in prevSegments && lastSegment in globalThis.deltaData.bestLapSegments) {\r\n                var prevEndTime = prevSegments[lastSegment];\r\n                var newEndTime = globalThis.deltaData.bestLapSegments[lastSegment];\r\n                var measuredDiff = prevEndTime - newEndTime;\r\n                var reportedDiff = prevBestTime - bestLapTime;\r\n                globalThis.deltaData.calibrationOffset = reportedDiff - measuredDiff;\r\n            }\r\n        }\r\n    } else if (bestLapTime === globalThis.deltaData.lastBestLapTime) {\r\n        globalThis.deltaData.nonBestLapCount++;\r\n    }\r\n    \r\n    globalThis.deltaData.lastBestLapTime = bestLapTime;\r\n    globalThis.deltaData.lapChanges.push({\r\n        time: Date.now(),\r\n        from: globalThis.deltaData.lastCompletedLap,\r\n        to: completedLaps,\r\n        bestTime: bestLapTime,\r\n        segmentCount: Object.keys(globalThis.deltaData.currentLapSegments).length,\r\n        calibration: globalThis.deltaData.calibrationOffset,\r\n        nonBestLapCount: globalThis.deltaData.nonBestLapCount\r\n    });\r\n    \r\n    globalThis.deltaData.lastCompletedLap = completedLaps;\r\n    globalThis.deltaData.currentLapSegments = {};\r\n}\r\n\r\n// Update state tracking\r\nglobalThis.deltaData.lastDistance = distanceTraveled;\r\nglobalThis.deltaData.lastLapDistance = lapDistance;\r\n\r\n// DELTA CALCULATION - with precision focus and calibration\r\nvar delta = 0;\r\nif (Object.keys(globalThis.deltaData.bestLapSegments).length > 0 && currentLapTime > 0) {\r\n    var currentSegment = Math.floor(lapDistance / globalThis.deltaData.segmentSize);\r\n    var nextSegment = currentSegment + 1;\r\n    \r\n    var currentSegmentBestTime = globalThis.deltaData.bestLapSegments[currentSegment];\r\n    var nextSegmentBestTime = globalThis.deltaData.bestLapSegments[nextSegment];\r\n    \r\n    if (currentSegmentBestTime !== undefined) {\r\n        if (nextSegmentBestTime !== undefined) {\r\n            var progress = (lapDistance / globalThis.deltaData.segmentSize) - currentSegment;\r\n            var interpolatedBestTime = currentSegmentBestTime + (nextSegmentBestTime - currentSegmentBestTime) * progress;\r\n            delta = currentLapTime - interpolatedBestTime - globalThis.deltaData.calibrationOffset;\r\n        } else {\r\n            delta = currentLapTime - currentSegmentBestTime - globalThis.deltaData.calibrationOffset;\r\n        }\r\n        \r\n        var deltaChange = delta - globalThis.deltaData.lastDelta;\r\n        if (Math.abs(deltaChange) > 0.5) {\r\n            delta = globalThis.deltaData.lastDelta + (deltaChange > 0 ? 0.5 : -0.5);\r\n        }\r\n    } else {\r\n        delta = globalThis.deltaData.lastDelta;\r\n    }\r\n}\r\n\r\nglobalThis.deltaData.lastDelta = delta;\r\n\r\n// Apply dynamic offset based on non-best lap count and switch state\r\nvar baseOffset = 0.008; // Base offset for SimHub delay\r\nvar extraOffset = globalThis.deltaData.nonBestLapCount * (globalThis.deltaData.useHighOffset ? 0.024 : 0.020);\r\ndelta += baseOffset + extraOffset;\r\n\r\n// NEW SMOOTHING CODE - Only affects display, not calculations\r\nif (!globalThis.deltaData.smoothingData) {\r\n    globalThis.deltaData.smoothingData = {\r\n        history: [],\r\n        lastDisplayDelta: 0\r\n    };\r\n}\r\n\r\nglobalThis.deltaData.smoothingData.history.push(delta);\r\nif (globalThis.deltaData.smoothingData.history.length > 10) {\r\n    globalThis.deltaData.smoothingData.history.shift();\r\n}\r\n\r\nvar smoothedDelta = delta;\r\nif (globalThis.deltaData.smoothingData.history.length > 5) {\r\n    var sum = 0;\r\n    var weightSum = 0;\r\n    for (var i = 0; i < globalThis.deltaData.smoothingData.history.length; i++) {\r\n        var weight = i + 1;\r\n        sum += globalThis.deltaData.smoothingData.history[i] * weight;\r\n        weightSum += weight;\r\n    }\r\n    smoothedDelta = sum / weightSum;\r\n}\r\n\r\nvar threshold = 0.01;\r\nvar displayDelta = smoothedDelta;\r\nvar lastDisplay = globalThis.deltaData.smoothingData.lastDisplayDelta;\r\nif (Math.abs(smoothedDelta - lastDisplay) < threshold) {\r\n    displayDelta = lastDisplay;\r\n}\r\nglobalThis.deltaData.smoothingData.lastDisplayDelta = displayDelta;\r\n\r\nif (Math.abs(displayDelta) < 0.011) {\r\n    displayDelta = 0;\r\n}\r\n\r\n// Apply timed race compensation if detected AND we're in odometer mode\r\nif (globalThis.deltaData.timedRaceDetected && !globalThis.deltaData.useHighOffset) {\r\n    if (completedLaps === 1) {\r\n        // Apply negative compensation on lap 2\r\n        displayDelta -= globalThis.deltaData.compensationValue;\r\n    } else if (completedLaps === 2) {\r\n        // Apply positive compensation on lap 3\r\n        displayDelta += globalThis.deltaData.compensationValue;\r\n    }\r\n    // No adjustment needed for lap 4 and beyond\r\n}\r\n\r\n// Format output\r\nvar sign = displayDelta >= 0 ? \"+\" : \"-\";\r\nvar absDelta = Math.abs(displayDelta);\r\n\r\nvar formattedDelta;\r\nif (absDelta < 10) {\r\n    formattedDelta = sign + absDelta.toFixed(2); // e.g., +1.23\r\n} else if (absDelta < 60) {\r\n    formattedDelta = sign + absDelta.toFixed(1); // e.g., +12.3\r\n} else { // Covers absDelta >= 60\r\n    formattedDelta = sign + absDelta.toFixed(0); // e.g., +61\r\n}\r\n\r\n// Store debug snapshot\r\nglobalThis.deltaData.lastCalc = {\r\n    time: Date.now(),\r\n    lapTime: currentLapTime,\r\n    bestLapTime: bestLapTime,\r\n    lapDistance: lapDistance,\r\n    rawDelta: delta,\r\n    smoothedDelta: displayDelta,\r\n    formatted: formattedDelta,\r\n    calibration: globalThis.deltaData.calibrationOffset,\r\n    resetCount: globalThis.deltaData.resetCount,\r\n    nonBestLapCount: globalThis.deltaData.nonBestLapCount,\r\n    useHighOffset: globalThis.deltaData.useHighOffset,\r\n    timedRace: globalThis.deltaData.timedRaceDetected,\r\n    compensation: globalThis.deltaData.compensationValue\r\n};\r\n\r\nreturn formattedDelta;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"CurrentLapTime","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"//Artiick-Ver 1.5.0: Raw Current LapTime\r\n\r\nvar raceTime = $prop('GameRawData.CurrentRaceTime'); \r\nvar completedLaps = $prop('CompletedLaps'); \r\nvar distanceTraveled = $prop(\"GameRawData.DistanceTraveled\"); \r\nvar currentLap = $prop('GameRawData.CurrentLap');\r\n\r\n// Initialize global variables \r\nif (typeof globalThis.lapStartTime === 'undefined') { \r\n    globalThis.lapStartTime = raceTime; \r\n    globalThis.lastCompletedLaps = 0; \r\n    globalThis.useCurrentLap = false; // Flag to decide which value to return \r\n    globalThis.checkTimeElapsed = 0; // Track time spent checking \r\n}\r\n\r\n// Handle race start/reset \r\nif (completedLaps === 0 && distanceTraveled <= 0) { \r\n    globalThis.lapStartTime = raceTime; \r\n    globalThis.useCurrentLap = false; // Reset to check again \r\n    globalThis.checkTimeElapsed = 0; \r\n}\r\n\r\n// Update elapsed time for checking (only on lap 0) \r\nif (completedLaps === 0 && raceTime >= globalThis.lapStartTime) { \r\n    globalThis.checkTimeElapsed = raceTime - globalThis.lapStartTime; \r\n}\r\n\r\n// Check difference for first 5 seconds on lap 0 \r\nif (completedLaps === 0 && globalThis.checkTimeElapsed <= 5) { \r\n    if (currentLap > raceTime + 5 || currentLap < raceTime - 5) { \r\n        globalThis.useCurrentLap = false; // Use stopwatch if difference is large \r\n    } else { \r\n        globalThis.useCurrentLap = true; // Use CurrentLap if within 5s \r\n    } \r\n    // Always return stopwatch value during check, even if distanceTraveled is 0\r\n    return raceTime - globalThis.lapStartTime; \r\n}\r\n\r\n// Reset timer at lap change \r\nif (completedLaps > (globalThis.lastCompletedLaps || 0)) { \r\n    globalThis.lapStartTime = raceTime; \r\n}\r\n\r\n// Update last completed laps \r\nglobalThis.lastCompletedLaps = completedLaps;\r\n\r\n// Always return a laptime value, regardless of distanceTraveled\r\nif (globalThis.useCurrentLap) { \r\n    return currentLap; \r\n} else { \r\n    return raceTime - globalThis.lapStartTime; \r\n}"},"EvaluateBeforeScreenRoles":false},{"VariableName":"grnColorBlend","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.15: Green Delta color blend\r\n\r\n// Minimal storage for negative values\r\nif (typeof globalThis.deltaStateNeg === 'undefined') {\r\n    globalThis.deltaStateNeg = {\r\n        prevValue: 0,\r\n        lastToggleTime: Date.now()\r\n    };\r\n}\r\n\r\nvar state = globalThis.deltaStateNeg;\r\nvar raw = $prop('variable.LiveDeltaSegments') || 0;\r\nvar current = Math.abs(raw);\r\nvar now = Date.now();\r\nvar tolerance = 0.01;\r\nvar l1, l2, l3;\r\n\r\n// Check if value is negative\r\nif (raw < 0) {\r\n    // Detect increase (e.g., -7 to -9, abs: 7 to 9)\r\n    if (current > state.prevValue + tolerance) {\r\n        l1 = \"100\";\r\n        l2 = \"33\";\r\n        l3 = \"0\";\r\n        state.lastToggleTime = now;\r\n    }\r\n    // Detect stationary\r\n    else if (Math.abs(current - state.prevValue) <= tolerance) {\r\n        var elapsed = now - state.lastToggleTime;\r\n        var cycle = Math.floor(elapsed / 1500);\r\n        var withinCycle = elapsed - cycle * 1500;\r\n        if (withinCycle < 250) {\r\n            l1 = \"100\"; // 0–250ms: hold 100\r\n        } else if (withinCycle < 750) {\r\n            // 250–750ms: linear transition from 100 to 50\r\n            var t = (withinCycle - 250) / 500; // 0 to 1 over 500ms\r\n            l1 = (100 - t * 50).toFixed(1); // 100 to 50\r\n        } else if (withinCycle < 1000) {\r\n            l1 = \"50\"; // 750–1000ms: hold 50\r\n        } else {\r\n            // 1000–1500ms: linear transition from 50 to 100\r\n            var t = (withinCycle - 1000) / 500; // 0 to 1 over 500ms\r\n            l1 = (50 + t * 50).toFixed(1); // 50 to 100\r\n        }\r\n        l2 = \"75\";\r\n        l3 = \"0\";\r\n        if (withinCycle >= 1500) {\r\n            state.lastToggleTime = now;\r\n        }\r\n    }\r\n    // Detect decrease (e.g., -9 to -7, abs: 9 to 7)\r\n    else if (current < state.prevValue - tolerance) {\r\n        l1 = \"0\";\r\n        l2 = \"33\";\r\n        l3 = \"100\";\r\n        state.lastToggleTime = now;\r\n    }\r\n    // Default within range\r\n    else {\r\n        l1 = \"100\";\r\n        l2 = \"33\";\r\n        l3 = \"0\";\r\n        state.lastToggleTime = now;\r\n    }\r\n    state.prevValue = current;\r\n}\r\n// Outside range (positive or zero)\r\nelse {\r\n    l1 = \"100\";\r\n    l2 = \"33\";\r\n    l3 = \"0\";\r\n    state.prevValue = 0;\r\n}\r\n\r\nreturn \"0. \" + l1 + \" 1. \" + l2 + \" 2. \" + l3;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"grnCol1","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: green delta color blend \r\n\r\n// Read parent formula output\r\nvar deltaString = $prop('variable.grnColorBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1, 1 for L2, 2 for L3)\r\nvar index = 0; // Change to 0, 1, or 2 as needed\r\n// Split string into entries\r\nvar deltaEntries = deltaString.trim().split(/\\s+/);\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < deltaEntries.length - 1; i += 2) {\r\n    var indexPart = deltaEntries[i];\r\n    var valuePart = deltaEntries[i + 1];\r\n    if (indexPart && valuePart && indexPart.startsWith(index + \".\")) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"grnCol2","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: green delta color blend \r\n\r\n// Read parent formula output\r\nvar deltaString = $prop('variable.grnColorBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1, 1 for L2, 2 for L3)\r\nvar index = 1; // Change to 0, 1, or 2 as needed\r\n\r\n// Split string into entries\r\nvar deltaEntries = deltaString.trim().split(/\\s+/);\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < deltaEntries.length - 1; i += 2) {\r\n    var indexPart = deltaEntries[i];\r\n    var valuePart = deltaEntries[i + 1];\r\n    if (indexPart && valuePart && indexPart.startsWith(index + \".\")) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"grnCol3","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: green delta color blend \r\n\r\n// Read parent formula output\r\nvar deltaString = $prop('variable.grnColorBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1, 1 for L2, 2 for L3)\r\nvar index = 2; // Change to 0, 1, or 2 as needed\r\n\r\n// Split string into entries\r\nvar deltaEntries = deltaString.trim().split(/\\s+/);\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < deltaEntries.length - 1; i += 2) {\r\n    var indexPart = deltaEntries[i];\r\n    var valuePart = deltaEntries[i + 1];\r\n    if (indexPart && valuePart && indexPart.startsWith(index + \".\")) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"redColorBlend","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.17: Red Delta color blend\r\n\r\nif (typeof globalThis.deltaStatePos === 'undefined') {\r\n    globalThis.deltaStatePos = {\r\n        prevValue: 0,\r\n        lastToggleTime: Date.now()\r\n    };\r\n}\r\n\r\nvar state = globalThis.deltaStatePos;\r\nvar current = $prop('variable.LiveDeltaSegments') || 0;\r\nvar now = Date.now();\r\nvar tolerance = 0.01;\r\nvar l1, l2, l3;\r\n\r\nif (current > 0) {\r\n    if (current > state.prevValue + tolerance) {\r\n        l1 = \"100\";\r\n        l2 = \"33\";\r\n        l3 = \"0\";\r\n        state.lastToggleTime = now;\r\n\r\n    } else if (Math.abs(current - state.prevValue) <= tolerance) {\r\n        var elapsed = now - state.lastToggleTime;\r\n        var cycle = Math.floor(elapsed / 1500);\r\n        var withinCycle = elapsed - cycle * 1500;\r\n\r\n        if (withinCycle < 250) {\r\n            l1 = \"100\";\r\n        } else if (withinCycle < 750) {\r\n            var t = (withinCycle - 250) / 500;\r\n            l1 = (100 - t * 50).toFixed(1);\r\n        } else if (withinCycle < 1000) {\r\n            l1 = \"50\";\r\n        } else {\r\n            var t = (withinCycle - 1000) / 500;\r\n            l1 = (50 + t * 50).toFixed(1);\r\n        }\r\n\r\n        l2 = \"75\";\r\n        l3 = \"0\";\r\n        if (withinCycle >= 1500) {\r\n            state.lastToggleTime = now;\r\n        }\r\n\r\n    } else if (current < state.prevValue - tolerance) {\r\n        l1 = \"0\";\r\n        l2 = \"33\";\r\n        l3 = \"100\";\r\n        state.lastToggleTime = now;\r\n\r\n    } else {\r\n        l1 = \"100\";\r\n        l2 = \"33\";\r\n        l3 = \"0\";\r\n        state.lastToggleTime = now;\r\n    }\r\n\r\n    state.prevValue = current;\r\n} else {\r\n    l1 = \"100\";\r\n    l2 = \"33\";\r\n    l3 = \"0\";\r\n    state.prevValue = 0;\r\n}\r\n\r\nreturn \"0. \" + l1 + \" 1. \" + l2 + \" 2. \" + l3;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"redCol1","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: red delta color blend \r\n\r\n// Read parent formula output\r\nvar deltaString = $prop('variable.redColorBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1, 1 for L2, 2 for L3)\r\nvar index = 0; // Change to 0, 1, or 2 as needed\r\n// Split string into entries\r\nvar deltaEntries = deltaString.trim().split(/\\s+/);\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < deltaEntries.length - 1; i += 2) {\r\n    var indexPart = deltaEntries[i];\r\n    var valuePart = deltaEntries[i + 1];\r\n    if (indexPart && valuePart && indexPart.startsWith(index + \".\")) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"redCol2","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: red delta color blend \r\n\r\n// Read parent formula output\r\nvar deltaString = $prop('variable.redColorBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1, 1 for L2, 2 for L3)\r\nvar index = 1; // Change to 0, 1, or 2 as needed\r\n// Split string into entries\r\nvar deltaEntries = deltaString.trim().split(/\\s+/);\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < deltaEntries.length - 1; i += 2) {\r\n    var indexPart = deltaEntries[i];\r\n    var valuePart = deltaEntries[i + 1];\r\n    if (indexPart && valuePart && indexPart.startsWith(index + \".\")) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"redCol3","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: red delta color blend \r\n\r\n// Read parent formula output\r\nvar deltaString = $prop('variable.redColorBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1, 1 for L2, 2 for L3)\r\nvar index = 2; // Change to 0, 1, or 2 as needed\r\n// Split string into entries\r\nvar deltaEntries = deltaString.trim().split(/\\s+/);\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < deltaEntries.length - 1; i += 2) {\r\n    var indexPart = deltaEntries[i];\r\n    var valuePart = deltaEntries[i + 1];\r\n    if (indexPart && valuePart && indexPart.startsWith(index + \".\")) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"trackLimColBlend","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"//(old) Fades in and out for the start color blue\r\n// Artiick-ver 1.5.5: Track Limit color blend\r\n// var value = Math.abs($prop('GameRawData.NormalizedDrivingLine') || 0);\r\n// var l1, l2, l3;\r\n\r\n// // Layer 1 (Blue)\r\n// if (value <= 86) {\r\n//     l1 = \"0\";\r\n// } else if (value <= 106) {\r\n//     // Linear increase from 0 to 100 over 87–106\r\n//     var t = (value - 87) / (106 - 87); // 0 to 1\r\n//     l1 = (t * 100).toFixed(1); // 0 to 100\r\n// } else if (value <= 112) {\r\n//     // Linear decrease from 100 to 66 over 107–112\r\n//     var t = (value - 107) / (112 - 107); // 0 to 1\r\n//     l1 = (100 - t * (100 - 66)).toFixed(1); // 100 to 66\r\n// } else if (value <= 117) {\r\n//     // Linear decrease from 66 to 0 over 113–117\r\n//     var t = (value - 113) / (117 - 113); // 0 to 1\r\n//     l1 = (66 - t * 66).toFixed(1); // 66 to 0\r\n// } else {\r\n//     l1 = \"0\";\r\n// }\r\n\r\n// // Layer 2 (Yellow)\r\n// if (value <= 106) {\r\n//     l2 = \"0\";\r\n// } else if (value <= 116) {\r\n//     // Linear increase from 0 to 100 over 107–116\r\n//     var t = (value - 107) / (116 - 107); // 0 to 1\r\n//     l2 = (t * 100).toFixed(1); // 0 to 100\r\n// } else if (value <= 122) {\r\n//     // Linear decrease from 100 to 66 over 117–122\r\n//     var t = (value - 117) / (122 - 117); // 0 to 1\r\n//     l2 = (100 - t * (100 - 66)).toFixed(1); // 100 to 66\r\n// } else {\r\n//     l2 = \"0\";\r\n// }\r\n\r\n// // Layer 3 (Red)\r\n// if (value <= 116) {\r\n//     l3 = \"0\";\r\n// } else {\r\n//     // Linear increase from 0 to 100 over 117–123\r\n//     var maxValue = Math.min(value, 123); // Cap at 123\r\n//     var t = (maxValue - 117) / (123 - 117); // 0 to 1\r\n//     l3 = (t * 100).toFixed(1); // 0 to 100\r\n// }\r\n\r\n// return \"0. \" + l1 + \" 1. \" + l2 + \" 2. \" + l3;\r\n\r\n// Artiick-ver 1.5.6: (new) Track Limit color blend (starts already showing)\r\n\r\nvar value = Math.abs($prop('GameRawData.NormalizedDrivingLine') || 0);\r\nvar l1, l2, l3;\r\n\r\n// Layer 1 (Blue)\r\nif (value <= 106) {\r\n    l1 = \"100\"; // 0–106: full opacity\r\n} else if (value <= 112) {\r\n    // Linear decrease from 100 to 66 over 107–112\r\n    var t = (value - 107) / (112 - 107); // 0 to 1\r\n    l1 = (100 - t * (100 - 66)).toFixed(1); // 100 to 66\r\n} else if (value <= 117) {\r\n    // Linear decrease from 66 to 0 over 113–117\r\n    var t = (value - 113) / (117 - 113); // 0 to 1\r\n    l1 = (66 - t * 66).toFixed(1); // 66 to 0\r\n} else {\r\n    l1 = \"0\";\r\n}\r\n\r\n// Layer 2 (Yellow)\r\nif (value <= 106) {\r\n    l2 = \"0\";\r\n} else if (value <= 116) {\r\n    // Linear increase from 0 to 100 over 107–116\r\n    var t = (value - 107) / (116 - 107); // 0 to 1\r\n    l2 = (t * 100).toFixed(1); // 0 to 100\r\n} else if (value <= 122) {\r\n    // Linear decrease from 100 to 66 over 117–122\r\n    var t = (value - 117) / (122 - 117); // 0 to 1\r\n    l2 = (100 - t * (100 - 66)).toFixed(1); // 100 to 66\r\n} else {\r\n    l2 = \"0\";\r\n}\r\n\r\n// Layer 3 (Red)\r\nif (value <= 116) {\r\n    l3 = \"0\";\r\n} else {\r\n    // Linear increase from 0 to 100 over 117–123\r\n    var maxValue = Math.min(value, 123); // Cap at 123\r\n    var t = (maxValue - 117) / (123 - 117); // 0 to 1\r\n    l3 = (t * 100).toFixed(1); // 0 to 100\r\n}\r\n\r\nreturn \"0. \" + l1 + \" 1. \" + l2 + \" 2. \" + l3;"},"EvaluateBeforeScreenRoles":false}]},"DashboardDebugManager":{},"Version":2,"Id":"1a1e7ffa-0ad1-4b07-bb26-d7598734d63e","BaseHeight":50,"BaseWidth":600,"BackgroundColor":"#FF000000","Screens":[{"RenderingSkip":0,"Name":"Screen","InGameScreen":true,"IdleScreen":true,"PitScreen":false,"ScreenId":"04d27c3b-cd49-44d8-ae78-80fde6486ada","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":""},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":-9.0,"Opacity":1.0,"Top":0.0,"Visible":true,"Width":618.0,"IsFreezed":true,"Name":"Align","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Top":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"setsharedvalue(\"artiick\", \"liveDelta\", $prop(\"variable.LiveDeltaSegments\"))"},"Mode":2},"Left":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"setsharedvalue(\"artiick\", \"currentLapRaw\", $prop(\"variable.CurrentLapTime\"))"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"back-right","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2},"Height":19.0,"Left":340.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Background","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"back-left","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopLeft":2,"RadiusBottomLeft":2},"Height":19.0,"Left":0.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Background2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0}],"Visible":true,"Name":"Background","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Green-DeltaR","AutoSize":false,"AutoSizeScale":0.0,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderColor":"#00FFFFFF","RadiusTopLeft":2,"RadiusBottomLeft":2,"Bindings":{"RadiusTopLeft":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        width = 0;\r\n    } else if (delta <= -5) {\r\n        width = 2;\r\n    } else {\r\n        width = Math.min(2, (Math.abs(delta) / 5) * 2);\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"RadiusBottomLeft":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        width = 0;\r\n    } else if (delta <= -5) {\r\n        width = 2;\r\n    } else {\r\n        width = Math.min(2, (Math.abs(delta) / 5) * 2);\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2}}},"Height":19.0,"Left":0.0,"Top":15.0,"Visible":true,"Width":260.0,"IsFreezed":true,"Name":"Green Delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Width":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        width = 4;\r\n    } else if (delta <= -5) {\r\n        width = 260;\r\n    } else {\r\n        width = Math.min(260, (Math.abs(delta) / 5) * 260);\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"Left":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar positionOffset = 260;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        positionOffset = 256;\r\n    } else if (delta <= -5) {\r\n        positionOffset = 0;\r\n    } else {\r\n        positionOffset = 260 - Math.min(260, (Math.abs(delta) / 5) * 260);\r\n    }\r\n}\r\n\r\nreturn positionOffset;"},"Mode":2},"Opacity":{"Formula":{"Expression":"inertia([variable.grnCol3], 250)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Green-DeltaW","AutoSize":false,"AutoSizeScale":0.0,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderColor":"#00FFFFFF","RadiusTopLeft":2,"RadiusBottomLeft":2,"Bindings":{"RadiusTopLeft":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        width = 0;\r\n    } else if (delta <= -5) {\r\n        width = 2;\r\n    } else {\r\n        width = Math.min(2, (Math.abs(delta) / 5) * 2);\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"RadiusBottomLeft":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        width = 0;\r\n    } else if (delta <= -5) {\r\n        width = 2;\r\n    } else {\r\n        width = Math.min(2, (Math.abs(delta) / 5) * 2);\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2}}},"Height":19.0,"Left":0.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Green Delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Width":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        width = 4;\r\n    } else if (delta <= -5) {\r\n        width = 260;\r\n    } else {\r\n        width = Math.min(260, (Math.abs(delta) / 5) * 260);\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"Left":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar positionOffset = 260;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        positionOffset = 256;\r\n    } else if (delta <= -5) {\r\n        positionOffset = 0;\r\n    } else {\r\n        positionOffset = 260 - Math.min(260, (Math.abs(delta) / 5) * 260);\r\n    }\r\n}\r\n\r\nreturn positionOffset;"},"Mode":2},"Opacity":{"Formula":{"Expression":"inertia([variable.grnCol2], 250)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Green-Delta","AutoSize":false,"AutoSizeScale":0.0,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderColor":"#00FFFFFF","RadiusTopLeft":2,"RadiusBottomLeft":2,"Bindings":{"RadiusTopLeft":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        width = 0;\r\n    } else if (delta <= -5) {\r\n        width = 2;\r\n    } else {\r\n        width = Math.min(2, (Math.abs(delta) / 5) * 2);\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"RadiusBottomLeft":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        width = 0;\r\n    } else if (delta <= -5) {\r\n        width = 2;\r\n    } else {\r\n        width = Math.min(2, (Math.abs(delta) / 5) * 2);\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2}}},"Height":19.0,"Left":0.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Green Delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Width":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        width = 4;\r\n    } else if (delta <= -5) {\r\n        width = 260;\r\n    } else {\r\n        width = Math.min(260, (Math.abs(delta) / 5) * 260);\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"Left":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar positionOffset = 260;\r\nif (delta < 0) {\r\n    if (delta >= -0.07) {\r\n        positionOffset = 256;\r\n    } else if (delta <= -5) {\r\n        positionOffset = 0;\r\n    } else {\r\n        positionOffset = 260 - Math.min(260, (Math.abs(delta) / 5) * 260);\r\n    }\r\n}\r\n\r\nreturn positionOffset;"},"Mode":2},"Opacity":{"Formula":{"Expression":"inertia([variable.grnCol1], 250)"},"Mode":2}}}],"Visible":true,"Name":"green delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Red-DeltaG","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2,"Bindings":{"RadiusTopRight":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta > 0) {\r\n    if (delta <= 0.07) {\r\n        width = 0;\r\n    } else if (delta >= 5) {\r\n        width = 2;\r\n    } else {\r\n        width = (delta / 5) * 2;\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"RadiusBottomRight":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta > 0) {\r\n    if (delta <= 0.07) {\r\n        width = 0;\r\n    } else if (delta >= 5) {\r\n        width = 2;\r\n    } else {\r\n        width = (delta / 5) * 2;\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2}}},"Height":19.0,"Left":340.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Red Delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Width":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta > 0) {\r\n    if (delta <= 0.07) {\r\n        width = 4;\r\n    } else if (delta >= 5) {\r\n        width = 260;\r\n    } else {\r\n        width = (delta / 5) * 260;\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"Opacity":{"Formula":{"Expression":"inertia([variable.redCol3], 250)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Red-DeltaW","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2,"Bindings":{"RadiusTopRight":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta > 0) {\r\n    if (delta <= 0.07) {\r\n        width = 0;\r\n    } else if (delta >= 5) {\r\n        width = 2;\r\n    } else {\r\n        width = (delta / 5) * 2;\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"RadiusBottomRight":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta > 0) {\r\n    if (delta <= 0.07) {\r\n        width = 0;\r\n    } else if (delta >= 5) {\r\n        width = 2;\r\n    } else {\r\n        width = (delta / 5) * 2;\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2}}},"Height":19.0,"Left":340.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Red Delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Width":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta > 0) {\r\n    if (delta <= 0.07) {\r\n        width = 4;\r\n    } else if (delta >= 5) {\r\n        width = 260;\r\n    } else {\r\n        width = (delta / 5) * 260;\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"Opacity":{"Formula":{"Expression":"inertia([variable.redCol2], 250)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Red-Delta","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2,"Bindings":{"RadiusTopRight":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta > 0) {\r\n    if (delta <= 0.07) {\r\n        width = 0;\r\n    } else if (delta >= 5) {\r\n        width = 2;\r\n    } else {\r\n        width = (delta / 5) * 2;\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"RadiusBottomRight":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta > 0) {\r\n    if (delta <= 0.07) {\r\n        width = 0;\r\n    } else if (delta >= 5) {\r\n        width = 2;\r\n    } else {\r\n        width = (delta / 5) * 2;\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2}}},"Height":19.0,"Left":340.0,"Top":15.0,"Visible":true,"Width":260.0,"IsFreezed":true,"Name":"Red Delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Width":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var deltaRaw = $prop(\"variable.LiveDeltaSegments\");\r\nvar delta = parseFloat(deltaRaw) || 0;\r\n\r\nvar width = 0;\r\nif (delta > 0) {\r\n    if (delta <= 0.07) {\r\n        width = 4;\r\n    } else if (delta >= 5) {\r\n        width = 260;\r\n    } else {\r\n        width = (delta / 5) * 260;\r\n    }\r\n}\r\n\r\nreturn width;"},"Mode":2},"Opacity":{"Formula":{"Expression":"inertia([variable.redCol1], 250)"},"Mode":2}}}],"Visible":true,"Name":"red delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":35.0,"Text":"4.44","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":15.200000000000003,"SpecialCharsWidth":5.5,"BackgroundColor":"#00FFFFFF","Height":39.0,"Left":254.5,"Top":6.1,"Visible":true,"Width":102.0,"IsFreezed":true,"Name":"Delta-Text","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"abs([variable.LiveDeltaSegments])"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\");// Apply dead zone\r\n\r\nif (Math.abs(delta) < 0.009) \r\n{delta = 0;}// Determine color based on adjusted delta\r\n\r\nvar color = delta === 0 ? \"#ffffff\" \r\n: delta < 0 ? \"#00ff7f\" \r\n: \"#ff0033\";\r\n\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":35.0,"Text":"+","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":15.200000000000003,"SpecialCharsWidth":5.5,"BackgroundColor":"#00FFFFFF","Height":39.0,"Left":267.0,"Top":6.1,"Visible":true,"Width":15.0,"IsFreezed":true,"Name":"Delta-Text-Symbol","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\");// Apply dead zone\r\n\r\nif (Math.abs(delta) < 0.009) \r\n{delta = 0;}// Determine color based on adjusted delta\r\n\r\nvar color = delta === 0 ? \"+\" \r\n: delta < 0 ? \"-\" \r\n: \"+\";\r\n\r\nreturn color;"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\");// Apply dead zone\r\n\r\nif (Math.abs(delta) < 0.009) \r\n{delta = 0;}// Determine color based on adjusted delta\r\n\r\nvar color = delta === 0 ? \"#ffffff\" \r\n: delta < 0 ? \"#00ff7f\" \r\n: \"#ff0033\";\r\n\r\nreturn color;"},"Mode":2},"Top":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\");// Apply dead zone\r\n\r\nif (Math.abs(delta) < 0.009) \r\n{delta = 0;}// Determine color based on adjusted delta\r\n\r\nvar color = delta === 0 ? \"6.1\" \r\n: delta < 0 ? \"3.5\" \r\n: \"6.1\";\r\n\r\nreturn color;"},"Mode":2},"Left":{"Formula":{"Expression":"if(\r\n[variable.LiveDeltaSegments] > 59.95 || [variable.LiveDeltaSegments] < -59.95, '277',\r\n'267'\r\n)"},"Mode":2}}}],"Visible":true,"Name":"Delta Bar","RenderingSkip":1,"MinimumRefreshIntervalMS":17.0,"Bindings":{"Visible":{"Formula":{"Expression":"if([CurrentLap] > 1 AND timespantoseconds([LastLapTime]) > 0, 1, 0)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"back-left","AutoSize":false,"AutoSizeScale":0.0,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderColor":"#00FFFFFF","RadiusTopLeft":2,"RadiusBottomLeft":2},"Height":3.0,"Left":0.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limitbg","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"back-right","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2},"Height":3.0,"Left":340.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limit bg","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"tracklim-blue-left","AutoSize":false,"AutoSizeScale":0.0,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderColor":"#00FFFFFF","RadiusTopLeft":2,"RadiusBottomLeft":2},"Height":3.0,"Left":0.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limit","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.1: track limit blend mix \r\n\r\n// Read parent formula output\r\nvar trackString = $prop('variable.trackLimColBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1 Blue, 1 for L2 Yellow, 2 for L3 Red)\r\nvar index = 0; // Change to 0, 1, or 2 as needed\r\n\r\n// Normalize and split string\r\nvar trackEntries = trackString.replace(/\\s+/g, ' ').trim().split(' ');\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < trackEntries.length - 1; i += 2) {\r\n    var indexPart = trackEntries[i];\r\n    var valuePart = trackEntries[i + 1];\r\n    if (indexPart === index + \".\" && valuePart) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"tracklim-yell-left","AutoSize":false,"AutoSizeScale":0.0,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderColor":"#00FFFFFF","RadiusTopLeft":2,"RadiusBottomLeft":2},"Height":3.0,"Left":0.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limit2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.1: track limit blend mix \r\n\r\n// Read parent formula output\r\nvar trackString = $prop('variable.trackLimColBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1 Blue, 1 for L2 Yellow, 2 for L3 Red)\r\nvar index = 1; // Change to 0, 1, or 2 as needed\r\n\r\n// Normalize and split string\r\nvar trackEntries = trackString.replace(/\\s+/g, ' ').trim().split(' ');\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < trackEntries.length - 1; i += 2) {\r\n    var indexPart = trackEntries[i];\r\n    var valuePart = trackEntries[i + 1];\r\n    if (indexPart === index + \".\" && valuePart) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"tracklim-red-left","AutoSize":false,"AutoSizeScale":0.0,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderColor":"#00FFFFFF","RadiusTopLeft":2,"RadiusBottomLeft":2},"Height":3.0,"Left":0.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limit3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.1: track limit blend mix \r\n\r\n// Read parent formula output\r\nvar trackString = $prop('variable.trackLimColBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1 Blue, 1 for L2 Yellow, 2 for L3 Red)\r\nvar index = 2; // Change to 0, 1, or 2 as needed\r\n\r\n// Normalize and split string\r\nvar trackEntries = trackString.replace(/\\s+/g, ' ').trim().split(' ');\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < trackEntries.length - 1; i += 2) {\r\n    var indexPart = trackEntries[i];\r\n    var valuePart = trackEntries[i + 1];\r\n    if (indexPart === index + \".\" && valuePart) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"tracklim-blue-right","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2},"Height":3.0,"Left":340.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limit ","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.1: track limit blend mix \r\n\r\n// Read parent formula output\r\nvar trackString = $prop('variable.trackLimColBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1 Blue, 1 for L2 Yellow, 2 for L3 Red)\r\nvar index = 0; // Change to 0, 1, or 2 as needed\r\n\r\n// Normalize and split string\r\nvar trackEntries = trackString.replace(/\\s+/g, ' ').trim().split(' ');\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < trackEntries.length - 1; i += 2) {\r\n    var indexPart = trackEntries[i];\r\n    var valuePart = trackEntries[i + 1];\r\n    if (indexPart === index + \".\" && valuePart) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"tracklim-yell-right","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2},"Height":3.0,"Left":340.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limit 2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.1: track limit blend mix \r\n\r\n// Read parent formula output\r\nvar trackString = $prop('variable.trackLimColBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1 Blue, 1 for L2 Yellow, 2 for L3 Red)\r\nvar index = 1; // Change to 0, 1, or 2 as needed\r\n\r\n// Normalize and split string\r\nvar trackEntries = trackString.replace(/\\s+/g, ' ').trim().split(' ');\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < trackEntries.length - 1; i += 2) {\r\n    var indexPart = trackEntries[i];\r\n    var valuePart = trackEntries[i + 1];\r\n    if (indexPart === index + \".\" && valuePart) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"tracklim-red-right","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2},"Height":3.0,"Left":340.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limit 3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.1: track limit blend mix \r\n\r\n// Read parent formula output\r\nvar trackString = $prop('variable.trackLimColBlend') || \"0. 0 1. 0 2. 0\";\r\n\r\n// Hardcode index (0 for L1 Blue, 1 for L2 Yellow, 2 for L3 Red)\r\nvar index = 2; // Change to 0, 1, or 2 as needed\r\n\r\n// Normalize and split string\r\nvar trackEntries = trackString.replace(/\\s+/g, ' ').trim().split(' ');\r\n\r\n// Find value for index\r\nvar value = \"0\";\r\nfor (var i = 0; i < trackEntries.length - 1; i += 2) {\r\n    var indexPart = trackEntries[i];\r\n    var valuePart = trackEntries[i + 1];\r\n    if (indexPart === index + \".\" && valuePart) {\r\n        value = valuePart;\r\n        break;\r\n    }\r\n}\r\n\r\nreturn value;"},"Mode":2}}}],"Visible":true,"Name":"trck lim top","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"tracklim-blue-right","AutoSize":false,"BackgroundColor":"#00FFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2},"Height":3.0,"Left":340.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limit ","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"![CurrentLap] > 0"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"tracklim-blue-left","AutoSize":false,"AutoSizeScale":0.0,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderColor":"#00FFFFFF","RadiusTopLeft":2,"RadiusBottomLeft":2},"Height":3.0,"Left":0.0,"Top":10.0,"Visible":true,"Width":260.0,"Name":"track limit","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"![CurrentLap] > 0"},"Mode":2}}}],"Visible":true,"Name":"track limit","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"timespantoseconds([CurrentLapTime])>0"},"Mode":2}}}],"MinimumRefreshIntervalMS":0.0}],"SnapToGrid":false,"HideLabels":true,"ShowForeground":true,"ForegroundOpacity":100.0,"ShowBackground":true,"BackgroundOpacity":100.0,"ShowBoundingRectangles":false,"GridSize":10,"Images":[{"Name":"Green-Delta","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":87058,"MD5":"fd8f46029a5e348561c5e8e0fea1d496"},{"Name":"Red-Delta","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":80843,"MD5":"17508cceb7f60b73ee0bc9b3f8741116"},{"Name":"Green-DeltaR","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":82996,"MD5":"7f098150f48401f5efdfde94ba7fae4a"},{"Name":"Green-DeltaW","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":26251,"MD5":"d1bfd8e82ffc9bfaf0164e9cf3a8a760"},{"Name":"Red-DeltaW","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":26637,"MD5":"6af903dbba01971f5a49581b4571eef6"},{"Name":"Red-DeltaG","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":81671,"MD5":"a1196018784eed4cae58ab3eb4e3ff2b"},{"Name":"tracklim-red-left","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":108346,"MD5":"ae293301474e3ed09e224e6a856c8a6d"},{"Name":"tracklim-yell-left","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":113900,"MD5":"62b10e8f890d3d42da6c80f7f6e69320"},{"Name":"tracklim-blue-left","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":128651,"MD5":"6b635ae1f63472c970d9287195493a12"},{"Name":"tracklim-red-right","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":108527,"MD5":"672f4dc923894c6c9015ea241b846b1f"},{"Name":"tracklim-yell-right","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":113586,"MD5":"c8e4f3c4ac49e2a7880f26494dd56322"},{"Name":"tracklim-blue-right","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":70976,"MD5":"891c9316b5a752604e4653ffa54faafa"},{"Name":"back-left","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":20411,"MD5":"6ce035e2913c91c482e46634d0af1f8f"},{"Name":"back-right","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":18168,"MD5":"d3b5d5c25ec4848719ea1d4ce9645365"}],"Metadata":{"ScreenCount":1.0,"InGameScreensIndexs":[0],"IdleScreensIndexs":[0],"MainPreviewIndex":0,"IsOverlay":true,"OverlaySizeWarning":false,"MetadataVersion":2.0,"EnableOnDashboardMessaging":true,"PitScreensIndexs":[],"SimHubVersion":"9.8.1","Title":"Art-Delta-Bar","Author":"Artiick","Width":600.0,"Height":50.0,"DashboardVersion":""},"ShowOnScreenControls":true,"IsOverlay":true,"EnableClickThroughOverlay":true,"EnableOnDashboardMessaging":true,"UseStrictJSIsolation":true,"UseStrictJSIsolationWarning":true}