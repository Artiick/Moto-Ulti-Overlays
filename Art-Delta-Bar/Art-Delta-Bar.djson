{"Variables":{"DashboardVariables":[{"VariableName":"LiveDeltaSegments","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Track lengths and segment sizes (trackId: { length: kilometers, segment: meters })\r\nvar trackLengths = {\r\n    0: { length: 3.602, segment: 1 },  // Laguna Seca Full\r\n    1: { length: 3.058, segment: 1 },  // Laguna Seca Short\r\n    3: { length: 6.515, segment: 2 },  // Road America Full\r\n    5: { length: 3.483, segment: 1 },  // Road America East Route\r\n    16: { length: 4.088, segment: 1 }, // Road Atlanta Full\r\n    17: { length: 2.830, segment: 1 }, // Road Atlanta Club\r\n    21: { length: 5.890, segment: 2 }, // Silverstone GP\r\n    22: { length: 2.639, segment: 1 }, // Silverstone National\r\n    23: { length: 2.979, segment: 1 }, // Silverstone International\r\n    31: { length: 25.378, segment: 5 }, // Nurburgring Endurance\r\n    32: { length: 20.830, segment: 4 }, // Nurburgring Nordschleife\r\n    33: { length: 5.148, segment: 2 },  // Nurburgring GP\r\n    34: { length: 3.619, segment: 1 },  // Nurburgring Sprint\r\n    35: { length: 5.245, segment: 2 },  // Mugello Full\r\n    36: { length: 2.284, segment: 1 },  // Mugello Club\r\n    37: { length: 5.807, segment: 2 },  // Suzuka Full\r\n    38: { length: 2.243, segment: 1 },  // Suzuka East\r\n    40: { length: 5.954, segment: 2 },  // Sebring Full\r\n    42: { length: 3.219, segment: 1 },  // Sebring Short\r\n    67: { length: 4.830, segment: 2 },  // Maple Valley Full\r\n    68: { length: 1.850, segment: 1 }, // Maple Valley Short\r\n    70: { length: 1.850, segment: 1 }, // Maple Valley Short Reverse\r\n    100: { length: 13.629, segment: 3 }, // Le Mans Full\r\n    101: { length: 13.535, segment: 3 }, // Le Mans Old Mulsanne\r\n    110: { length: 4.657, segment: 2 },  // Barcelona Catalunya GP\r\n    111: { length: 3.071, segment: 1 },  // Barcelona Catalunya National\r\n    113: { length: 2.997, segment: 1 },  // Barcelona Catalunya National Alt\r\n    231: { length: 4.023, segment: 1 },  // Indianapolis Brickyard\r\n    232: { length: 3.925, segment: 1 },  // Indianapolis GP\r\n    250: { length: 4.574, segment: 2 },  // Hockenheimring\r\n    251: { length: 3.692, segment: 1 },  // Hockenheimring National\r\n    252: { length: 2.638, segment: 1 },  // Hockenheimring Short\r\n    510: { length: 5.281, segment: 2 },  // Yas Marina\r\n    511: { length: 3.125, segment: 1 },  // Yas Marina North\r\n    512: { length: 2.345, segment: 1 },  // Yas Marina South\r\n    513: { length: 2.290, segment: 1 },  // Yas Marina North Corkscrew\r\n    530: { length: 7.004, segment: 2 },  // Spa Francorchamps Full\r\n    540: { length: 6.213, segment: 2 },  // Mount Panorama Bathurst\r\n    840: { length: 5.729, segment: 2 },  // Daytona 24h Sports Car\r\n    841: { length: 4.023, segment: 1 },  // Daytona Tri-Oval\r\n    860: { length: 3.916, segment: 1 },  // Brands Hatch GP\r\n    861: { length: 1.944, segment: 1 }, // Brands Hatch Indy\r\n    870: { length: 5.552, segment: 2 },  // Watkins Glen Full\r\n    873: { length: 3.943, segment: 1 },  // Watkins Glen Short\r\n    880: { length: 2.462, segment: 1 },  // Lime Rock Park Full\r\n    882: { length: 2.372, segment: 1 },  // Lime Rock Park South Chicane\r\n    883: { length: 2.419, segment: 1 },  // Lime Rock Park Full Alt\r\n    990: { length: 5.262, segment: 2 },  // Virginia International Raceway Full\r\n    991: { length: 3.621, segment: 1 },  // Virginia International Raceway North\r\n    992: { length: 2.655, segment: 1 },  // Virginia International Raceway South\r\n    995: { length: 6.598, segment: 2 },  // Virginia International Raceway Grand West\r\n    996: { length: 6.759, segment: 2 },  // Virginia International Raceway Grand East\r\n    1110: { length: 2.414, segment: 1 }, // Homestead-Miami Speedway\r\n    1111: { length: 3.556, segment: 1 }, // Homestead-Miami Road Circuit\r\n    1450: { length: 3.621, segment: 1 }, // Mid-Ohio Sports Car Circuit\r\n    1452: { length: 2.816, segment: 1 }, // Mid-Ohio Short\r\n    1590: { length: 4.580, segment: 2 }, // Kyalami GP\r\n    1620: { length: 4.470, segment: 2 }, // Sunset Peninsula Raceway Full\r\n    1621: { length: 3.120, segment: 1 }, // Sunset Peninsula Raceway Club\r\n    1622: { length: 4.470, segment: 1 }, // Sunset Peninsula Raceway Full Reverse\r\n    1623: { length: 3.120, segment: 1 }, // Sunset Peninsula Raceway Club Reverse\r\n    1624: { length: 3.930, segment: 1 }, // Sunset Peninsula Raceway Speedway\r\n    1630: { length: 3.730, segment: 1 }, // Grand Oak National\r\n    1631: { length: 2.620, segment: 1 }, // Grand Oak Club\r\n    1632: { length: 3.730, segment: 1 }, // Grand Oak National Reverse\r\n    1640: { length: 4.280, segment: 1 }, // Hakone GP\r\n    1641: { length: 3.320, segment: 1 }, // Hakone Club\r\n    1643: { length: 3.320, segment: 1 }, // Hakone Club Reverse\r\n    1660: { length: 1.640, segment: 1 }, // Eaglerock Speedway Oval\r\n    1661: { length: 1.720, segment: 1 }, // Eaglerock Speedway Club\r\n    1663: { length: 1.720, segment: 1 } // Eaglerock Speedway Club Reverse\r\n};\r\n\r\n// Read current telemetry data\r\nvar currentLapTime = $prop(\"variable.CurrentLapTime\"); \r\nvar distanceTraveled = $prop(\"GameRawData.DistanceTraveled\");\r\nvar completedLaps = $prop(\"CompletedLaps\");\r\nvar bestLapTime = $prop(\"GameRawData.BestLap\");\r\nvar trackId = $prop(\"TrackId\");\r\nvar raceTime = $prop(\"GameRawData.CurrentRaceTime\");\r\nvar carId = $prop(\"CarId\");\r\nvar currentLap = $prop(\"GameRawData.CurrentLap\");\r\n\r\n// Initialize data structures (first-time only)\r\nif (typeof globalThis.deltaData === 'undefined') {\r\n    globalThis.deltaData = {\r\n        // Config\r\n        version: \"3.0\",\r\n        segmentSize: 1, // Default segment size, will be overridden per track\r\n        \r\n        // Track/session info\r\n        trackId: -1,\r\n        carId: -1,\r\n        trackLength: 0,\r\n        \r\n        // Lap info\r\n        lastCompletedLap: -1,\r\n        currentLapSegments: {},\r\n        \r\n        // Best lap info\r\n        bestLapTime: -1,\r\n        bestLapSegments: {},\r\n        calibrationOffset: 0,\r\n        lastBestLapTime: -1,\r\n        nonBestLapCount: 0,\r\n        \r\n        // State tracking\r\n        lastDistance: 0,\r\n        lastLapDistance: 0,\r\n        lastDelta: 0,\r\n        \r\n        // Reset tracking\r\n        lastResetTime: Date.now(),\r\n        resetCount: 0,\r\n        \r\n        // New offset switch tracking\r\n        lapStartTime: raceTime,\r\n        useHighOffset: true, // Default to 0.024s offset\r\n        checkTimeElapsed: 0,\r\n        \r\n        // Timed race compensation\r\n        timedRaceDetected: false,\r\n        initialCrossingTime: -1,\r\n        compensationValue: 0,\r\n        \r\n        // Debug info\r\n        lapChanges: []\r\n    };\r\n}\r\n\r\n// Check for session changes that require reset\r\nvar needsReset = false;\r\nif (raceTime < 0.5) needsReset = true;\r\nif (trackId !== globalThis.deltaData.trackId) needsReset = true;\r\nif (carId !== globalThis.deltaData.carId) needsReset = true;\r\nif (completedLaps < globalThis.deltaData.lastCompletedLap) needsReset = true;\r\n\r\n// Perform reset if needed (with cooldown)\r\nif (needsReset && Date.now() - globalThis.deltaData.lastResetTime > 1000) {\r\n    globalThis.deltaData.trackId = trackId;\r\n    globalThis.deltaData.carId = carId;\r\n    globalThis.deltaData.lastCompletedLap = -1;\r\n    globalThis.deltaData.currentLapSegments = {};\r\n    globalThis.deltaData.bestLapTime = -1;\r\n    globalThis.deltaData.bestLapSegments = {};\r\n    globalThis.deltaData.calibrationOffset = 0;\r\n    globalThis.deltaData.lastBestLapTime = -1;\r\n    globalThis.deltaData.nonBestLapCount = 0;\r\n    globalThis.deltaData.lastDistance = 0;\r\n    globalThis.deltaData.lastLapDistance = 0;\r\n    globalThis.deltaData.lastDelta = 0;\r\n    globalThis.deltaData.lastResetTime = Date.now();\r\n    globalThis.deltaData.resetCount++;\r\n    globalThis.deltaData.lapStartTime = raceTime;\r\n    globalThis.deltaData.useHighOffset = true; // Reset to default\r\n    globalThis.deltaData.checkTimeElapsed = 0;\r\n    globalThis.deltaData.lapChanges = [];\r\n    globalThis.deltaData.timedRaceDetected = false;\r\n    globalThis.deltaData.initialCrossingTime = -1;\r\n    globalThis.deltaData.compensationValue = 0;\r\n}\r\n\r\n// Get track length and segment size (meters)\r\nvar trackData = trackLengths[trackId] || { length: 0, segment: 1 }; // Default to 0 length, 1m segment if unknown\r\nglobalThis.deltaData.trackLength = trackData.length > 0 ? trackData.length * 1000 : 0;\r\nglobalThis.deltaData.segmentSize = trackData.segment; // Set segment size for this track\r\n\r\n// Early exit if no track data\r\nif (globalThis.deltaData.trackLength <= 0) {\r\n    return \"+0.00\";\r\n}\r\n\r\n// Calculate current lap distance precisely\r\nvar lapDistance = distanceTraveled - (completedLaps * globalThis.deltaData.trackLength);\r\nif (lapDistance < 0 || lapDistance > globalThis.deltaData.trackLength * 1.1) {\r\n    lapDistance = distanceTraveled % globalThis.deltaData.trackLength;\r\n}\r\n\r\n// Detect timed race start line crossing\r\nif (!globalThis.deltaData.timedRaceDetected && completedLaps === 0 && \r\n    distanceTraveled > 0 && globalThis.deltaData.lastDistance <= 0) {\r\n    // First time crossing start line in a timed race\r\n    globalThis.deltaData.timedRaceDetected = true;\r\n    globalThis.deltaData.initialCrossingTime = raceTime;\r\n    globalThis.deltaData.compensationValue = raceTime; // Store the time to compensate\r\n}\r\n\r\n// Record current segment - only if on valid lap\r\nif (currentLapTime > 0 && lapDistance >= 0) {\r\n    var segmentIdx = Math.floor(lapDistance / globalThis.deltaData.segmentSize);\r\n    globalThis.deltaData.currentLapSegments[segmentIdx] = currentLapTime;\r\n}\r\n\r\n// Offset switch logic - Check difference for first 5 seconds on lap 0\r\nif (completedLaps === 0 && raceTime >= globalThis.deltaData.lapStartTime) {\r\n    globalThis.deltaData.checkTimeElapsed = raceTime - globalThis.deltaData.lapStartTime;\r\n}\r\nif (completedLaps === 0 && globalThis.deltaData.checkTimeElapsed <= 5) {\r\n    var timeDifference = Math.abs(raceTime - currentLap);\r\n    if (timeDifference < 10) {\r\n        globalThis.deltaData.useHighOffset = true; // Normal mode, use 0.024s\r\n    } else {\r\n        globalThis.deltaData.useHighOffset = false; // Odometer mode, use 0.020s\r\n    }\r\n}\r\n\r\n// LAP CHANGE DETECTION - Detect lap completion and handle best lap tracking\r\nif (completedLaps > globalThis.deltaData.lastCompletedLap) {\r\n    if (bestLapTime > 0 && (globalThis.deltaData.bestLapTime <= 0 || bestLapTime < globalThis.deltaData.bestLapTime)) {\r\n        var prevBestTime = globalThis.deltaData.bestLapTime;\r\n        var prevSegments = globalThis.deltaData.bestLapSegments;\r\n        \r\n        globalThis.deltaData.calibrationOffset = 0;\r\n        globalThis.deltaData.nonBestLapCount = 0;\r\n        \r\n        globalThis.deltaData.bestLapTime = bestLapTime;\r\n        globalThis.deltaData.bestLapSegments = JSON.parse(JSON.stringify(globalThis.deltaData.currentLapSegments));\r\n        \r\n        if (prevBestTime > 0 && Object.keys(prevSegments).length > 0) {\r\n            var lastSegment = Math.max(...Object.keys(prevSegments).map(Number));\r\n            if (lastSegment in prevSegments && lastSegment in globalThis.deltaData.bestLapSegments) {\r\n                var prevEndTime = prevSegments[lastSegment];\r\n                var newEndTime = globalThis.deltaData.bestLapSegments[lastSegment];\r\n                var measuredDiff = prevEndTime - newEndTime;\r\n                var reportedDiff = prevBestTime - bestLapTime;\r\n                globalThis.deltaData.calibrationOffset = reportedDiff - measuredDiff;\r\n            }\r\n        }\r\n    } else if (bestLapTime === globalThis.deltaData.lastBestLapTime) {\r\n        globalThis.deltaData.nonBestLapCount++;\r\n    }\r\n    \r\n    globalThis.deltaData.lastBestLapTime = bestLapTime;\r\n    globalThis.deltaData.lapChanges.push({\r\n        time: Date.now(),\r\n        from: globalThis.deltaData.lastCompletedLap,\r\n        to: completedLaps,\r\n        bestTime: bestLapTime,\r\n        segmentCount: Object.keys(globalThis.deltaData.currentLapSegments).length,\r\n        calibration: globalThis.deltaData.calibrationOffset,\r\n        nonBestLapCount: globalThis.deltaData.nonBestLapCount\r\n    });\r\n    \r\n    globalThis.deltaData.lastCompletedLap = completedLaps;\r\n    globalThis.deltaData.currentLapSegments = {};\r\n}\r\n\r\n// Update state tracking\r\nglobalThis.deltaData.lastDistance = distanceTraveled;\r\nglobalThis.deltaData.lastLapDistance = lapDistance;\r\n\r\n// DELTA CALCULATION - with precision focus and calibration\r\nvar delta = 0;\r\nif (Object.keys(globalThis.deltaData.bestLapSegments).length > 0 && currentLapTime > 0) {\r\n    var currentSegment = Math.floor(lapDistance / globalThis.deltaData.segmentSize);\r\n    var nextSegment = currentSegment + 1;\r\n    \r\n    var currentSegmentBestTime = globalThis.deltaData.bestLapSegments[currentSegment];\r\n    var nextSegmentBestTime = globalThis.deltaData.bestLapSegments[nextSegment];\r\n    \r\n    if (currentSegmentBestTime !== undefined) {\r\n        if (nextSegmentBestTime !== undefined) {\r\n            var progress = (lapDistance / globalThis.deltaData.segmentSize) - currentSegment;\r\n            var interpolatedBestTime = currentSegmentBestTime + (nextSegmentBestTime - currentSegmentBestTime) * progress;\r\n            delta = currentLapTime - interpolatedBestTime - globalThis.deltaData.calibrationOffset;\r\n        } else {\r\n            delta = currentLapTime - currentSegmentBestTime - globalThis.deltaData.calibrationOffset;\r\n        }\r\n        \r\n        var deltaChange = delta - globalThis.deltaData.lastDelta;\r\n        if (Math.abs(deltaChange) > 0.5) {\r\n            delta = globalThis.deltaData.lastDelta + (deltaChange > 0 ? 0.5 : -0.5);\r\n        }\r\n    } else {\r\n        delta = globalThis.deltaData.lastDelta;\r\n    }\r\n}\r\n\r\nglobalThis.deltaData.lastDelta = delta;\r\n\r\n// Apply dynamic offset based on non-best lap count and switch state\r\nvar baseOffset = 0.008; // Base offset for SimHub delay\r\nvar extraOffset = globalThis.deltaData.nonBestLapCount * (globalThis.deltaData.useHighOffset ? 0.024 : 0.020);\r\ndelta += baseOffset + extraOffset;\r\n\r\n// NEW SMOOTHING CODE - Only affects display, not calculations\r\nif (!globalThis.deltaData.smoothingData) {\r\n    globalThis.deltaData.smoothingData = {\r\n        history: [],\r\n        lastDisplayDelta: 0\r\n    };\r\n}\r\n\r\nglobalThis.deltaData.smoothingData.history.push(delta);\r\nif (globalThis.deltaData.smoothingData.history.length > 4) {\r\n    globalThis.deltaData.smoothingData.history.shift();\r\n}\r\n\r\nvar smoothedDelta = delta;\r\nif (globalThis.deltaData.smoothingData.history.length > 1) {\r\n    var sum = 0;\r\n    var weightSum = 0;\r\n    for (var i = 0; i < globalThis.deltaData.smoothingData.history.length; i++) {\r\n        var weight = i + 1;\r\n        sum += globalThis.deltaData.smoothingData.history[i] * weight;\r\n        weightSum += weight;\r\n    }\r\n    smoothedDelta = sum / weightSum;\r\n}\r\n\r\nvar threshold = 0.01;\r\nvar displayDelta = smoothedDelta;\r\nvar lastDisplay = globalThis.deltaData.smoothingData.lastDisplayDelta;\r\nif (Math.abs(smoothedDelta - lastDisplay) < threshold) {\r\n    displayDelta = lastDisplay;\r\n}\r\nglobalThis.deltaData.smoothingData.lastDisplayDelta = displayDelta;\r\n\r\nif (Math.abs(displayDelta) < 0.011) {\r\n    displayDelta = 0;\r\n}\r\n\r\n// Apply timed race compensation if detected AND we're in odometer mode\r\nif (globalThis.deltaData.timedRaceDetected && !globalThis.deltaData.useHighOffset) {\r\n    if (completedLaps === 1) {\r\n        // Apply negative compensation on lap 2\r\n        displayDelta -= globalThis.deltaData.compensationValue;\r\n    } else if (completedLaps === 2) {\r\n        // Apply positive compensation on lap 3\r\n        displayDelta += globalThis.deltaData.compensationValue;\r\n    }\r\n    // No adjustment needed for lap 4 and beyond\r\n}\r\n\r\n// Format output\r\nvar sign = displayDelta >= 0 ? \"+\" : \"-\";\r\nvar absDelta = Math.abs(displayDelta);\r\n\r\nvar formattedDelta;\r\nif (absDelta < 10) {\r\n    formattedDelta = sign + absDelta.toFixed(2); // e.g., +1.23\r\n} else if (absDelta < 60) {\r\n    formattedDelta = sign + absDelta.toFixed(1); // e.g., +12.3\r\n} else { // Covers absDelta >= 60\r\n    formattedDelta = sign + absDelta.toFixed(0); // e.g., +61\r\n}\r\n\r\n// Store debug snapshot\r\nglobalThis.deltaData.lastCalc = {\r\n    time: Date.now(),\r\n    lapTime: currentLapTime,\r\n    bestLapTime: bestLapTime,\r\n    lapDistance: lapDistance,\r\n    rawDelta: delta,\r\n    smoothedDelta: displayDelta,\r\n    formatted: formattedDelta,\r\n    calibration: globalThis.deltaData.calibrationOffset,\r\n    resetCount: globalThis.deltaData.resetCount,\r\n    nonBestLapCount: globalThis.deltaData.nonBestLapCount,\r\n    useHighOffset: globalThis.deltaData.useHighOffset,\r\n    timedRace: globalThis.deltaData.timedRaceDetected,\r\n    compensation: globalThis.deltaData.compensationValue\r\n};\r\n\r\nreturn formattedDelta;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"CurrentLapTime","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"var raceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar completedLaps = $prop('CompletedLaps');\r\nvar distanceTraveled = $prop(\"GameRawData.DistanceTraveled\");\r\nvar currentLap = $prop('GameRawData.CurrentLap');\r\n\r\n// Initialize global variables\r\nif (typeof globalThis.lapStartTime === 'undefined') {\r\n    globalThis.lapStartTime = raceTime;\r\n    globalThis.lastCompletedLaps = 0;\r\n    globalThis.useCurrentLap = false; // Flag to decide which value to return\r\n    globalThis.checkTimeElapsed = 0;  // Track time spent checking\r\n}\r\n\r\n// Handle race start/reset\r\nif (completedLaps === 0 && distanceTraveled <= 0) {\r\n    globalThis.lapStartTime = raceTime;\r\n    globalThis.useCurrentLap = false; // Reset to check again\r\n    globalThis.checkTimeElapsed = 0;\r\n}\r\n\r\n// Update elapsed time for checking (only on lap 0)\r\nif (completedLaps === 0 && raceTime >= globalThis.lapStartTime) {\r\n    globalThis.checkTimeElapsed = raceTime - globalThis.lapStartTime;\r\n}\r\n\r\n// Check difference for first 5 seconds on lap 0\r\nif (completedLaps === 0 && globalThis.checkTimeElapsed <= 5) {\r\n    if (currentLap > raceTime + 5 || currentLap < raceTime - 5) {\r\n        globalThis.useCurrentLap = false; // Use stopwatch if difference is large\r\n    } else {\r\n        globalThis.useCurrentLap = true; // Use CurrentLap if within 5s\r\n    }\r\n    // During check, always return stopwatch value to avoid bad CurrentLap data\r\n    return distanceTraveled > 0 ? (raceTime - globalThis.lapStartTime) : 0;\r\n}\r\n\r\n// Reset timer at lap change\r\nif (completedLaps > (globalThis.lastCompletedLaps || 0)) {\r\n    globalThis.lapStartTime = raceTime;\r\n}\r\n\r\n// Update last completed laps\r\nglobalThis.lastCompletedLaps = completedLaps;\r\n\r\n// Return value only if distanceTraveled > 0\r\nif (distanceTraveled > 0) {\r\n    if (globalThis.useCurrentLap) {\r\n        return currentLap;\r\n    } else {\r\n        return raceTime - globalThis.lapStartTime;\r\n    }\r\n}\r\n// Otherwise, return 0\r\nreturn 0;"},"EvaluateBeforeScreenRoles":false}]},"DashboardDebugManager":{},"Version":2,"Id":"33e50dc8-b123-469b-9cda-1a5eb051bfb1","BaseHeight":50,"BaseWidth":600,"BackgroundColor":"#FF000000","Screens":[{"RenderingSkip":0,"Name":"Screen","InGameScreen":true,"IdleScreen":true,"PitScreen":false,"ScreenId":"04d27c3b-cd49-44d8-ae78-80fde6486ada","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":""},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#FFFF0000","Height":50.0,"Left":-9.0,"Top":0.0,"Visible":false,"Width":618.0,"IsFreezed":true,"Name":"Align","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Background-R-Light","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":19.0,"Left":340.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Background","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Background-L-Light","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":19.0,"Left":0.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Background2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0}],"Visible":false,"Name":"Background-Light","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Background-R-Med","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":19.0,"Left":340.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Background","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Background-L-Med","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":19.0,"Left":0.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Background2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0}],"Visible":true,"Name":"Background-Med","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Background-R-Dark","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":19.0,"Left":340.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Background","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Background-L-Dark","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":19.0,"Left":0.0,"Top":15.0,"Visible":true,"Width":260.0,"Name":"Background2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0}],"Visible":false,"Name":"Background-Dark","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Green-Delta","AutoSize":false,"AutoSizeScale":0.0,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderColor":"#00FFFFFF"},"Height":19.0,"Left":0.0,"Top":15.0,"Visible":true,"Width":260.0,"IsFreezed":true,"Name":"Green Delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Width":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\"); \r\n\r\nvar width = delta >= 0 ? 0 \r\n    : delta >= -0.07 ? 4 \r\n    : delta <= -5 ? 260 \r\n    : Math.min(260, (Math.abs(delta) / 5) * 260);\r\n\r\nreturn width;"},"Mode":2},"Left":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\"); \r\n\r\nvar positionOffset = delta >= 0 ? 260 \r\n    : delta >= -0.07 ? 256 \r\n    : delta <= -5 ? 0 \r\n    : 260 - Math.min(260, (Math.abs(delta) / 5) * 260);\r\n\r\nreturn positionOffset;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Red-Delta","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":19.0,"Left":340.0,"Top":15.0,"Visible":true,"Width":260.0,"IsFreezed":true,"Name":"Red Delta","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Width":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\"); \r\n\r\nvar width = delta <= 0 ? 0 \r\n    : delta <= 0.07 ? 4 \r\n    : delta >= 5 ? 260 \r\n    : (delta / 5) * 260;\r\n\r\nreturn width;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":35.0,"Text":"4.44","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":15.200000000000003,"SpecialCharsWidth":5.5,"BackgroundColor":"#00FFFFFF","Height":39.0,"Left":254.5,"Top":6.1,"Visible":true,"Width":102.0,"Name":"Delta-Text","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"abs([variable.LiveDeltaSegments])"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\");// Apply dead zone\r\n\r\nif (Math.abs(delta) < 0.009) \r\n{delta = 0;}// Determine color based on adjusted delta\r\n\r\nvar color = delta === 0 ? \"#ffffff\" \r\n: delta < 0 ? \"#00ff7f\" \r\n: \"#ff0033\";\r\n\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":35.0,"Text":"+","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":15.200000000000003,"SpecialCharsWidth":5.5,"BackgroundColor":"#00FFFFFF","Height":39.0,"Left":267.0,"Top":6.1,"Visible":true,"Width":15.0,"Name":"Delta-Text-Symbol","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\");// Apply dead zone\r\n\r\nif (Math.abs(delta) < 0.009) \r\n{delta = 0;}// Determine color based on adjusted delta\r\n\r\nvar color = delta === 0 ? \"+\" \r\n: delta < 0 ? \"-\" \r\n: \"+\";\r\n\r\nreturn color;"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\");// Apply dead zone\r\n\r\nif (Math.abs(delta) < 0.009) \r\n{delta = 0;}// Determine color based on adjusted delta\r\n\r\nvar color = delta === 0 ? \"#ffffff\" \r\n: delta < 0 ? \"#00ff7f\" \r\n: \"#ff0033\";\r\n\r\nreturn color;"},"Mode":2},"Top":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var delta = $prop(\"variable.LiveDeltaSegments\");// Apply dead zone\r\n\r\nif (Math.abs(delta) < 0.009) \r\n{delta = 0;}// Determine color based on adjusted delta\r\n\r\nvar color = delta === 0 ? \"6.1\" \r\n: delta < 0 ? \"3.5\" \r\n: \"6.1\";\r\n\r\nreturn color;"},"Mode":2},"Left":{"Formula":{"Expression":"if(\r\n[variable.LiveDeltaSegments] > 59.95 || [variable.LiveDeltaSegments] < -59.95, '277',\r\n'267'\r\n)"},"Mode":2}}}],"Visible":true,"Name":"Delta Bar","RenderingSkip":1,"MinimumRefreshIntervalMS":17.0,"Bindings":{"Visible":{"Formula":{"Expression":"if([CurrentLap] > 1 AND timespantoseconds([LastLapTime]) > 0, 1, 0)"},"Mode":2}}}],"MinimumRefreshIntervalMS":0.0}],"SnapToGrid":false,"HideLabels":true,"ShowForeground":true,"ForegroundOpacity":100.0,"ShowBackground":true,"BackgroundOpacity":100.0,"ShowBoundingRectangles":false,"GridSize":10,"Images":[{"Name":"Green-Delta","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":87058,"MD5":"fd8f46029a5e348561c5e8e0fea1d496"},{"Name":"Red-Delta","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":80843,"MD5":"17508cceb7f60b73ee0bc9b3f8741116"},{"Name":"Background-R-Dark","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":18582,"MD5":"7d2a2a8289c8067a17ba127e8585a2b8"},{"Name":"Background-L-Dark","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":19465,"MD5":"fe666a789914336c58230a5524c35d92"},{"Name":"Background-L-Med","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":19140,"MD5":"71ab18de6466e79814beceabaafb216d"},{"Name":"Background-R-Med","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":17946,"MD5":"fa4a7fb588daab604b6b4ecd24d97662"},{"Name":"Background-R-Light","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":17460,"MD5":"5fff624079674f74ff3da1258c565555"},{"Name":"Background-L-Light","Extension":".png","Modified":false,"Optimized":true,"Width":416,"Height":30,"Length":18570,"MD5":"5ae7e5035a68b56a64c532f6f3eb8404"}],"Metadata":{"ScreenCount":1.0,"InGameScreensIndexs":[0],"IdleScreensIndexs":[0],"MainPreviewIndex":0,"IsOverlay":true,"OverlaySizeWarning":false,"MetadataVersion":2.0,"EnableOnDashboardMessaging":true,"PitScreensIndexs":[],"SimHubVersion":"9.7.6","Title":"Art-Delta-Bar","Author":"Artiick","Width":600.0,"Height":50.0,"DashboardVersion":""},"ShowOnScreenControls":true,"IsOverlay":true,"EnableClickThroughOverlay":true,"EnableOnDashboardMessaging":true}