{"Variables":{"DashboardVariables":[]},"DashboardDebugManager":{},"Version":2,"Id":"0a21c8f7-e5e7-48a8-96bb-9ab4c61c42f9","BaseHeight":368,"BaseWidth":339,"BackgroundColor":"#FF000000","Screens":[{"RenderingSkip":0,"Name":"Screen","InGameScreen":true,"IdleScreen":true,"PitScreen":false,"ScreenId":"20693992-c589-4a8d-b521-5c77a4c3919f","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":""},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#FFFF0000","Height":368.0,"Left":0.0,"Top":0.0,"Visible":false,"Width":339.0,"IsFreezed":true,"Name":"Alignment","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":298.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":298.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar CurrentTime = $prop('GameRawData.CurrentRaceTime'); // Get current race time\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// Convert lap time to milliseconds for calculations\r\nfunction lapTimeToMs(lapTime) {\r\n    var parts = lapTime.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parseFloat(parts[2]);\r\n        return (minutes * 1000 * 60) + (secondsWithMs * 1000);\r\n    }\r\n    return 0;\r\n}\r\n\r\n// Convert times to milliseconds\r\nvar BestLapMs = lapTimeToMs(BestLapTime);\r\nvar LastLapMs = lapTimeToMs(LastLapTime);\r\n\r\n// Calculate threshold for \"Good Lap\"\r\nvar GoodLapThreshold = BestLapMs * 1.00125; // 100.125% of Best Lap\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapImages;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForImage;\r\n    delete globalThis.LastChangeTime; // Reset timing logic\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapImages === 'undefined') {\r\n    globalThis.PastLapImages = [\"OG-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"]; // Default all to OG-Fade\r\n    globalThis.StoredBestLapTime = \"00:00.000\";\r\n    globalThis.StoredCompletedLapsForImage = 0;\r\n    globalThis.LastChangeTime = 0; // Track when the fade effect started\r\n}\r\n\r\n// **Check if a new PB is set**\r\nvar isNewPB = BestLapTime !== globalThis.StoredBestLapTime && BestLapMs > 0;\r\n\r\nif (isNewPB) {\r\n    // **Set h0 to PB-Fade and reset all others to OG-Fade**\r\n    globalThis.PastLapImages = [\"PB-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"];\r\n    globalThis.StoredBestLapTime = BestLapTime; // Store the new PB\r\n} \r\n// **Otherwise, check if LastLapTime is good or bad**\r\nelse if (CompletedLaps > globalThis.StoredCompletedLapsForImage) {\r\n    var newFade = \"OG-Fade\"; // Default background\r\n\r\n    if (LastLapMs <= GoodLapThreshold) {\r\n        newFade = \"GL-Fade\"; // Good lap\r\n    } else {\r\n        newFade = \"BL-Fade\"; // Bad lap\r\n    }\r\n\r\n    // Store the current race time when the fade effect started\r\n    globalThis.LastChangeTime = CurrentTime;\r\n\r\n    // Add the new lap background to history\r\n    globalThis.PastLapImages.unshift(newFade);\r\n    globalThis.PastLapImages.pop();\r\n}\r\n\r\n// **Handle 3-second fade effect**\r\nif (globalThis.LastChangeTime && (CurrentTime - globalThis.LastChangeTime > 3)) {\r\n    if (globalThis.PastLapImages[0] === \"GL-Fade\" || globalThis.PastLapImages[0] === \"BL-Fade\") {\r\n        globalThis.PastLapImages[0] = \"OG-Fade\"; // Reset after 3 seconds\r\n    }\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForImage = CompletedLaps;\r\n\r\n// **Return the correct background image for each history element**\r\nfunction getLapHistoryImage(index) {\r\n    return CompletedLaps > index ? globalThis.PastLapImages[index] : \"OG-Fade\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryImage(3); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":308.3,"Visible":true,"Width":145.0,"Name":"LapTime -4","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime'); // Used for reset detection\r\n\r\n// Ensure LastLapTime is valid\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 → mm:ss.fff\r\nfunction formatLapTime(timeStr) {\r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Format LastLapTime properly\r\nLastLapTime = formatLapTime(LastLapTime);\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapTimes;\r\n    delete globalThis.StoredCompletedLaps;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapTimes === 'undefined') {\r\n    globalThis.PastLapTimes = [];\r\n    globalThis.StoredCompletedLaps = 0;\r\n}\r\n\r\n// **Store past lap times when a new lap is completed**\r\nif (CompletedLaps > globalThis.StoredCompletedLaps) {\r\n    globalThis.PastLapTimes.unshift(LastLapTime); // Add newest lap time at the front\r\n    if (globalThis.PastLapTimes.length > 4) {\r\n        globalThis.PastLapTimes.pop(); // Keep only the last 4 lap times\r\n    }\r\n    globalThis.StoredCompletedLaps = CompletedLaps;\r\n}\r\n\r\n// **Ensure correct history slot visibility and return valid times**\r\nfunction getLapHistory(index) {\r\n    return CompletedLaps > index ? globalThis.PastLapTimes[index] || \"—\" : \"—\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistory(3); // Change index (1, 2, 3) for different elements"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(3); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":308.3,"Visible":true,"Width":48.0,"Name":"LapCount -4","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 4"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(3); // Change index (1, 2, 3) for different elements"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -4","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>4 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":246.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":246.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar CurrentTime = $prop('GameRawData.CurrentRaceTime'); // Get current race time\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// Convert lap time to milliseconds for calculations\r\nfunction lapTimeToMs(lapTime) {\r\n    var parts = lapTime.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parseFloat(parts[2]);\r\n        return (minutes * 1000 * 60) + (secondsWithMs * 1000);\r\n    }\r\n    return 0;\r\n}\r\n\r\n// Convert times to milliseconds\r\nvar BestLapMs = lapTimeToMs(BestLapTime);\r\nvar LastLapMs = lapTimeToMs(LastLapTime);\r\n\r\n// Calculate threshold for \"Good Lap\"\r\nvar GoodLapThreshold = BestLapMs * 1.00125; // 100.125% of Best Lap\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapImages;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForImage;\r\n    delete globalThis.LastChangeTime; // Reset timing logic\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapImages === 'undefined') {\r\n    globalThis.PastLapImages = [\"OG-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"]; // Default all to OG-Fade\r\n    globalThis.StoredBestLapTime = \"00:00.000\";\r\n    globalThis.StoredCompletedLapsForImage = 0;\r\n    globalThis.LastChangeTime = 0; // Track when the fade effect started\r\n}\r\n\r\n// **Check if a new PB is set**\r\nvar isNewPB = BestLapTime !== globalThis.StoredBestLapTime && BestLapMs > 0;\r\n\r\nif (isNewPB) {\r\n    // **Set h0 to PB-Fade and reset all others to OG-Fade**\r\n    globalThis.PastLapImages = [\"PB-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"];\r\n    globalThis.StoredBestLapTime = BestLapTime; // Store the new PB\r\n} \r\n// **Otherwise, check if LastLapTime is good or bad**\r\nelse if (CompletedLaps > globalThis.StoredCompletedLapsForImage) {\r\n    var newFade = \"OG-Fade\"; // Default background\r\n\r\n    if (LastLapMs <= GoodLapThreshold) {\r\n        newFade = \"GL-Fade\"; // Good lap\r\n    } else {\r\n        newFade = \"BL-Fade\"; // Bad lap\r\n    }\r\n\r\n    // Store the current race time when the fade effect started\r\n    globalThis.LastChangeTime = CurrentTime;\r\n\r\n    // Add the new lap background to history\r\n    globalThis.PastLapImages.unshift(newFade);\r\n    globalThis.PastLapImages.pop();\r\n}\r\n\r\n// **Handle 3-second fade effect**\r\nif (globalThis.LastChangeTime && (CurrentTime - globalThis.LastChangeTime > 3)) {\r\n    if (globalThis.PastLapImages[0] === \"GL-Fade\" || globalThis.PastLapImages[0] === \"BL-Fade\") {\r\n        globalThis.PastLapImages[0] = \"OG-Fade\"; // Reset after 3 seconds\r\n    }\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForImage = CompletedLaps;\r\n\r\n// **Return the correct background image for each history element**\r\nfunction getLapHistoryImage(index) {\r\n    return CompletedLaps > index ? globalThis.PastLapImages[index] : \"OG-Fade\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryImage(2); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":256.3,"Visible":true,"Width":145.0,"Name":"LapTime -3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime'); // Used for reset detection\r\n\r\n// Ensure LastLapTime is valid\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 → mm:ss.fff\r\nfunction formatLapTime(timeStr) {\r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Format LastLapTime properly\r\nLastLapTime = formatLapTime(LastLapTime);\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapTimes;\r\n    delete globalThis.StoredCompletedLaps;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapTimes === 'undefined') {\r\n    globalThis.PastLapTimes = [];\r\n    globalThis.StoredCompletedLaps = 0;\r\n}\r\n\r\n// **Store past lap times when a new lap is completed**\r\nif (CompletedLaps > globalThis.StoredCompletedLaps) {\r\n    globalThis.PastLapTimes.unshift(LastLapTime); // Add newest lap time at the front\r\n    if (globalThis.PastLapTimes.length > 4) {\r\n        globalThis.PastLapTimes.pop(); // Keep only the last 4 lap times\r\n    }\r\n    globalThis.StoredCompletedLaps = CompletedLaps;\r\n}\r\n\r\n// **Ensure correct history slot visibility and return valid times**\r\nfunction getLapHistory(index) {\r\n    return CompletedLaps > index ? globalThis.PastLapTimes[index] || \"—\" : \"—\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistory(2); // Change index (1, 2, 3) for different elements"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(2); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":256.3,"Visible":true,"Width":48.0,"Name":"LapCount -3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 3"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(2); // Change index (1, 2, 3) for different elements"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -3","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>3 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":194.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":194.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar CurrentTime = $prop('GameRawData.CurrentRaceTime'); // Get current race time\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// Convert lap time to milliseconds for calculations\r\nfunction lapTimeToMs(lapTime) {\r\n    var parts = lapTime.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parseFloat(parts[2]);\r\n        return (minutes * 1000 * 60) + (secondsWithMs * 1000);\r\n    }\r\n    return 0;\r\n}\r\n\r\n// Convert times to milliseconds\r\nvar BestLapMs = lapTimeToMs(BestLapTime);\r\nvar LastLapMs = lapTimeToMs(LastLapTime);\r\n\r\n// Calculate threshold for \"Good Lap\"\r\nvar GoodLapThreshold = BestLapMs * 1.00125; // 100.125% of Best Lap\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapImages;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForImage;\r\n    delete globalThis.LastChangeTime; // Reset timing logic\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapImages === 'undefined') {\r\n    globalThis.PastLapImages = [\"OG-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"]; // Default all to OG-Fade\r\n    globalThis.StoredBestLapTime = \"00:00.000\";\r\n    globalThis.StoredCompletedLapsForImage = 0;\r\n    globalThis.LastChangeTime = 0; // Track when the fade effect started\r\n}\r\n\r\n// **Check if a new PB is set**\r\nvar isNewPB = BestLapTime !== globalThis.StoredBestLapTime && BestLapMs > 0;\r\n\r\nif (isNewPB) {\r\n    // **Set h0 to PB-Fade and reset all others to OG-Fade**\r\n    globalThis.PastLapImages = [\"PB-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"];\r\n    globalThis.StoredBestLapTime = BestLapTime; // Store the new PB\r\n} \r\n// **Otherwise, check if LastLapTime is good or bad**\r\nelse if (CompletedLaps > globalThis.StoredCompletedLapsForImage) {\r\n    var newFade = \"OG-Fade\"; // Default background\r\n\r\n    if (LastLapMs <= GoodLapThreshold) {\r\n        newFade = \"GL-Fade\"; // Good lap\r\n    } else {\r\n        newFade = \"BL-Fade\"; // Bad lap\r\n    }\r\n\r\n    // Store the current race time when the fade effect started\r\n    globalThis.LastChangeTime = CurrentTime;\r\n\r\n    // Add the new lap background to history\r\n    globalThis.PastLapImages.unshift(newFade);\r\n    globalThis.PastLapImages.pop();\r\n}\r\n\r\n// **Handle 3-second fade effect**\r\nif (globalThis.LastChangeTime && (CurrentTime - globalThis.LastChangeTime > 3)) {\r\n    if (globalThis.PastLapImages[0] === \"GL-Fade\" || globalThis.PastLapImages[0] === \"BL-Fade\") {\r\n        globalThis.PastLapImages[0] = \"OG-Fade\"; // Reset after 3 seconds\r\n    }\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForImage = CompletedLaps;\r\n\r\n// **Return the correct background image for each history element**\r\nfunction getLapHistoryImage(index) {\r\n    return CompletedLaps > index ? globalThis.PastLapImages[index] : \"OG-Fade\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryImage(1); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":204.3,"Visible":true,"Width":145.0,"Name":"LapTime -2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime'); // Used for reset detection\r\n\r\n// Ensure LastLapTime is valid\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 → mm:ss.fff\r\nfunction formatLapTime(timeStr) {\r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Format LastLapTime properly\r\nLastLapTime = formatLapTime(LastLapTime);\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapTimes;\r\n    delete globalThis.StoredCompletedLaps;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapTimes === 'undefined') {\r\n    globalThis.PastLapTimes = [];\r\n    globalThis.StoredCompletedLaps = 0;\r\n}\r\n\r\n// **Store past lap times when a new lap is completed**\r\nif (CompletedLaps > globalThis.StoredCompletedLaps) {\r\n    globalThis.PastLapTimes.unshift(LastLapTime); // Add newest lap time at the front\r\n    if (globalThis.PastLapTimes.length > 4) {\r\n        globalThis.PastLapTimes.pop(); // Keep only the last 4 lap times\r\n    }\r\n    globalThis.StoredCompletedLaps = CompletedLaps;\r\n}\r\n\r\n// **Ensure correct history slot visibility and return valid times**\r\nfunction getLapHistory(index) {\r\n    return CompletedLaps > index ? globalThis.PastLapTimes[index] || \"—\" : \"—\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistory(1); // Change index (1, 2, 3) for different elements"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(1); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":204.3,"Visible":true,"Width":48.0,"Name":"LapCount -2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 2"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(1); // Change index (1, 2, 3) for different elements"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -2","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>2 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":142.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":142.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar CurrentTime = $prop('GameRawData.CurrentRaceTime'); // Get current race time\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// Convert lap time to milliseconds for calculations\r\nfunction lapTimeToMs(lapTime) {\r\n    var parts = lapTime.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parseFloat(parts[2]);\r\n        return (minutes * 1000 * 60) + (secondsWithMs * 1000);\r\n    }\r\n    return 0;\r\n}\r\n\r\n// Convert times to milliseconds\r\nvar BestLapMs = lapTimeToMs(BestLapTime);\r\nvar LastLapMs = lapTimeToMs(LastLapTime);\r\n\r\n// Calculate threshold for \"Good Lap\"\r\nvar GoodLapThreshold = BestLapMs * 1.00125; // 100.125% of Best Lap\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapImages;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForImage;\r\n    delete globalThis.LastChangeTime; // Reset timing logic\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapImages === 'undefined') {\r\n    globalThis.PastLapImages = [\"OG-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"]; // Default all to OG-Fade\r\n    globalThis.StoredBestLapTime = \"00:00.000\";\r\n    globalThis.StoredCompletedLapsForImage = 0;\r\n    globalThis.LastChangeTime = 0; // Track when the fade effect started\r\n}\r\n\r\n// **Check if a new PB is set**\r\nvar isNewPB = BestLapTime !== globalThis.StoredBestLapTime && BestLapMs > 0;\r\n\r\nif (isNewPB) {\r\n    // **Set h0 to PB-Fade and reset all others to OG-Fade**\r\n    globalThis.PastLapImages = [\"PB-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"];\r\n    globalThis.StoredBestLapTime = BestLapTime; // Store the new PB\r\n} \r\n// **Otherwise, check if LastLapTime is good or bad**\r\nelse if (CompletedLaps > globalThis.StoredCompletedLapsForImage) {\r\n    var newFade = \"OG-Fade\"; // Default background\r\n\r\n    if (LastLapMs <= GoodLapThreshold) {\r\n        newFade = \"GL-Fade\"; // Good lap\r\n    } else {\r\n        newFade = \"BL-Fade\"; // Bad lap\r\n    }\r\n\r\n    // Store the current race time when the fade effect started\r\n    globalThis.LastChangeTime = CurrentTime;\r\n\r\n    // Add the new lap background to history\r\n    globalThis.PastLapImages.unshift(newFade);\r\n    globalThis.PastLapImages.pop();\r\n}\r\n\r\n// **Handle 3-second fade effect**\r\nif (globalThis.LastChangeTime && (CurrentTime - globalThis.LastChangeTime > 3)) {\r\n    if (globalThis.PastLapImages[0] === \"GL-Fade\" || globalThis.PastLapImages[0] === \"BL-Fade\") {\r\n        globalThis.PastLapImages[0] = \"OG-Fade\"; // Reset after 3 seconds\r\n    }\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForImage = CompletedLaps;\r\n\r\n// **Return the correct background image for each history element**\r\nfunction getLapHistoryImage(index) {\r\n    return CompletedLaps > index ? globalThis.PastLapImages[index] : \"OG-Fade\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryImage(0); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":152.3,"Visible":true,"Width":145.0,"Name":"LapTime -1","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime'); // Used for reset detection\r\n\r\n// Ensure LastLapTime is valid\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 → mm:ss.fff\r\nfunction formatLapTime(timeStr) {\r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Format LastLapTime properly\r\nLastLapTime = formatLapTime(LastLapTime);\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapTimes;\r\n    delete globalThis.StoredCompletedLaps;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapTimes === 'undefined') {\r\n    globalThis.PastLapTimes = [];\r\n    globalThis.StoredCompletedLaps = 0;\r\n}\r\n\r\n// **Store past lap times when a new lap is completed**\r\nif (CompletedLaps > globalThis.StoredCompletedLaps) {\r\n    globalThis.PastLapTimes.unshift(LastLapTime); // Add newest lap time at the front\r\n    if (globalThis.PastLapTimes.length > 4) {\r\n        globalThis.PastLapTimes.pop(); // Keep only the last 4 lap times\r\n    }\r\n    globalThis.StoredCompletedLaps = CompletedLaps;\r\n}\r\n\r\n// **Ensure correct history slot visibility and return valid times**\r\nfunction getLapHistory(index) {\r\n    return CompletedLaps > index ? globalThis.PastLapTimes[index] || \"—\" : \"—\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistory(0); // Change index (1, 2, 3) for different elements"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(0); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":152.3,"Visible":true,"Width":48.0,"Name":"LapCount -1","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 1"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(0); // Change index (1, 2, 3) for different elements"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -1","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>1 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":90.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":90.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FF00BDFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":100.3,"Visible":true,"Width":145.0,"Name":"Current","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"Expression":"[CurrentLapTime]"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FF00BDFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":100.3,"Visible":true,"Width":48.0,"Name":"Lap Count","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap]"},"Mode":2}}}],"Visible":true,"Name":"Current Lap","RenderingSkip":0,"MinimumRefreshIntervalMS":8.0,"Bindings":{"Visible":{"Formula":{"Expression":"timespantoseconds([CurrentLapTime])>0"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":20.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":20.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont FuelTire-Num-R","FontSize":38.0,"Text":"AVG","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.3,"Top":30.3,"Visible":true,"Width":48.0,"Name":"AVG","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"TextColor":{"Formula":{"Expression":"changed(3000, [CurrentLap]) ? '#00ff7f' : '#ffffff'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":30.3,"Visible":true,"Width":145.0,"Name":"AVG-time","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var CompletedLaps = $prop('CompletedLaps');\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure it's a string\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime'); // Track session time\r\n\r\n// Initialize storage\r\nif (typeof globalThis.LapTimes === 'undefined') {\r\n    globalThis.LapTimes = [];\r\n    globalThis.LastStoredLap = 0;\r\n    globalThis.AverageLapTime = \"00:00.000\";\r\n    globalThis.SessionStartTime = RaceTime; // Store session start\r\n}\r\n\r\n// **Reset on New Session**\r\nif (CompletedLaps === 0 || RaceTime < globalThis.SessionStartTime) {\r\n    globalThis.LapTimes = [];\r\n    globalThis.LastStoredLap = 0;\r\n    globalThis.AverageLapTime = \"00:00.000\";\r\n    globalThis.SessionStartTime = RaceTime; // Update session start time\r\n}\r\n\r\n// Function to parse \"hh:mm:ss.fff0000\" format into seconds\r\nfunction parseTimeToSeconds(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return 0; // Basic safety check\r\n\r\n    var hours = parseInt(timeStr.substring(0, 2)) || 0;\r\n    var minutes = parseInt(timeStr.substring(3, 5)) || 0;\r\n    var seconds = parseInt(timeStr.substring(6, 8)) || 0;\r\n    var milliseconds = parseInt(timeStr.substring(9, 12)) || 0;\r\n\r\n    return (hours * 3600) + (minutes * 60) + seconds + (milliseconds / 1000);\r\n}\r\n\r\n// Convert LastLapTime to seconds\r\nvar lapTimeInSeconds = parseTimeToSeconds(LastLapTime);\r\n\r\n// Store only **new laps** with valid lap times\r\nif (CompletedLaps > globalThis.LastStoredLap && lapTimeInSeconds > 0) {\r\n    globalThis.LapTimes.push(lapTimeInSeconds);\r\n    globalThis.LastStoredLap = CompletedLaps;\r\n}\r\n\r\n// Calculate the average\r\nif (globalThis.LapTimes.length > 0) {\r\n    var total = 0;\r\n    for (var i = 0; i < globalThis.LapTimes.length; i++) {\r\n        total += globalThis.LapTimes[i];\r\n    }\r\n    var avg = total / globalThis.LapTimes.length;\r\n\r\n    // Format to mm:ss.fff\r\n    var minutes = Math.floor(avg / 60);\r\n    var seconds = Math.floor(avg % 60);\r\n    var milliseconds = Math.floor((avg - Math.floor(avg)) * 1000);\r\n\r\n    globalThis.AverageLapTime = \r\n        minutes.toString().padStart(2, '0') + \":\" +\r\n        seconds.toString().padStart(2, '0') + \".\" +\r\n        milliseconds.toString().padStart(3, '0');\r\n}\r\n\r\n// Return the formatted average lap time\r\nreturn globalThis.AverageLapTime;"},"Mode":2},"Visible":{"Formula":{"Expression":"!changed(3000,[LastLapTime]) and timespantoseconds([BestLapTime])!=0"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FF00FF7F","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":30.3,"Visible":true,"Width":145.0,"Name":"AVG-time(possiblebest)","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var CompletedLaps = $prop('CompletedLaps');\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure it's a string\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime'); // Track session time\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure it's a string\r\n\r\n// Initialize storage\r\nif (typeof globalThis.LapTimes === 'undefined') {\r\n    globalThis.LapTimes = [];\r\n    globalThis.LastStoredLap = 0;\r\n    globalThis.AverageLapTime = \"00:00.000\";\r\n    globalThis.BestPossibleLapTimes = [];\r\n    globalThis.LastStoredBestLap = 0;\r\n    globalThis.SessionStartTime = RaceTime; // Store session start\r\n}\r\n\r\n// **Reset on New Session**\r\nif (CompletedLaps === 0 || RaceTime < globalThis.SessionStartTime) {\r\n    globalThis.LapTimes = [];\r\n    globalThis.BestPossibleLapTimes = [];\r\n    globalThis.LastStoredLap = 0;\r\n    globalThis.LastStoredBestLap = 0;\r\n    globalThis.AverageLapTime = \"00:00.000\";\r\n    globalThis.SessionStartTime = RaceTime; // Update session start time\r\n}\r\n\r\n// Function to parse \"hh:mm:ss.fff0000\" format into seconds\r\nfunction parseTimeToSeconds(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return 0; // Basic safety check\r\n\r\n    var hours = parseInt(timeStr.substring(0, 2)) || 0;\r\n    var minutes = parseInt(timeStr.substring(3, 5)) || 0;\r\n    var seconds = parseInt(timeStr.substring(6, 8)) || 0;\r\n    var milliseconds = parseInt(timeStr.substring(9, 12)) || 0;\r\n\r\n    return (hours * 3600) + (minutes * 60) + seconds + (milliseconds / 1000);\r\n}\r\n\r\n// Convert LastLapTime and BestLapTime to seconds\r\nvar lapTimeInSeconds = parseTimeToSeconds(LastLapTime);\r\nvar bestLapTimeInSeconds = parseTimeToSeconds(BestLapTime);\r\n\r\n// Store only **new laps** with valid lap times, but exclude first lap (CompletedLaps === 0 or 1)\r\nif (CompletedLaps > globalThis.LastStoredLap && lapTimeInSeconds > 0 && CompletedLaps > 1) {\r\n    globalThis.LapTimes.push(lapTimeInSeconds);\r\n    globalThis.LastStoredLap = CompletedLaps;\r\n}\r\n\r\n// **Store only valid laps for the best possible average**, also exclude first lap\r\nif (CompletedLaps > globalThis.LastStoredBestLap && lapTimeInSeconds > 0 && CompletedLaps > 1) {\r\n    // Exclude laps that are >= 101.5% of the best lap time\r\n    if (lapTimeInSeconds <= bestLapTimeInSeconds * 1.015) {\r\n        globalThis.BestPossibleLapTimes.push(lapTimeInSeconds);\r\n    }\r\n    globalThis.LastStoredBestLap = CompletedLaps;\r\n}\r\n\r\n// Calculate the actual average (including all valid laps)\r\nif (globalThis.LapTimes.length > 0) {\r\n    var total = globalThis.LapTimes.reduce((sum, time) => sum + time, 0);\r\n    var avg = total / globalThis.LapTimes.length;\r\n\r\n    // Format to mm:ss.fff\r\n    var minutes = Math.floor(avg / 60);\r\n    var seconds = Math.floor(avg % 60);\r\n    var milliseconds = Math.floor((avg - Math.floor(avg)) * 1000);\r\n\r\n    globalThis.AverageLapTime = \r\n        minutes.toString().padStart(2, '0') + \":\" +\r\n        seconds.toString().padStart(2, '0') + \".\" +\r\n        milliseconds.toString().padStart(3, '0');\r\n}\r\n\r\n// Calculate the best possible average (excluding laps >= 101.5% of best lap)\r\nif (globalThis.BestPossibleLapTimes.length > 0) {\r\n    var totalBest = globalThis.BestPossibleLapTimes.reduce((sum, time) => sum + time, 0);\r\n    var avgBest = totalBest / globalThis.BestPossibleLapTimes.length;\r\n\r\n    // Format to mm:ss.fff\r\n    var bestMinutes = Math.floor(avgBest / 60);\r\n    var bestSeconds = Math.floor(avgBest % 60);\r\n    var bestMilliseconds = Math.floor((avgBest - Math.floor(avgBest)) * 1000);\r\n\r\n    globalThis.BestPossibleAverage = \r\n        bestMinutes.toString().padStart(2, '0') + \":\" +\r\n        bestSeconds.toString().padStart(2, '0') + \".\" +\r\n        bestMilliseconds.toString().padStart(3, '0');\r\n}\r\n\r\n// Return the best possible average lap time\r\nreturn globalThis.BestPossibleAverage;"},"Mode":2},"Visible":{"Formula":{"Expression":"changed(3000,[LastLapTime])=1"},"Mode":2}}}],"Visible":true,"Name":"Average Laptime","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Visible":{"Formula":{"Expression":"[CompletedLaps]>=1"},"Mode":2}}}],"Visible":true,"Name":"Lap History","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"if([CurrentLap] > 1 && timespantoseconds([LastLapTime]) = 0, 0, 1)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":298.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":298.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime'); // Force string conversion\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.LapTracker === 'undefined') {\r\n    globalThis.LapTracker = {\r\n        lapTimes: [],           // Stores the actual lap times\r\n        backgrounds: [],        // Stores background effects\r\n        lastLapStart: RaceTime, // Time when current lap started\r\n        storedLaps: 0,         // Number of completed laps we've stored\r\n        lastValidatedTime: 0,   // Buffer for validation\r\n        lastBestLap: \"\",       // Store last known best lap\r\n        lastPBIndex: -1        // Track which index was the last PB\r\n    };\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 to mm:ss.fff\r\nfunction formatGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return \"00:00.000\";\r\n    \r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Hard reset conditions\r\nif (CompletedLaps === 0 || RaceTime < globalThis.LapTracker.lastLapStart) {\r\n    globalThis.LapTracker = {\r\n        lapTimes: [],\r\n        backgrounds: [\"OG-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\",\r\n        lastPBIndex: -1\r\n    };\r\n    return \"OG-Fade\";\r\n}\r\n\r\n// Store new lap time when CompletedLaps increases\r\nif (CompletedLaps > globalThis.LapTracker.storedLaps) {\r\n    var formattedTime;\r\n    var newBackground = \"OG-Fade\";\r\n    \r\n    // Check if this lap is a new best lap\r\n    var isNewPB = BestLapTimeStr !== globalThis.LapTracker.lastBestLap && BestLapTimeStr !== \"0:00.0000000\";\r\n    \r\n    if (isNewPB) {\r\n        // Use the exact BestLapTime\r\n        formattedTime = formatGameTime(BestLapTimeStr);\r\n        globalThis.LapTracker.lastBestLap = BestLapTimeStr;\r\n        newBackground = \"PB-Fade\";\r\n        \r\n        // If there was a previous PB, change its background to OG-Fade\r\n        if (globalThis.LapTracker.lastPBIndex >= 0 && \r\n            globalThis.LapTracker.lastPBIndex < globalThis.LapTracker.backgrounds.length) {\r\n            globalThis.LapTracker.backgrounds[globalThis.LapTracker.lastPBIndex] = \"OG-Fade\";\r\n        }\r\n        \r\n        // Update the PB index (it will be 0 after we unshift)\r\n        globalThis.LapTracker.lastPBIndex = 0;\r\n    } else {\r\n        // Calculate lap time as before\r\n        var lapTime = RaceTime - globalThis.LapTracker.lastLapStart;\r\n        \r\n        // Validate lap time\r\n        if (lapTime > 0 && lapTime < 600) {\r\n            var minutes = Math.floor(lapTime / 60);\r\n            var seconds = Math.floor(lapTime % 60);\r\n            var milliseconds = Math.floor((lapTime - Math.floor(lapTime)) * 1000);\r\n            \r\n            formattedTime = \r\n                minutes.toString().padStart(2, '0') + \":\" +\r\n                seconds.toString().padStart(2, '0') + \".\" +\r\n                milliseconds.toString().padStart(3, '0');\r\n        } else {\r\n            formattedTime = \"00:00.000\";\r\n        }\r\n        \r\n        // Update the PB index when adding a new lap\r\n        if (globalThis.LapTracker.lastPBIndex >= 0) {\r\n            globalThis.LapTracker.lastPBIndex++;\r\n        }\r\n    }\r\n    \r\n    // Update lap times and backgrounds\r\n    globalThis.LapTracker.lapTimes.unshift(formattedTime);\r\n    globalThis.LapTracker.backgrounds.unshift(newBackground);\r\n    \r\n    // Keep only last 4 entries\r\n    if (globalThis.LapTracker.lapTimes.length > 4) {\r\n        globalThis.LapTracker.lapTimes.pop();\r\n        globalThis.LapTracker.backgrounds.pop();\r\n        \r\n        // If the PB was in the last position, reset the PB index\r\n        if (globalThis.LapTracker.lastPBIndex >= 4) {\r\n            globalThis.LapTracker.lastPBIndex = -1;\r\n        }\r\n    }\r\n    \r\n    // Update tracking variables\r\n    globalThis.LapTracker.lastLapStart = RaceTime;\r\n    globalThis.LapTracker.storedLaps = CompletedLaps;\r\n    globalThis.LapTracker.lastValidatedTime = RaceTime + 0.100;\r\n}\r\n\r\n// Function to get background for specific history slot\r\nfunction getLapBackground(index) {\r\n    return CompletedLaps > index ? \r\n        globalThis.LapTracker.backgrounds[index] || \"OG-Fade\" : \r\n        \"OG-Fade\";\r\n}\r\n\r\n// Return background for specific history slot\r\nreturn getLapBackground(3); // Change index (0,1,2,3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":308.3,"Visible":true,"Width":145.0,"Name":"LapTime -4","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime'); // Force string conversion\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.LapHistoryTracker === 'undefined') {\r\n    globalThis.LapHistoryTracker = {\r\n        lapTimes: [],           // Stores the actual lap times\r\n        lastLapStart: RaceTime, // Time when current lap started\r\n        storedLaps: 0,         // Number of completed laps we've stored\r\n        lastValidatedTime: 0,   // Buffer for validation\r\n        lastBestLap: \"\"        // Store last known best lap for comparison\r\n    };\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 to mm:ss.fff\r\nfunction formatGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return \"00:00.000\";\r\n    \r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Hard reset conditions\r\nif (CompletedLaps === 0 || RaceTime < globalThis.LapHistoryTracker.lastLapStart) {\r\n    globalThis.LapHistoryTracker = {\r\n        lapTimes: [],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\"\r\n    };\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Store new lap time when CompletedLaps increases\r\nif (CompletedLaps > globalThis.LapHistoryTracker.storedLaps) {\r\n    var formattedTime;\r\n    \r\n    // Check if this lap is a new best lap\r\n    if (BestLapTimeStr !== globalThis.LapHistoryTracker.lastBestLap) {\r\n        // If BestLapTime has changed, use it for this lap\r\n        formattedTime = formatGameTime(BestLapTimeStr);\r\n        globalThis.LapHistoryTracker.lastBestLap = BestLapTimeStr;\r\n    } else {\r\n        // Otherwise calculate lap time as before\r\n        var lapTime = RaceTime - globalThis.LapHistoryTracker.lastLapStart;\r\n        \r\n        // Validate lap time (prevent unrealistic values)\r\n        if (lapTime > 0 && lapTime < 600) { // Max 10 minutes per lap\r\n            var minutes = Math.floor(lapTime / 60);\r\n            var seconds = Math.floor(lapTime % 60);\r\n            var milliseconds = Math.floor((lapTime - Math.floor(lapTime)) * 1000);\r\n            \r\n            formattedTime = \r\n                minutes.toString().padStart(2, '0') + \":\" +\r\n                seconds.toString().padStart(2, '0') + \".\" +\r\n                milliseconds.toString().padStart(3, '0');\r\n        } else {\r\n            formattedTime = \"00:00.000\";\r\n        }\r\n    }\r\n    \r\n    // Add to front of array\r\n    globalThis.LapHistoryTracker.lapTimes.unshift(formattedTime);\r\n    \r\n    // Keep only last 4 lap times\r\n    if (globalThis.LapHistoryTracker.lapTimes.length > 4) {\r\n        globalThis.LapHistoryTracker.lapTimes.pop();\r\n    }\r\n    \r\n    // Update tracking variables\r\n    globalThis.LapHistoryTracker.lastLapStart = RaceTime;\r\n    globalThis.LapHistoryTracker.storedLaps = CompletedLaps;\r\n    globalThis.LapHistoryTracker.lastValidatedTime = RaceTime + 0.100; // 100ms buffer\r\n}\r\n\r\n// Function to get specific lap history\r\nfunction getLapHistory(index) {\r\n    // Only show times for completed laps\r\n    if (CompletedLaps > index) {\r\n        return globalThis.LapHistoryTracker.lapTimes[index] || \"00:00.000\";\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Return specific history slot based on index\r\nreturn getLapHistory(3); // Change index (0,1,2,3) for different elements"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(3); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":308.3,"Visible":true,"Width":48.0,"Name":"LapCount -4","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 4"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(3); // Change index (1, 2, 3) for different elements"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -4","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>4 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":246.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":246.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime'); // Force string conversion\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.LapTracker === 'undefined') {\r\n    globalThis.LapTracker = {\r\n        lapTimes: [],           // Stores the actual lap times\r\n        backgrounds: [],        // Stores background effects\r\n        lastLapStart: RaceTime, // Time when current lap started\r\n        storedLaps: 0,         // Number of completed laps we've stored\r\n        lastValidatedTime: 0,   // Buffer for validation\r\n        lastBestLap: \"\",       // Store last known best lap\r\n        lastPBIndex: -1        // Track which index was the last PB\r\n    };\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 to mm:ss.fff\r\nfunction formatGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return \"00:00.000\";\r\n    \r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Hard reset conditions\r\nif (CompletedLaps === 0 || RaceTime < globalThis.LapTracker.lastLapStart) {\r\n    globalThis.LapTracker = {\r\n        lapTimes: [],\r\n        backgrounds: [\"OG-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\",\r\n        lastPBIndex: -1\r\n    };\r\n    return \"OG-Fade\";\r\n}\r\n\r\n// Store new lap time when CompletedLaps increases\r\nif (CompletedLaps > globalThis.LapTracker.storedLaps) {\r\n    var formattedTime;\r\n    var newBackground = \"OG-Fade\";\r\n    \r\n    // Check if this lap is a new best lap\r\n    var isNewPB = BestLapTimeStr !== globalThis.LapTracker.lastBestLap && BestLapTimeStr !== \"0:00.0000000\";\r\n    \r\n    if (isNewPB) {\r\n        // Use the exact BestLapTime\r\n        formattedTime = formatGameTime(BestLapTimeStr);\r\n        globalThis.LapTracker.lastBestLap = BestLapTimeStr;\r\n        newBackground = \"PB-Fade\";\r\n        \r\n        // If there was a previous PB, change its background to OG-Fade\r\n        if (globalThis.LapTracker.lastPBIndex >= 0 && \r\n            globalThis.LapTracker.lastPBIndex < globalThis.LapTracker.backgrounds.length) {\r\n            globalThis.LapTracker.backgrounds[globalThis.LapTracker.lastPBIndex] = \"OG-Fade\";\r\n        }\r\n        \r\n        // Update the PB index (it will be 0 after we unshift)\r\n        globalThis.LapTracker.lastPBIndex = 0;\r\n    } else {\r\n        // Calculate lap time as before\r\n        var lapTime = RaceTime - globalThis.LapTracker.lastLapStart;\r\n        \r\n        // Validate lap time\r\n        if (lapTime > 0 && lapTime < 600) {\r\n            var minutes = Math.floor(lapTime / 60);\r\n            var seconds = Math.floor(lapTime % 60);\r\n            var milliseconds = Math.floor((lapTime - Math.floor(lapTime)) * 1000);\r\n            \r\n            formattedTime = \r\n                minutes.toString().padStart(2, '0') + \":\" +\r\n                seconds.toString().padStart(2, '0') + \".\" +\r\n                milliseconds.toString().padStart(3, '0');\r\n        } else {\r\n            formattedTime = \"00:00.000\";\r\n        }\r\n        \r\n        // Update the PB index when adding a new lap\r\n        if (globalThis.LapTracker.lastPBIndex >= 0) {\r\n            globalThis.LapTracker.lastPBIndex++;\r\n        }\r\n    }\r\n    \r\n    // Update lap times and backgrounds\r\n    globalThis.LapTracker.lapTimes.unshift(formattedTime);\r\n    globalThis.LapTracker.backgrounds.unshift(newBackground);\r\n    \r\n    // Keep only last 4 entries\r\n    if (globalThis.LapTracker.lapTimes.length > 4) {\r\n        globalThis.LapTracker.lapTimes.pop();\r\n        globalThis.LapTracker.backgrounds.pop();\r\n        \r\n        // If the PB was in the last position, reset the PB index\r\n        if (globalThis.LapTracker.lastPBIndex >= 4) {\r\n            globalThis.LapTracker.lastPBIndex = -1;\r\n        }\r\n    }\r\n    \r\n    // Update tracking variables\r\n    globalThis.LapTracker.lastLapStart = RaceTime;\r\n    globalThis.LapTracker.storedLaps = CompletedLaps;\r\n    globalThis.LapTracker.lastValidatedTime = RaceTime + 0.100;\r\n}\r\n\r\n// Function to get background for specific history slot\r\nfunction getLapBackground(index) {\r\n    return CompletedLaps > index ? \r\n        globalThis.LapTracker.backgrounds[index] || \"OG-Fade\" : \r\n        \"OG-Fade\";\r\n}\r\n\r\n// Return background for specific history slot\r\nreturn getLapBackground(2); // Change index (0,1,2,3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":256.3,"Visible":true,"Width":145.0,"Name":"LapTime -3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime'); // Force string conversion\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.LapHistoryTracker === 'undefined') {\r\n    globalThis.LapHistoryTracker = {\r\n        lapTimes: [],           // Stores the actual lap times\r\n        lastLapStart: RaceTime, // Time when current lap started\r\n        storedLaps: 0,         // Number of completed laps we've stored\r\n        lastValidatedTime: 0,   // Buffer for validation\r\n        lastBestLap: \"\"        // Store last known best lap for comparison\r\n    };\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 to mm:ss.fff\r\nfunction formatGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return \"00:00.000\";\r\n    \r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Hard reset conditions\r\nif (CompletedLaps === 0 || RaceTime < globalThis.LapHistoryTracker.lastLapStart) {\r\n    globalThis.LapHistoryTracker = {\r\n        lapTimes: [],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\"\r\n    };\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Store new lap time when CompletedLaps increases\r\nif (CompletedLaps > globalThis.LapHistoryTracker.storedLaps) {\r\n    var formattedTime;\r\n    \r\n    // Check if this lap is a new best lap\r\n    if (BestLapTimeStr !== globalThis.LapHistoryTracker.lastBestLap) {\r\n        // If BestLapTime has changed, use it for this lap\r\n        formattedTime = formatGameTime(BestLapTimeStr);\r\n        globalThis.LapHistoryTracker.lastBestLap = BestLapTimeStr;\r\n    } else {\r\n        // Otherwise calculate lap time as before\r\n        var lapTime = RaceTime - globalThis.LapHistoryTracker.lastLapStart;\r\n        \r\n        // Validate lap time (prevent unrealistic values)\r\n        if (lapTime > 0 && lapTime < 600) { // Max 10 minutes per lap\r\n            var minutes = Math.floor(lapTime / 60);\r\n            var seconds = Math.floor(lapTime % 60);\r\n            var milliseconds = Math.floor((lapTime - Math.floor(lapTime)) * 1000);\r\n            \r\n            formattedTime = \r\n                minutes.toString().padStart(2, '0') + \":\" +\r\n                seconds.toString().padStart(2, '0') + \".\" +\r\n                milliseconds.toString().padStart(3, '0');\r\n        } else {\r\n            formattedTime = \"00:00.000\";\r\n        }\r\n    }\r\n    \r\n    // Add to front of array\r\n    globalThis.LapHistoryTracker.lapTimes.unshift(formattedTime);\r\n    \r\n    // Keep only last 4 lap times\r\n    if (globalThis.LapHistoryTracker.lapTimes.length > 4) {\r\n        globalThis.LapHistoryTracker.lapTimes.pop();\r\n    }\r\n    \r\n    // Update tracking variables\r\n    globalThis.LapHistoryTracker.lastLapStart = RaceTime;\r\n    globalThis.LapHistoryTracker.storedLaps = CompletedLaps;\r\n    globalThis.LapHistoryTracker.lastValidatedTime = RaceTime + 0.100; // 100ms buffer\r\n}\r\n\r\n// Function to get specific lap history\r\nfunction getLapHistory(index) {\r\n    // Only show times for completed laps\r\n    if (CompletedLaps > index) {\r\n        return globalThis.LapHistoryTracker.lapTimes[index] || \"00:00.000\";\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Return specific history slot based on index\r\nreturn getLapHistory(2); // Change index (0,1,2,3) for different elements"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(2); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":256.3,"Visible":true,"Width":48.0,"Name":"LapCount -3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 3"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(2); // Change index (1, 2, 3) for different elements"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -3","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>3 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":194.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":194.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime'); // Force string conversion\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.LapTracker === 'undefined') {\r\n    globalThis.LapTracker = {\r\n        lapTimes: [],           // Stores the actual lap times\r\n        backgrounds: [],        // Stores background effects\r\n        lastLapStart: RaceTime, // Time when current lap started\r\n        storedLaps: 0,         // Number of completed laps we've stored\r\n        lastValidatedTime: 0,   // Buffer for validation\r\n        lastBestLap: \"\",       // Store last known best lap\r\n        lastPBIndex: -1        // Track which index was the last PB\r\n    };\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 to mm:ss.fff\r\nfunction formatGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return \"00:00.000\";\r\n    \r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Hard reset conditions\r\nif (CompletedLaps === 0 || RaceTime < globalThis.LapTracker.lastLapStart) {\r\n    globalThis.LapTracker = {\r\n        lapTimes: [],\r\n        backgrounds: [\"OG-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\",\r\n        lastPBIndex: -1\r\n    };\r\n    return \"OG-Fade\";\r\n}\r\n\r\n// Store new lap time when CompletedLaps increases\r\nif (CompletedLaps > globalThis.LapTracker.storedLaps) {\r\n    var formattedTime;\r\n    var newBackground = \"OG-Fade\";\r\n    \r\n    // Check if this lap is a new best lap\r\n    var isNewPB = BestLapTimeStr !== globalThis.LapTracker.lastBestLap && BestLapTimeStr !== \"0:00.0000000\";\r\n    \r\n    if (isNewPB) {\r\n        // Use the exact BestLapTime\r\n        formattedTime = formatGameTime(BestLapTimeStr);\r\n        globalThis.LapTracker.lastBestLap = BestLapTimeStr;\r\n        newBackground = \"PB-Fade\";\r\n        \r\n        // If there was a previous PB, change its background to OG-Fade\r\n        if (globalThis.LapTracker.lastPBIndex >= 0 && \r\n            globalThis.LapTracker.lastPBIndex < globalThis.LapTracker.backgrounds.length) {\r\n            globalThis.LapTracker.backgrounds[globalThis.LapTracker.lastPBIndex] = \"OG-Fade\";\r\n        }\r\n        \r\n        // Update the PB index (it will be 0 after we unshift)\r\n        globalThis.LapTracker.lastPBIndex = 0;\r\n    } else {\r\n        // Calculate lap time as before\r\n        var lapTime = RaceTime - globalThis.LapTracker.lastLapStart;\r\n        \r\n        // Validate lap time\r\n        if (lapTime > 0 && lapTime < 600) {\r\n            var minutes = Math.floor(lapTime / 60);\r\n            var seconds = Math.floor(lapTime % 60);\r\n            var milliseconds = Math.floor((lapTime - Math.floor(lapTime)) * 1000);\r\n            \r\n            formattedTime = \r\n                minutes.toString().padStart(2, '0') + \":\" +\r\n                seconds.toString().padStart(2, '0') + \".\" +\r\n                milliseconds.toString().padStart(3, '0');\r\n        } else {\r\n            formattedTime = \"00:00.000\";\r\n        }\r\n        \r\n        // Update the PB index when adding a new lap\r\n        if (globalThis.LapTracker.lastPBIndex >= 0) {\r\n            globalThis.LapTracker.lastPBIndex++;\r\n        }\r\n    }\r\n    \r\n    // Update lap times and backgrounds\r\n    globalThis.LapTracker.lapTimes.unshift(formattedTime);\r\n    globalThis.LapTracker.backgrounds.unshift(newBackground);\r\n    \r\n    // Keep only last 4 entries\r\n    if (globalThis.LapTracker.lapTimes.length > 4) {\r\n        globalThis.LapTracker.lapTimes.pop();\r\n        globalThis.LapTracker.backgrounds.pop();\r\n        \r\n        // If the PB was in the last position, reset the PB index\r\n        if (globalThis.LapTracker.lastPBIndex >= 4) {\r\n            globalThis.LapTracker.lastPBIndex = -1;\r\n        }\r\n    }\r\n    \r\n    // Update tracking variables\r\n    globalThis.LapTracker.lastLapStart = RaceTime;\r\n    globalThis.LapTracker.storedLaps = CompletedLaps;\r\n    globalThis.LapTracker.lastValidatedTime = RaceTime + 0.100;\r\n}\r\n\r\n// Function to get background for specific history slot\r\nfunction getLapBackground(index) {\r\n    return CompletedLaps > index ? \r\n        globalThis.LapTracker.backgrounds[index] || \"OG-Fade\" : \r\n        \"OG-Fade\";\r\n}\r\n\r\n// Return background for specific history slot\r\nreturn getLapBackground(1); // Change index (0,1,2,3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":204.3,"Visible":true,"Width":145.0,"Name":"LapTime -2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime'); // Force string conversion\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.LapHistoryTracker === 'undefined') {\r\n    globalThis.LapHistoryTracker = {\r\n        lapTimes: [],           // Stores the actual lap times\r\n        lastLapStart: RaceTime, // Time when current lap started\r\n        storedLaps: 0,         // Number of completed laps we've stored\r\n        lastValidatedTime: 0,   // Buffer for validation\r\n        lastBestLap: \"\"        // Store last known best lap for comparison\r\n    };\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 to mm:ss.fff\r\nfunction formatGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return \"00:00.000\";\r\n    \r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Hard reset conditions\r\nif (CompletedLaps === 0 || RaceTime < globalThis.LapHistoryTracker.lastLapStart) {\r\n    globalThis.LapHistoryTracker = {\r\n        lapTimes: [],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\"\r\n    };\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Store new lap time when CompletedLaps increases\r\nif (CompletedLaps > globalThis.LapHistoryTracker.storedLaps) {\r\n    var formattedTime;\r\n    \r\n    // Check if this lap is a new best lap\r\n    if (BestLapTimeStr !== globalThis.LapHistoryTracker.lastBestLap) {\r\n        // If BestLapTime has changed, use it for this lap\r\n        formattedTime = formatGameTime(BestLapTimeStr);\r\n        globalThis.LapHistoryTracker.lastBestLap = BestLapTimeStr;\r\n    } else {\r\n        // Otherwise calculate lap time as before\r\n        var lapTime = RaceTime - globalThis.LapHistoryTracker.lastLapStart;\r\n        \r\n        // Validate lap time (prevent unrealistic values)\r\n        if (lapTime > 0 && lapTime < 600) { // Max 10 minutes per lap\r\n            var minutes = Math.floor(lapTime / 60);\r\n            var seconds = Math.floor(lapTime % 60);\r\n            var milliseconds = Math.floor((lapTime - Math.floor(lapTime)) * 1000);\r\n            \r\n            formattedTime = \r\n                minutes.toString().padStart(2, '0') + \":\" +\r\n                seconds.toString().padStart(2, '0') + \".\" +\r\n                milliseconds.toString().padStart(3, '0');\r\n        } else {\r\n            formattedTime = \"00:00.000\";\r\n        }\r\n    }\r\n    \r\n    // Add to front of array\r\n    globalThis.LapHistoryTracker.lapTimes.unshift(formattedTime);\r\n    \r\n    // Keep only last 4 lap times\r\n    if (globalThis.LapHistoryTracker.lapTimes.length > 4) {\r\n        globalThis.LapHistoryTracker.lapTimes.pop();\r\n    }\r\n    \r\n    // Update tracking variables\r\n    globalThis.LapHistoryTracker.lastLapStart = RaceTime;\r\n    globalThis.LapHistoryTracker.storedLaps = CompletedLaps;\r\n    globalThis.LapHistoryTracker.lastValidatedTime = RaceTime + 0.100; // 100ms buffer\r\n}\r\n\r\n// Function to get specific lap history\r\nfunction getLapHistory(index) {\r\n    // Only show times for completed laps\r\n    if (CompletedLaps > index) {\r\n        return globalThis.LapHistoryTracker.lapTimes[index] || \"00:00.000\";\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Return specific history slot based on index\r\nreturn getLapHistory(1); // Change index (0,1,2,3) for different elements"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(1); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":204.3,"Visible":true,"Width":48.0,"Name":"LapCount -2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 2"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(1); // Change index (1, 2, 3) for different elements"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -2","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>2 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":142.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":142.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime'); // Force string conversion\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.LapTracker === 'undefined') {\r\n    globalThis.LapTracker = {\r\n        lapTimes: [],           // Stores the actual lap times\r\n        backgrounds: [],        // Stores background effects\r\n        lastLapStart: RaceTime, // Time when current lap started\r\n        storedLaps: 0,         // Number of completed laps we've stored\r\n        lastValidatedTime: 0,   // Buffer for validation\r\n        lastBestLap: \"\",       // Store last known best lap\r\n        lastPBIndex: -1        // Track which index was the last PB\r\n    };\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 to mm:ss.fff\r\nfunction formatGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return \"00:00.000\";\r\n    \r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Hard reset conditions\r\nif (CompletedLaps === 0 || RaceTime < globalThis.LapTracker.lastLapStart) {\r\n    globalThis.LapTracker = {\r\n        lapTimes: [],\r\n        backgrounds: [\"OG-Fade\", \"OG-Fade\", \"OG-Fade\", \"OG-Fade\"],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\",\r\n        lastPBIndex: -1\r\n    };\r\n    return \"OG-Fade\";\r\n}\r\n\r\n// Store new lap time when CompletedLaps increases\r\nif (CompletedLaps > globalThis.LapTracker.storedLaps) {\r\n    var formattedTime;\r\n    var newBackground = \"OG-Fade\";\r\n    \r\n    // Check if this lap is a new best lap\r\n    var isNewPB = BestLapTimeStr !== globalThis.LapTracker.lastBestLap && BestLapTimeStr !== \"0:00.0000000\";\r\n    \r\n    if (isNewPB) {\r\n        // Use the exact BestLapTime\r\n        formattedTime = formatGameTime(BestLapTimeStr);\r\n        globalThis.LapTracker.lastBestLap = BestLapTimeStr;\r\n        newBackground = \"PB-Fade\";\r\n        \r\n        // If there was a previous PB, change its background to OG-Fade\r\n        if (globalThis.LapTracker.lastPBIndex >= 0 && \r\n            globalThis.LapTracker.lastPBIndex < globalThis.LapTracker.backgrounds.length) {\r\n            globalThis.LapTracker.backgrounds[globalThis.LapTracker.lastPBIndex] = \"OG-Fade\";\r\n        }\r\n        \r\n        // Update the PB index (it will be 0 after we unshift)\r\n        globalThis.LapTracker.lastPBIndex = 0;\r\n    } else {\r\n        // Calculate lap time as before\r\n        var lapTime = RaceTime - globalThis.LapTracker.lastLapStart;\r\n        \r\n        // Validate lap time\r\n        if (lapTime > 0 && lapTime < 600) {\r\n            var minutes = Math.floor(lapTime / 60);\r\n            var seconds = Math.floor(lapTime % 60);\r\n            var milliseconds = Math.floor((lapTime - Math.floor(lapTime)) * 1000);\r\n            \r\n            formattedTime = \r\n                minutes.toString().padStart(2, '0') + \":\" +\r\n                seconds.toString().padStart(2, '0') + \".\" +\r\n                milliseconds.toString().padStart(3, '0');\r\n        } else {\r\n            formattedTime = \"00:00.000\";\r\n        }\r\n        \r\n        // Update the PB index when adding a new lap\r\n        if (globalThis.LapTracker.lastPBIndex >= 0) {\r\n            globalThis.LapTracker.lastPBIndex++;\r\n        }\r\n    }\r\n    \r\n    // Update lap times and backgrounds\r\n    globalThis.LapTracker.lapTimes.unshift(formattedTime);\r\n    globalThis.LapTracker.backgrounds.unshift(newBackground);\r\n    \r\n    // Keep only last 4 entries\r\n    if (globalThis.LapTracker.lapTimes.length > 4) {\r\n        globalThis.LapTracker.lapTimes.pop();\r\n        globalThis.LapTracker.backgrounds.pop();\r\n        \r\n        // If the PB was in the last position, reset the PB index\r\n        if (globalThis.LapTracker.lastPBIndex >= 4) {\r\n            globalThis.LapTracker.lastPBIndex = -1;\r\n        }\r\n    }\r\n    \r\n    // Update tracking variables\r\n    globalThis.LapTracker.lastLapStart = RaceTime;\r\n    globalThis.LapTracker.storedLaps = CompletedLaps;\r\n    globalThis.LapTracker.lastValidatedTime = RaceTime + 0.100;\r\n}\r\n\r\n// Function to get background for specific history slot\r\nfunction getLapBackground(index) {\r\n    return CompletedLaps > index ? \r\n        globalThis.LapTracker.backgrounds[index] || \"OG-Fade\" : \r\n        \"OG-Fade\";\r\n}\r\n\r\n// Return background for specific history slot\r\nreturn getLapBackground(0); // Change index (0,1,2,3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":152.3,"Visible":true,"Width":145.0,"Name":"LapTime -1","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime'); // Force string conversion\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.LapHistoryTracker === 'undefined') {\r\n    globalThis.LapHistoryTracker = {\r\n        lapTimes: [],           // Stores the actual lap times\r\n        lastLapStart: RaceTime, // Time when current lap started\r\n        storedLaps: 0,         // Number of completed laps we've stored\r\n        lastValidatedTime: 0,   // Buffer for validation\r\n        lastBestLap: \"\"        // Store last known best lap for comparison\r\n    };\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 to mm:ss.fff\r\nfunction formatGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return \"00:00.000\";\r\n    \r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Hard reset conditions\r\nif (CompletedLaps === 0 || RaceTime < globalThis.LapHistoryTracker.lastLapStart) {\r\n    globalThis.LapHistoryTracker = {\r\n        lapTimes: [],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\"\r\n    };\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Store new lap time when CompletedLaps increases\r\nif (CompletedLaps > globalThis.LapHistoryTracker.storedLaps) {\r\n    var formattedTime;\r\n    \r\n    // Check if this lap is a new best lap\r\n    if (BestLapTimeStr !== globalThis.LapHistoryTracker.lastBestLap) {\r\n        // If BestLapTime has changed, use it for this lap\r\n        formattedTime = formatGameTime(BestLapTimeStr);\r\n        globalThis.LapHistoryTracker.lastBestLap = BestLapTimeStr;\r\n    } else {\r\n        // Otherwise calculate lap time as before\r\n        var lapTime = RaceTime - globalThis.LapHistoryTracker.lastLapStart;\r\n        \r\n        // Validate lap time (prevent unrealistic values)\r\n        if (lapTime > 0 && lapTime < 600) { // Max 10 minutes per lap\r\n            var minutes = Math.floor(lapTime / 60);\r\n            var seconds = Math.floor(lapTime % 60);\r\n            var milliseconds = Math.floor((lapTime - Math.floor(lapTime)) * 1000);\r\n            \r\n            formattedTime = \r\n                minutes.toString().padStart(2, '0') + \":\" +\r\n                seconds.toString().padStart(2, '0') + \".\" +\r\n                milliseconds.toString().padStart(3, '0');\r\n        } else {\r\n            formattedTime = \"00:00.000\";\r\n        }\r\n    }\r\n    \r\n    // Add to front of array\r\n    globalThis.LapHistoryTracker.lapTimes.unshift(formattedTime);\r\n    \r\n    // Keep only last 4 lap times\r\n    if (globalThis.LapHistoryTracker.lapTimes.length > 4) {\r\n        globalThis.LapHistoryTracker.lapTimes.pop();\r\n    }\r\n    \r\n    // Update tracking variables\r\n    globalThis.LapHistoryTracker.lastLapStart = RaceTime;\r\n    globalThis.LapHistoryTracker.storedLaps = CompletedLaps;\r\n    globalThis.LapHistoryTracker.lastValidatedTime = RaceTime + 0.100; // 100ms buffer\r\n}\r\n\r\n// Function to get specific lap history\r\nfunction getLapHistory(index) {\r\n    // Only show times for completed laps\r\n    if (CompletedLaps > index) {\r\n        return globalThis.LapHistoryTracker.lapTimes[index] || \"00:00.000\";\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Return specific history slot based on index\r\nreturn getLapHistory(0); // Change index (0,1,2,3) for different elements"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(0); // Change index (1, 2, 3) for different elements"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":152.3,"Visible":true,"Width":48.0,"Name":"LapCount -1","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 1"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastBestLapColors;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForColor;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastBestLapColors === 'undefined') {\r\n    globalThis.PastBestLapColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]; // Default all to white\r\n    globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n    globalThis.StoredCompletedLapsForColor = 0;\r\n}\r\n\r\n// **Check if a new BestLapTime is set**\r\nif (BestLapTime !== globalThis.StoredBestLapTime) {\r\n    // A new PB was set, reset tracking and mark history 0 as purple\r\n    globalThis.PastBestLapColors = [\"#9500ff\", \"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"];\r\n    globalThis.StoredBestLapTime = BestLapTime;\r\n} else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n    // Shift colors down the history as laps progress\r\n    globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // New lap defaults to white\r\n    globalThis.PastBestLapColors.pop(); // Keep array length at 4\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// **Return the correct color for each history element**\r\nfunction getLapHistoryColor(index) {\r\n    return CompletedLaps > index ? globalThis.PastBestLapColors[index] : \"#FFFFFF\";\r\n}\r\n\r\n// **Change return value for each history slot**\r\nreturn getLapHistoryColor(0); // Change index (1, 2, 3) for different elements"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -1","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>1 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":90.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":90.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#99000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FF00BDFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":100.3,"Visible":true,"Width":145.0,"Name":"Current","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"mm\\:ss\\.fff","Formula":{"JSExt":0,"Interpreter":1,"Expression":"var CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTime = $prop('BestLapTime');\r\n\r\n// Initialize global variables if not set\r\nif (typeof globalThis.BestLapStored === 'undefined') {\r\n    globalThis.BestLapStored = 0;\r\n    globalThis.LapStart = 0;\r\n    globalThis.CompletedLapStored = 0;\r\n}\r\n\r\n// Hard reset conditions\r\nif (BestLapTime === 0 || CompletedLaps === 0 || \r\n    CompletedLaps !== globalThis.CompletedLapStored) {\r\n    globalThis.BestLapStored = BestLapTime;\r\n    globalThis.LapStart = RaceTime;\r\n    globalThis.CompletedLapStored = CompletedLaps;\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Calculate elapsed time\r\nvar elapsed = RaceTime - globalThis.LapStart;\r\n\r\n// Prevent negative times\r\nif (elapsed < 0) {\r\n    globalThis.LapStart = RaceTime;\r\n    elapsed = 0;\r\n}\r\n\r\nvar minutes = Math.floor(elapsed / 60);\r\nvar seconds = Math.floor(elapsed % 60);\r\nvar milliseconds = Math.floor((elapsed - Math.floor(elapsed)) * 1000);\r\n\r\n// Format output as mm:ss.fff\r\nvar formattedTime = minutes.toString().padStart(2, '0') + \":\" +\r\n                    seconds.toString().padStart(2, '0') + \".\" +\r\n                    milliseconds.toString().padStart(3, '0');\r\n\r\nreturn formattedTime;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#99000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FF00BDFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.0,"Top":100.3,"Visible":true,"Width":48.0,"Name":"Lap Count","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap]"},"Mode":2}}}],"Visible":true,"Name":"Current Lap","RenderingSkip":0,"MinimumRefreshIntervalMS":8.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":20.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":20.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont FuelTire-Num-R","FontSize":38.0,"Text":"AVG","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.3,"Top":30.3,"Visible":true,"Width":48.0,"Name":"AVG","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"TextColor":{"Formula":{"Expression":"if([CurrentLap] > 2 && changed(3000, [CompletedLaps]) = 1, '#00FF7F', '#FFFFFF')"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":30.3,"Visible":true,"Width":145.0,"Name":"AVG-time","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime');\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.AllLapsAverage === 'undefined') {\r\n    globalThis.AllLapsAverage = {\r\n        lapTimes: [],          // Store all lap times\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\",\r\n        sessionStartTime: RaceTime\r\n    };\r\n}\r\n\r\n// Hard reset conditions\r\nif (CompletedLaps === 0 || RaceTime < globalThis.AllLapsAverage.sessionStartTime) {\r\n    globalThis.AllLapsAverage = {\r\n        lapTimes: [],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\",\r\n        sessionStartTime: RaceTime\r\n    };\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Function to parse game time format to seconds\r\nfunction parseGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return 0;\r\n    var hours = parseInt(timeStr.substring(0, 2)) || 0;\r\n    var minutes = parseInt(timeStr.substring(3, 5)) || 0;\r\n    var seconds = parseInt(timeStr.substring(6, 8)) || 0;\r\n    var milliseconds = parseInt(timeStr.substring(9, 12)) || 0;\r\n    return (hours * 3600) + (minutes * 60) + seconds + (milliseconds / 1000);\r\n}\r\n\r\n// Store new lap time when CompletedLaps increases\r\nif (CompletedLaps > globalThis.AllLapsAverage.storedLaps) {\r\n    var lapTimeValue;\r\n    \r\n    // Check if this lap is a new best lap\r\n    var isNewPB = BestLapTimeStr !== globalThis.AllLapsAverage.lastBestLap && \r\n                  parseGameTime(BestLapTimeStr) > 0;\r\n    \r\n    if (isNewPB) {\r\n        // Use exact BestLapTime value\r\n        lapTimeValue = parseGameTime(BestLapTimeStr);\r\n        globalThis.AllLapsAverage.lastBestLap = BestLapTimeStr;\r\n    } else {\r\n        // Calculate lap time from race time difference\r\n        lapTimeValue = RaceTime - globalThis.AllLapsAverage.lastLapStart;\r\n    }\r\n    \r\n    // Validate and store lap time\r\n    if (lapTimeValue > 0 && lapTimeValue < 600) { // Max 10 minutes per lap\r\n        globalThis.AllLapsAverage.lapTimes.push(lapTimeValue);\r\n    }\r\n    \r\n    // Update tracking variables\r\n    globalThis.AllLapsAverage.lastLapStart = RaceTime;\r\n    globalThis.AllLapsAverage.storedLaps = CompletedLaps;\r\n    globalThis.AllLapsAverage.lastValidatedTime = RaceTime + 0.100;\r\n}\r\n\r\n// Calculate and format average\r\nif (globalThis.AllLapsAverage.lapTimes.length > 0) {\r\n    var total = globalThis.AllLapsAverage.lapTimes.reduce((sum, time) => sum + time, 0);\r\n    var average = total / globalThis.AllLapsAverage.lapTimes.length;\r\n    \r\n    var minutes = Math.floor(average / 60);\r\n    var seconds = Math.floor(average % 60);\r\n    var milliseconds = Math.floor((average - Math.floor(average)) * 1000);\r\n    \r\n    return minutes.toString().padStart(2, '0') + \":\" +\r\n           seconds.toString().padStart(2, '0') + \".\" +\r\n           milliseconds.toString().padStart(3, '0');\r\n}\r\n\r\nreturn \"00:00.000\";"},"Mode":2},"Opacity":{"Formula":{"Expression":"if([CurrentLap] > 2 && changed(3000, [CompletedLaps]) = 1, 0, 100)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FF00FF7F","HorizontalAlignment":0,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":138.3,"Top":30.3,"Visible":true,"Width":145.0,"Name":"AVG-time(possiblebest)","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime');\r\nvar BestLapTimeStr = \"\" + $prop('BestLapTime');\r\n\r\n// Initialize global storage if needed\r\nif (typeof globalThis.ValidLapsAverage === 'undefined') {\r\n    globalThis.ValidLapsAverage = {\r\n        validLapTimes: [],     // Store valid lap times\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\",\r\n        sessionStartTime: RaceTime\r\n    };\r\n}\r\n\r\n// **HARD RESET on session start (CompletedLaps === 0)**\r\nif (CompletedLaps === 0 || RaceTime < globalThis.ValidLapsAverage.sessionStartTime) {\r\n    globalThis.ValidLapsAverage = {\r\n        validLapTimes: [],\r\n        lastLapStart: RaceTime,\r\n        storedLaps: 0,\r\n        lastValidatedTime: 0,\r\n        lastBestLap: \"\",\r\n        sessionStartTime: RaceTime\r\n    };\r\n    return \"00:00.000\"; // Reset output\r\n}\r\n\r\n// Function to parse game time format to seconds\r\nfunction parseGameTime(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return 0;\r\n    var hours = parseInt(timeStr.substring(0, 2)) || 0;\r\n    var minutes = parseInt(timeStr.substring(3, 5)) || 0;\r\n    var seconds = parseInt(timeStr.substring(6, 8)) || 0;\r\n    var milliseconds = parseInt(timeStr.substring(9, 12)) || 0;\r\n    return (hours * 3600) + (minutes * 60) + seconds + (milliseconds / 1000);\r\n}\r\n\r\n// **EXCLUDE LAP 1 AND ENSURE VALID TIME CALCULATION**\r\nif (CompletedLaps > globalThis.ValidLapsAverage.storedLaps && CompletedLaps > 1) { \r\n    var lapTimeValue;\r\n    var bestLapSeconds = parseGameTime(BestLapTimeStr);\r\n    \r\n    // Check if this lap is a new best lap\r\n    var isNewPB = BestLapTimeStr !== globalThis.ValidLapsAverage.lastBestLap && \r\n                  bestLapSeconds > 0;\r\n    \r\n    if (isNewPB) {\r\n        // Use exact BestLapTime value\r\n        lapTimeValue = bestLapSeconds;\r\n        globalThis.ValidLapsAverage.lastBestLap = BestLapTimeStr;\r\n    } else {\r\n        // Calculate lap time from race time difference\r\n        lapTimeValue = RaceTime - globalThis.ValidLapsAverage.lastLapStart;\r\n    }\r\n    \r\n    // Ensure lap time is valid (ignoring negative/zero values)\r\n    if (lapTimeValue > 0 && lapTimeValue < 600) { // Max 10 minutes per lap\r\n        \r\n        // **New condition: Exclude laps that are less than 99% of BestLapTime IF BestLapTime didn't update**\r\n        if (!isNewPB && lapTimeValue < bestLapSeconds * 0.99) {\r\n            lapTimeValue = null; // Invalid lap, do not store\r\n        }\r\n\r\n        // Only store if within 99% - 101.5% of best lap\r\n        if (lapTimeValue && bestLapSeconds > 0 && lapTimeValue >= bestLapSeconds * 0.99 && lapTimeValue <= bestLapSeconds * 1.015) {\r\n            globalThis.ValidLapsAverage.validLapTimes.push(lapTimeValue);\r\n        }\r\n    }\r\n    \r\n    // Update tracking variables only if lap was valid\r\n    if (lapTimeValue) {\r\n        globalThis.ValidLapsAverage.lastLapStart = RaceTime;\r\n        globalThis.ValidLapsAverage.storedLaps = CompletedLaps;\r\n    }\r\n}\r\n\r\n// Update last validation time\r\nglobalThis.ValidLapsAverage.lastValidatedTime = RaceTime + 0.100;\r\n\r\n// Calculate and format average\r\nif (globalThis.ValidLapsAverage.validLapTimes.length > 0) {\r\n    var total = globalThis.ValidLapsAverage.validLapTimes.reduce((sum, time) => sum + time, 0);\r\n    var average = total / globalThis.ValidLapsAverage.validLapTimes.length;\r\n    \r\n    var minutes = Math.floor(average / 60);\r\n    var seconds = Math.floor(average % 60);\r\n    var milliseconds = Math.floor((average - Math.floor(average)) * 1000);\r\n    \r\n    return minutes.toString().padStart(2, '0') + \":\" +\r\n           seconds.toString().padStart(2, '0') + \".\" +\r\n           milliseconds.toString().padStart(3, '0');\r\n}\r\n\r\n// Default return value if no valid laps exist yet\r\nreturn \"00:00.000\";"},"Mode":2},"Opacity":{"Formula":{"Expression":"if([CurrentLap] > 2 && changed(3000, [CompletedLaps]) = 1, 100, 0)"},"Mode":2}}}],"Visible":true,"Name":"Average Laptime","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Visible":{"Formula":{"Expression":"[CompletedLaps]>=1"},"Mode":2}}}],"Visible":false,"Name":"Time Race History","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"Expression":"if(\r\n  [CurrentLap] > 1 && timespantoseconds([LastLapTime]) = 0,\r\n  100,\r\n  0   \r\n)"},"Mode":2},"Visible":{"Formula":{"Expression":"if([CurrentLap] >= 2 && timespantoseconds([LastLapTime]) > 0, 0, 1)"},"Mode":2}}}],"MinimumRefreshIntervalMS":0.0}],"SnapToGrid":false,"HideLabels":true,"ShowForeground":true,"ForegroundOpacity":100.0,"ShowBackground":true,"BackgroundOpacity":100.0,"ShowBoundingRectangles":false,"GridSize":10,"Images":[{"Name":"OG-Fade","Extension":".png","Modified":false,"Optimized":true,"Width":320,"Height":80,"Length":47520,"MD5":"3f5d4de4e9fa29d5169f7e0fd3ba87da"},{"Name":"GL-Fade","Extension":".png","Modified":false,"Optimized":true,"Length":228461,"MD5":"3d8b18c97722f98c429852009ea57961"},{"Name":"PB-Fade","Extension":".png","Modified":false,"Optimized":true,"Length":179406,"MD5":"b7d687d4f0614ccc8b709887baf109d8"},{"Name":"Square","Extension":".png","Modified":false,"Optimized":true,"Width":88,"Height":80,"Length":1320,"MD5":"f8f7577f2d4407d5b254594c3b637f3c"},{"Name":"BL-Fade","Extension":".png","Modified":false,"Optimized":true,"Length":140745,"MD5":"07aef557bdddcae5cd44b3550b323562"}],"Metadata":{"ScreenCount":1.0,"InGameScreensIndexs":[0],"IdleScreensIndexs":[0],"MainPreviewIndex":0,"IsOverlay":true,"OverlaySizeWarning":false,"MetadataVersion":2.0,"EnableOnDashboardMessaging":true,"PitScreensIndexs":[],"SimHubVersion":"9.7.2","Title":"Art-Lap-History-v1","Author":"Artiick","Width":339.0,"Height":368.0,"DashboardVersion":""},"ShowOnScreenControls":true,"IsOverlay":true,"EnableClickThroughOverlay":true,"EnableOnDashboardMessaging":true}