{"Variables":{"DashboardVariables":[{"VariableName":"LapHistoryColor","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// //Lap history OG Color formula\r\n// var CompletedLaps = $prop('CompletedLaps');\r\n// var BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\n// var LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\n\r\n// // Ensure valid lap time format\r\n// if (!LastLapTime || LastLapTime.length < 12) {\r\n//     LastLapTime = \"00:00.000\";\r\n// }\r\n// if (!BestLapTime || BestLapTime.length < 12) {\r\n//     BestLapTime = \"00:00.000\";\r\n// }\r\n\r\n// // **FORCE HARD RESET if CompletedLaps resets to 0**\r\n// if (CompletedLaps === 0) {\r\n//     delete globalThis.PastBestLapColors;\r\n//     delete globalThis.StoredBestLapTime;\r\n//     delete globalThis.StoredCompletedLapsForColor;\r\n// }\r\n\r\n// // Initialize storage if needed\r\n// if (typeof globalThis.PastBestLapColors === 'undefined') {\r\n//     globalThis.PastBestLapColors = Array(10).fill(\"#FFFFFF\"); // 10 white colors\r\n//     globalThis.StoredBestLapTime = \"00:00.000\"; // Store last known best lap\r\n//     globalThis.StoredCompletedLapsForColor = 0;\r\n// }\r\n\r\n// // **Check if a new BestLapTime is set**\r\n// if (BestLapTime !== globalThis.StoredBestLapTime) {\r\n//     // New PB: reset to white, mark most recent lap purple\r\n//     globalThis.PastBestLapColors = Array(10).fill(\"#FFFFFF\");\r\n//     globalThis.PastBestLapColors[0] = \"#aa00ff\"; // Purple for new PB\r\n//     globalThis.StoredBestLapTime = BestLapTime;\r\n// } else if (CompletedLaps > globalThis.StoredCompletedLapsForColor) {\r\n//     // Shift colors down as laps progress\r\n//     globalThis.PastBestLapColors.unshift(\"#FFFFFF\"); // Add white for new lap\r\n//     globalThis.PastBestLapColors.pop(); // Keep array at 10\r\n// }\r\n\r\n// // Update stored completed laps\r\n// globalThis.StoredCompletedLapsForColor = CompletedLaps;\r\n\r\n// // **Format all colors into a single string**\r\n// var colorString = \"\";\r\n// for (var i = 0; i < 10; i++) {\r\n//     var color = CompletedLaps > i ? globalThis.PastBestLapColors[i] : \"#FFFFFF\";\r\n//     colorString += i + \".\" + color + \" \";\r\n// }\r\n\r\n// // Trim the trailing space and return the string\r\n// return colorString.trim();\r\n\r\n\r\n// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar CurrentTime = $prop('GameRawData.CurrentRaceTime'); // Get current race time\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// Convert lap time to milliseconds for calculations\r\nfunction lapTimeToMs(lapTime) {\r\n    var parts = lapTime.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parseFloat(parts[2]);\r\n        return (minutes * 1000 * 60) + (secondsWithMs * 1000);\r\n    }\r\n    return 0;\r\n}\r\n\r\n// Convert times to milliseconds\r\nvar BestLapMs = lapTimeToMs(BestLapTime);\r\nvar LastLapMs = lapTimeToMs(LastLapTime);\r\n\r\n// Calculate threshold for \"Good Lap\"\r\nvar GoodLapThreshold = BestLapMs * 1.00125; // 100.125% of BestLapTime\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapImages;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForImage;\r\n    delete globalThis.LastChangeTime; // Reset timing logic\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapImages === 'undefined') {\r\n    globalThis.PastLapImages = Array(4).fill(\"#FFFFFF\"); // Default all 4 slots to #FFFFFF\r\n    globalThis.StoredBestLapTime = \"00:00.000\";\r\n    globalThis.StoredCompletedLapsForImage = 0;\r\n    globalThis.LastChangeTime = 0; // Track when the fade effect started\r\n}\r\n\r\n// **Check if a new PB is set**\r\nvar isNewPB = BestLapTime !== globalThis.StoredBestLapTime && BestLapMs > 0;\r\nif (isNewPB) {\r\n    // **Set h0 to #aa00ff and reset all others to #FFFFFF**\r\n    globalThis.PastLapImages = Array(4).fill(\"#FFFFFF\");\r\n    globalThis.PastLapImages[0] = \"#aa00ff\";\r\n    globalThis.StoredBestLapTime = BestLapTime; // Store the new PB\r\n} \r\n// **Otherwise, check if LastLapTime is good, bad, or faster than BestLapTime**\r\nelse if (CompletedLaps > globalThis.StoredCompletedLapsForImage) {\r\n    var newFade = \"#FFFFFF\"; // Default background\r\n    if (LastLapMs < BestLapMs && LastLapMs > 0) {\r\n        newFade = \"#FCA600\"; // Faster than BestLapTime (invalid PB)\r\n    } else if (LastLapMs <= GoodLapThreshold) {\r\n        newFade = \"#00ff7f\"; // Good lap (within 100.125% of BestLapTime)\r\n    } else {\r\n        newFade = \"#ff0033\"; // Bad lap\r\n    }\r\n    \r\n    // Store the current race time when the fade effect started\r\n    globalThis.LastChangeTime = CurrentTime;\r\n    \r\n    // Add the new lap background to history\r\n    globalThis.PastLapImages.unshift(newFade);\r\n    globalThis.PastLapImages.pop(); // Keep array at 4 elements\r\n}\r\n\r\n// **Handle 3-second fade effect**\r\nif (globalThis.LastChangeTime && (CurrentTime - globalThis.LastChangeTime > 3)) {\r\n    if (globalThis.PastLapImages[0] === \"#00ff7f\" || globalThis.PastLapImages[0] === \"#ff0033\" || globalThis.PastLapImages[0] === \"#FCA600\") {\r\n        globalThis.PastLapImages[0] = \"#FFFFFF\"; // Reset after 3 seconds\r\n    }\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForImage = CompletedLaps;\r\n\r\n// **Format all background images into a single string**\r\nvar imageString = \"\";\r\nfor (var i = 0; i < 4; i++) {\r\n    var image = CompletedLaps > i ? globalThis.PastLapImages[i] : \"#FFFFFF\";\r\n    imageString += i + \".\" + image + \" \";\r\n}\r\n\r\n// Trim the trailing space and return the string\r\nreturn imageString.trim();\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"LapHistoryTime","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime'); // Used for reset detection\r\n\r\n// Ensure LastLapTime is valid\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\n\r\n// Function to format hh:mm:ss.fff0000 → mm:ss.fff\r\nfunction formatLapTime(timeStr) {\r\n    var parts = timeStr.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parts[2].split(\".\")[0] + \".\" + parts[2].split(\".\")[1].substring(0, 3);\r\n        return minutes.toString().padStart(2, '0') + \":\" + secondsWithMs;\r\n    }\r\n    return \"00:00.000\";\r\n}\r\n\r\n// Format LastLapTime properly\r\nLastLapTime = formatLapTime(LastLapTime);\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapTimes;\r\n    delete globalThis.StoredCompletedLaps;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapTimes === 'undefined') {\r\n    globalThis.PastLapTimes = [];\r\n    globalThis.StoredCompletedLaps = 0;\r\n}\r\n\r\n// **Store past lap times when a new lap is completed**\r\nif (CompletedLaps > globalThis.StoredCompletedLaps) {\r\n    globalThis.PastLapTimes.unshift(LastLapTime); // Add newest lap time at the front\r\n    if (globalThis.PastLapTimes.length > 10) {\r\n        globalThis.PastLapTimes.pop(); // Keep only the last 10 lap times\r\n    }\r\n    globalThis.StoredCompletedLaps = CompletedLaps;\r\n}\r\n\r\n// **Format all lap times into a single string**\r\nvar timeString = \"\";\r\nfor (var i = 0; i < 10; i++) {\r\n    var lapTime = CompletedLaps > i ? (globalThis.PastLapTimes[i] || \"—\") : \"—\";\r\n    timeString += i + \".\" + lapTime + \" \";\r\n}\r\n\r\n// Trim the trailing space and return the string\r\nreturn timeString.trim();"},"EvaluateBeforeScreenRoles":false},{"VariableName":"LapHistoryBG","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Retrieve game properties\r\nvar CompletedLaps = $prop('CompletedLaps');\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure string conversion\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure string conversion\r\nvar CurrentTime = $prop('GameRawData.CurrentRaceTime'); // Get current race time\r\n\r\n// Ensure valid lap time format\r\nif (!LastLapTime || LastLapTime.length < 12) {\r\n    LastLapTime = \"00:00.000\";\r\n}\r\nif (!BestLapTime || BestLapTime.length < 12) {\r\n    BestLapTime = \"00:00.000\";\r\n}\r\n\r\n// Convert lap time to milliseconds for calculations\r\nfunction lapTimeToMs(lapTime) {\r\n    var parts = lapTime.split(\":\");\r\n    if (parts.length === 3) {\r\n        var minutes = parseInt(parts[0]) * 60 + parseInt(parts[1]);\r\n        var secondsWithMs = parseFloat(parts[2]);\r\n        return (minutes * 1000 * 60) + (secondsWithMs * 1000);\r\n    }\r\n    return 0;\r\n}\r\n\r\n// Convert times to milliseconds\r\nvar BestLapMs = lapTimeToMs(BestLapTime);\r\nvar LastLapMs = lapTimeToMs(LastLapTime);\r\n\r\n// Calculate threshold for \"Good Lap\"\r\nvar GoodLapThreshold = BestLapMs * 1.00125; // 100.125% of BestLapTime\r\n\r\n// **FORCE HARD RESET if CompletedLaps resets to 0**\r\nif (CompletedLaps === 0) {\r\n    delete globalThis.PastLapImages;\r\n    delete globalThis.StoredBestLapTime;\r\n    delete globalThis.StoredCompletedLapsForImage;\r\n    delete globalThis.LastChangeTime;\r\n}\r\n\r\n// Initialize storage if needed\r\nif (typeof globalThis.PastLapImages === 'undefined') {\r\n    globalThis.PastLapImages = Array(4).fill(\"OG-Fade\"); // Default all 4 slots to OG-Fade\r\n    globalThis.StoredBestLapTime = \"00:00.000\";\r\n    globalThis.StoredCompletedLapsForImage = 0;\r\n    globalThis.LastChangeTime = 0; // Track when fade effect started\r\n}\r\n\r\n// **Check if a new PB is set**\r\nvar isNewPB = BestLapTime !== globalThis.StoredBestLapTime && BestLapMs > 0;\r\nif (isNewPB) {\r\n    // Shift the array to add new PB\r\n    globalThis.PastLapImages.unshift(\"PB-Fade\"); // Add new PB\r\n    if (globalThis.PastLapImages.length > 4) {\r\n        globalThis.PastLapImages.pop(); // Keep at 4 elements\r\n    }\r\n    // Reset any previous purple (PB-Fade) to white, preserving yellow\r\n    for (var i = 1; i < globalThis.PastLapImages.length; i++) {\r\n        if (globalThis.PastLapImages[i] === \"PB-Fade\") {\r\n            globalThis.PastLapImages[i] = \"OG-Fade\";\r\n        }\r\n    }\r\n    globalThis.StoredBestLapTime = BestLapTime; // Store the new PB\r\n    globalThis.LastChangeTime = CurrentTime; // Reset fade timer\r\n} \r\n// **Otherwise, check if LastLapTime is good, bad, or faster than BestLapTime**\r\nelse if (CompletedLaps > globalThis.StoredCompletedLapsForImage) {\r\n    var newFade = \"OG-Fade\"; // Default background\r\n    if (LastLapMs < BestLapMs && LastLapMs > 0) {\r\n        newFade = \"DT-Fade\"; // Faster than BestLapTime (dirty lap)\r\n    } else if (LastLapMs <= GoodLapThreshold) {\r\n        newFade = \"GL-Fade\"; // Good lap (within 100.125% of BestLapTime)\r\n    } else {\r\n        newFade = \"BL-Fade\"; // Bad lap\r\n    }\r\n    \r\n    // Store the current race time when the fade effect started\r\n    globalThis.LastChangeTime = CurrentTime;\r\n    \r\n    // Add the new lap background to history\r\n    globalThis.PastLapImages.unshift(newFade);\r\n    if (globalThis.PastLapImages.length > 4) {\r\n        globalThis.PastLapImages.pop(); // Keep array at 4 elements\r\n    }\r\n}\r\n\r\n// **Handle 3-second fade effect, excluding PB-Fade and DT-Fade**\r\nif (globalThis.LastChangeTime && (CurrentTime - globalThis.LastChangeTime > 3)) {\r\n    if (globalThis.PastLapImages[0] === \"GL-Fade\" || globalThis.PastLapImages[0] === \"BL-Fade\") {\r\n        globalThis.PastLapImages[0] = \"OG-Fade\"; // Reset only green/red after 3 seconds\r\n    }\r\n}\r\n\r\n// Update stored completed laps\r\nglobalThis.StoredCompletedLapsForImage = CompletedLaps;\r\n\r\n// **Format all background images into a single string**\r\nvar imageString = \"\";\r\nfor (var i = 0; i < 4; i++) {\r\n    var image = CompletedLaps > i ? globalThis.PastLapImages[i] : \"OG-Fade\";\r\n    imageString += i + \".\" + image + \" \";\r\n}\r\n\r\n// Trim the trailing space and return the string\r\nreturn imageString.trim();\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"AvgTime","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"var CompletedLaps = $prop('CompletedLaps');\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure it's a string\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime'); // Track session time\r\n\r\n// Initialize storage\r\nif (typeof globalThis.LapTimes === 'undefined') {\r\n    globalThis.LapTimes = [];\r\n    globalThis.LastStoredLap = 0;\r\n    globalThis.AverageLapTime = \"00:00.000\";\r\n    globalThis.SessionStartTime = RaceTime; // Store session start\r\n}\r\n\r\n// **Reset on New Session**\r\nif (CompletedLaps === 0 || RaceTime < globalThis.SessionStartTime) {\r\n    globalThis.LapTimes = [];\r\n    globalThis.LastStoredLap = 0;\r\n    globalThis.AverageLapTime = \"00:00.000\";\r\n    globalThis.SessionStartTime = RaceTime; // Update session start time\r\n}\r\n\r\n// Function to parse \"hh:mm:ss.fff0000\" format into seconds\r\nfunction parseTimeToSeconds(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return 0; // Basic safety check\r\n\r\n    var hours = parseInt(timeStr.substring(0, 2)) || 0;\r\n    var minutes = parseInt(timeStr.substring(3, 5)) || 0;\r\n    var seconds = parseInt(timeStr.substring(6, 8)) || 0;\r\n    var milliseconds = parseInt(timeStr.substring(9, 12)) || 0;\r\n\r\n    return (hours * 3600) + (minutes * 60) + seconds + (milliseconds / 1000);\r\n}\r\n\r\n// Convert LastLapTime to seconds\r\nvar lapTimeInSeconds = parseTimeToSeconds(LastLapTime);\r\n\r\n// Store only **new laps** with valid lap times\r\nif (CompletedLaps > globalThis.LastStoredLap && lapTimeInSeconds > 0) {\r\n    globalThis.LapTimes.push(lapTimeInSeconds);\r\n    globalThis.LastStoredLap = CompletedLaps;\r\n}\r\n\r\n// Calculate the average\r\nif (globalThis.LapTimes.length > 0) {\r\n    var total = 0;\r\n    for (var i = 0; i < globalThis.LapTimes.length; i++) {\r\n        total += globalThis.LapTimes[i];\r\n    }\r\n    var avg = total / globalThis.LapTimes.length;\r\n\r\n    // Format to mm:ss.fff\r\n    var minutes = Math.floor(avg / 60);\r\n    var seconds = Math.floor(avg % 60);\r\n    var milliseconds = Math.floor((avg - Math.floor(avg)) * 1000);\r\n\r\n    globalThis.AverageLapTime = \r\n        minutes.toString().padStart(2, '0') + \":\" +\r\n        seconds.toString().padStart(2, '0') + \".\" +\r\n        milliseconds.toString().padStart(3, '0');\r\n}\r\n\r\n// Return the formatted average lap time\r\nreturn globalThis.AverageLapTime;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"AvgTimeBest","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"var CompletedLaps = $prop('CompletedLaps');\r\nvar LastLapTime = \"\" + $prop('LastLapTime'); // Ensure it's a string\r\nvar RaceTime = $prop('GameRawData.CurrentRaceTime'); // Track session time\r\nvar BestLapTime = \"\" + $prop('BestLapTime'); // Ensure it's a string\r\n\r\n// Initialize storage\r\nif (typeof globalThis.LapTimes === 'undefined') {\r\n    globalThis.LapTimes = [];\r\n    globalThis.LastStoredLap = 0;\r\n    globalThis.AverageLapTime = \"00:00.000\";\r\n    globalThis.BestPossibleLapTimes = [];\r\n    globalThis.LastStoredBestLap = 0;\r\n    globalThis.SessionStartTime = RaceTime; // Store session start\r\n}\r\n\r\n// **Reset on New Session**\r\nif (CompletedLaps === 0 || RaceTime < globalThis.SessionStartTime) {\r\n    globalThis.LapTimes = [];\r\n    globalThis.BestPossibleLapTimes = [];\r\n    globalThis.LastStoredLap = 0;\r\n    globalThis.LastStoredBestLap = 0;\r\n    globalThis.AverageLapTime = \"00:00.000\";\r\n    globalThis.SessionStartTime = RaceTime; // Update session start time\r\n}\r\n\r\n// Function to parse \"hh:mm:ss.fff0000\" format into seconds\r\nfunction parseTimeToSeconds(timeStr) {\r\n    if (!timeStr || timeStr.length < 12) return 0; // Basic safety check\r\n\r\n    var hours = parseInt(timeStr.substring(0, 2)) || 0;\r\n    var minutes = parseInt(timeStr.substring(3, 5)) || 0;\r\n    var seconds = parseInt(timeStr.substring(6, 8)) || 0;\r\n    var milliseconds = parseInt(timeStr.substring(9, 12)) || 0;\r\n\r\n    return (hours * 3600) + (minutes * 60) + seconds + (milliseconds / 1000);\r\n}\r\n\r\n// Convert LastLapTime and BestLapTime to seconds\r\nvar lapTimeInSeconds = parseTimeToSeconds(LastLapTime);\r\nvar bestLapTimeInSeconds = parseTimeToSeconds(BestLapTime);\r\n\r\n// Store only **new laps** with valid lap times, but exclude first lap (CompletedLaps === 0 or 1)\r\nif (CompletedLaps > globalThis.LastStoredLap && lapTimeInSeconds > 0 && CompletedLaps > 1) {\r\n    globalThis.LapTimes.push(lapTimeInSeconds);\r\n    globalThis.LastStoredLap = CompletedLaps;\r\n}\r\n\r\n// **Store only valid laps for the best possible average**, also exclude first lap\r\nif (CompletedLaps > globalThis.LastStoredBestLap && lapTimeInSeconds > 0 && CompletedLaps > 1) {\r\n    // Exclude laps that are >= 101.5% of the best lap time\r\n    if (lapTimeInSeconds <= bestLapTimeInSeconds * 1.015) {\r\n        globalThis.BestPossibleLapTimes.push(lapTimeInSeconds);\r\n    }\r\n    globalThis.LastStoredBestLap = CompletedLaps;\r\n}\r\n\r\n// Calculate the actual average (including all valid laps)\r\nif (globalThis.LapTimes.length > 0) {\r\n    var total = globalThis.LapTimes.reduce((sum, time) => sum + time, 0);\r\n    var avg = total / globalThis.LapTimes.length;\r\n\r\n    // Format to mm:ss.fff\r\n    var minutes = Math.floor(avg / 60);\r\n    var seconds = Math.floor(avg % 60);\r\n    var milliseconds = Math.floor((avg - Math.floor(avg)) * 1000);\r\n\r\n    globalThis.AverageLapTime = \r\n        minutes.toString().padStart(2, '0') + \":\" +\r\n        seconds.toString().padStart(2, '0') + \".\" +\r\n        milliseconds.toString().padStart(3, '0');\r\n}\r\n\r\n// Calculate the best possible average (excluding laps >= 101.5% of best lap)\r\nif (globalThis.BestPossibleLapTimes.length > 0) {\r\n    var totalBest = globalThis.BestPossibleLapTimes.reduce((sum, time) => sum + time, 0);\r\n    var avgBest = totalBest / globalThis.BestPossibleLapTimes.length;\r\n\r\n    // Format to mm:ss.fff\r\n    var bestMinutes = Math.floor(avgBest / 60);\r\n    var bestSeconds = Math.floor(avgBest % 60);\r\n    var bestMilliseconds = Math.floor((avgBest - Math.floor(avgBest)) * 1000);\r\n\r\n    globalThis.BestPossibleAverage = \r\n        bestMinutes.toString().padStart(2, '0') + \":\" +\r\n        bestSeconds.toString().padStart(2, '0') + \".\" +\r\n        bestMilliseconds.toString().padStart(3, '0');\r\n}\r\n\r\n// Return the best possible average lap time\r\nreturn globalThis.BestPossibleAverage;"},"EvaluateBeforeScreenRoles":false}]},"DashboardDebugManager":{},"Version":2,"Id":"667fc3c5-1117-4fec-aa9f-5380f6a43d8c","BaseHeight":368,"BaseWidth":339,"BackgroundColor":"#FF000000","Screens":[{"RenderingSkip":0,"Name":"Screen","InGameScreen":true,"IdleScreen":true,"PitScreen":false,"ScreenId":"20693992-c589-4a8d-b521-5c77a4c3919f","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":""},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":680.0,"Left":0.0,"Top":0.0,"Visible":true,"Width":339.0,"IsFreezed":true,"Name":"Alignment","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Top":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"setsharedvalue('artiick', 'avgLaptime', $prop(\"variable.AvgTime\"))\r\n\r\nsetsharedvalue('artiick', 'fastAvgLaptime', $prop(\"variable.AvgTimeBest\"))"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":298.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":298.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar imageString = $prop(\"variable.LapHistoryBG\");\r\n\r\n// Split into individual entries (e.g., [\"0.PB-Fade\", \"1.OG-Fade\", ...])\r\nvar imageEntries = imageString.split(\" \");\r\n\r\n// Define the index we want (e.g., 5 for the 6th lap history slot)\r\nvar index = 3; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the image name\r\nvar imageName = \"OG-Fade\"; // Default fallback\r\nfor (var i = 0; i < imageEntries.length; i++) {\r\n    var entryParts = imageEntries[i].split(/\\.(.+)/); // Split on first \".\" only\r\n    if (parseInt(entryParts[0]) === index) {\r\n        imageName = entryParts[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the image name\r\nreturn imageName;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":16.1,"SpecialCharsWidth":7.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":138.3,"Top":302.5,"Visible":true,"Width":145.0,"Name":"LapTime","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar timeString = $prop(\"variable.LapHistoryTime\");\r\n\r\n// Split into individual entries (e.g., [\"0.00:17.602\", \"1.00:17.607\", ...])\r\nvar timeEntries = timeString.split(\" \");\r\n\r\n// Define the index we want (e.g., 0 for the most recent lap)\r\nvar index = 3; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the lap time\r\nvar lapTime = \"—\"; // Default fallback\r\nfor (var i = 0; i < timeEntries.length; i++) {\r\n    // Split only on the first \".\" to separate index from time\r\n    var entryParts = timeEntries[i].split(/\\.(.+)/); // Use regex to split on first \".\" only\r\n    if (parseInt(entryParts[0]) === index) {\r\n        lapTime = entryParts[1]; // Take everything after the first \".\"\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the lap time\r\nreturn lapTime;"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar colorString = $prop(\"variable.LapHistoryColor\");\r\n\r\n// Split into individual entries (e.g., [\"0.#FFFFFF\", \"1.#c573ff\", ...])\r\nvar colorEntries = colorString.split(\" \");\r\n\r\n// Define the index we want (e.g., 2 for the 3rd lap history slot)\r\nvar index = 3; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the color\r\nvar color = \"#FFFFFF\"; // Default fallback\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var entry = colorEntries[i].split(\".\");\r\n    if (parseInt(entry[0]) === index) {\r\n        color = entry[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the color\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":17.5,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":68.0,"Top":302.5,"Visible":true,"Width":48.0,"Name":"LapCount","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 4"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar colorString = $prop(\"variable.LapHistoryColor\");\r\n\r\n// Split into individual entries (e.g., [\"0.#FFFFFF\", \"1.#c573ff\", ...])\r\nvar colorEntries = colorString.split(\" \");\r\n\r\n// Define the index we want (e.g., 2 for the 3rd lap history slot)\r\nvar index = 3; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the color\r\nvar color = \"#FFFFFF\"; // Default fallback\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var entry = colorEntries[i].split(\".\");\r\n    if (parseInt(entry[0]) === index) {\r\n        color = entry[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the color\r\nreturn color;"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -4","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap] > 4 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":246.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":246.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar imageString = $prop(\"variable.LapHistoryBG\");\r\n\r\n// Split into individual entries (e.g., [\"0.PB-Fade\", \"1.OG-Fade\", ...])\r\nvar imageEntries = imageString.split(\" \");\r\n\r\n// Define the index we want (e.g., 5 for the 6th lap history slot)\r\nvar index = 2; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the image name\r\nvar imageName = \"OG-Fade\"; // Default fallback\r\nfor (var i = 0; i < imageEntries.length; i++) {\r\n    var entryParts = imageEntries[i].split(/\\.(.+)/); // Split on first \".\" only\r\n    if (parseInt(entryParts[0]) === index) {\r\n        imageName = entryParts[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the image name\r\nreturn imageName;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":16.1,"SpecialCharsWidth":7.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":138.3,"Top":250.5,"Visible":true,"Width":145.0,"Name":"LapTime","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar timeString = $prop(\"variable.LapHistoryTime\");\r\n\r\n// Split into individual entries (e.g., [\"0.00:17.602\", \"1.00:17.607\", ...])\r\nvar timeEntries = timeString.split(\" \");\r\n\r\n// Define the index we want (e.g., 0 for the most recent lap)\r\nvar index = 2; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the lap time\r\nvar lapTime = \"—\"; // Default fallback\r\nfor (var i = 0; i < timeEntries.length; i++) {\r\n    // Split only on the first \".\" to separate index from time\r\n    var entryParts = timeEntries[i].split(/\\.(.+)/); // Use regex to split on first \".\" only\r\n    if (parseInt(entryParts[0]) === index) {\r\n        lapTime = entryParts[1]; // Take everything after the first \".\"\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the lap time\r\nreturn lapTime;"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar colorString = $prop(\"variable.LapHistoryColor\");\r\n\r\n// Split into individual entries (e.g., [\"0.#FFFFFF\", \"1.#c573ff\", ...])\r\nvar colorEntries = colorString.split(\" \");\r\n\r\n// Define the index we want (e.g., 2 for the 3rd lap history slot)\r\nvar index = 2; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the color\r\nvar color = \"#FFFFFF\"; // Default fallback\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var entry = colorEntries[i].split(\".\");\r\n    if (parseInt(entry[0]) === index) {\r\n        color = entry[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the color\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":17.5,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":68.0,"Top":250.5,"Visible":true,"Width":48.0,"Name":"LapCount","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 3"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar colorString = $prop(\"variable.LapHistoryColor\");\r\n\r\n// Split into individual entries (e.g., [\"0.#FFFFFF\", \"1.#c573ff\", ...])\r\nvar colorEntries = colorString.split(\" \");\r\n\r\n// Define the index we want (e.g., 2 for the 3rd lap history slot)\r\nvar index = 2; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the color\r\nvar color = \"#FFFFFF\"; // Default fallback\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var entry = colorEntries[i].split(\".\");\r\n    if (parseInt(entry[0]) === index) {\r\n        color = entry[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the color\r\nreturn color;"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -3","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap] > 3 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":194.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":194.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar imageString = $prop(\"variable.LapHistoryBG\");\r\n\r\n// Split into individual entries (e.g., [\"0.PB-Fade\", \"1.OG-Fade\", ...])\r\nvar imageEntries = imageString.split(\" \");\r\n\r\n// Define the index we want (e.g., 5 for the 6th lap history slot)\r\nvar index = 1; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the image name\r\nvar imageName = \"OG-Fade\"; // Default fallback\r\nfor (var i = 0; i < imageEntries.length; i++) {\r\n    var entryParts = imageEntries[i].split(/\\.(.+)/); // Split on first \".\" only\r\n    if (parseInt(entryParts[0]) === index) {\r\n        imageName = entryParts[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the image name\r\nreturn imageName;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":16.1,"SpecialCharsWidth":7.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":138.3,"Top":198.5,"Visible":true,"Width":145.0,"Name":"LapTime","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar timeString = $prop(\"variable.LapHistoryTime\");\r\n\r\n// Split into individual entries (e.g., [\"0.00:17.602\", \"1.00:17.607\", ...])\r\nvar timeEntries = timeString.split(\" \");\r\n\r\n// Define the index we want (e.g., 0 for the most recent lap)\r\nvar index = 1; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the lap time\r\nvar lapTime = \"—\"; // Default fallback\r\nfor (var i = 0; i < timeEntries.length; i++) {\r\n    // Split only on the first \".\" to separate index from time\r\n    var entryParts = timeEntries[i].split(/\\.(.+)/); // Use regex to split on first \".\" only\r\n    if (parseInt(entryParts[0]) === index) {\r\n        lapTime = entryParts[1]; // Take everything after the first \".\"\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the lap time\r\nreturn lapTime;"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar colorString = $prop(\"variable.LapHistoryColor\");\r\n\r\n// Split into individual entries (e.g., [\"0.#FFFFFF\", \"1.#c573ff\", ...])\r\nvar colorEntries = colorString.split(\" \");\r\n\r\n// Define the index we want (e.g., 2 for the 3rd lap history slot)\r\nvar index = 1; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the color\r\nvar color = \"#FFFFFF\"; // Default fallback\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var entry = colorEntries[i].split(\".\");\r\n    if (parseInt(entry[0]) === index) {\r\n        color = entry[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the color\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":17.5,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":68.0,"Top":198.5,"Visible":true,"Width":48.0,"Name":"LapCount","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 2"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar colorString = $prop(\"variable.LapHistoryColor\");\r\n\r\n// Split into individual entries (e.g., [\"0.#FFFFFF\", \"1.#c573ff\", ...])\r\nvar colorEntries = colorString.split(\" \");\r\n\r\n// Define the index we want (e.g., 2 for the 3rd lap history slot)\r\nvar index = 1; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the color\r\nvar color = \"#FFFFFF\"; // Default fallback\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var entry = colorEntries[i].split(\".\");\r\n    if (parseInt(entry[0]) === index) {\r\n        color = entry[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the color\r\nreturn color;"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -2","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>2 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":142.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":142.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar imageString = $prop(\"variable.LapHistoryBG\");\r\n\r\n// Split into individual entries (e.g., [\"0.PB-Fade\", \"1.OG-Fade\", ...])\r\nvar imageEntries = imageString.split(\" \");\r\n\r\n// Define the index we want (e.g., 5 for the 6th lap history slot)\r\nvar index = 0; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the image name\r\nvar imageName = \"OG-Fade\"; // Default fallback\r\nfor (var i = 0; i < imageEntries.length; i++) {\r\n    var entryParts = imageEntries[i].split(/\\.(.+)/); // Split on first \".\" only\r\n    if (parseInt(entryParts[0]) === index) {\r\n        imageName = entryParts[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the image name\r\nreturn imageName;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":16.1,"SpecialCharsWidth":7.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":138.3,"Top":146.5,"Visible":true,"Width":145.0,"Name":"LapTime -1","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"","Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar timeString = $prop(\"variable.LapHistoryTime\");\r\n\r\n// Split into individual entries (e.g., [\"0.00:17.602\", \"1.00:17.607\", ...])\r\nvar timeEntries = timeString.split(\" \");\r\n\r\n// Define the index we want (e.g., 0 for the most recent lap)\r\nvar index = 0; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the lap time\r\nvar lapTime = \"—\"; // Default fallback\r\nfor (var i = 0; i < timeEntries.length; i++) {\r\n    // Split only on the first \".\" to separate index from time\r\n    var entryParts = timeEntries[i].split(/\\.(.+)/); // Use regex to split on first \".\" only\r\n    if (parseInt(entryParts[0]) === index) {\r\n        lapTime = entryParts[1]; // Take everything after the first \".\"\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the lap time\r\nreturn lapTime;"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar colorString = $prop(\"variable.LapHistoryColor\");\r\n\r\n// Split into individual entries (e.g., [\"0.#FFFFFF\", \"1.#c573ff\", ...])\r\nvar colorEntries = colorString.split(\" \");\r\n\r\n// Define the index we want (e.g., 2 for the 3rd lap history slot)\r\nvar index = 0; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the color\r\nvar color = \"#FFFFFF\"; // Default fallback\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var entry = colorEntries[i].split(\".\");\r\n    if (parseInt(entry[0]) === index) {\r\n        color = entry[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the color\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":17.5,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":68.0,"Top":146.5,"Visible":true,"Width":48.0,"Name":"LapCount -1","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap] - 1"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get the full string from the variable\r\nvar colorString = $prop(\"variable.LapHistoryColor\");\r\n\r\n// Split into individual entries (e.g., [\"0.#FFFFFF\", \"1.#c573ff\", ...])\r\nvar colorEntries = colorString.split(\" \");\r\n\r\n// Define the index we want (e.g., 2 for the 3rd lap history slot)\r\nvar index = 0; // Change this to 0-9 depending on the element\r\n\r\n// Find the entry for the specified index and extract the color\r\nvar color = \"#FFFFFF\"; // Default fallback\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var entry = colorEntries[i].split(\".\");\r\n    if (parseInt(entry[0]) === index) {\r\n        color = entry[1];\r\n        break;\r\n    }\r\n}\r\n\r\n// Return the color\r\nreturn color;"},"Mode":2}}}],"Visible":true,"Name":"Past Lap -1","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Opacity":{"Formula":{"Expression":"[CurrentLap]>1 ? '100' : '0'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":90.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":90.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FF00BDFF","HorizontalAlignment":0,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":16.1,"SpecialCharsWidth":7.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":138.3,"Top":94.5,"Visible":true,"Width":145.0,"Name":"Current","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"","Formula":{"JSExt":0,"Interpreter":1,"Expression":"//Artiick-ver 1.5.0: Computed CurrentLapTime \r\n\r\nvar rawSeconds = getsharedvalueordefault(\"artiick\", \"currentLapRaw\", \"0\");\r\n\r\n// Handle invalid values\r\nif (rawSeconds <= 0 || !isFinite(rawSeconds)) {\r\n    return \"--:--.---\";\r\n}\r\n\r\n// Extract minutes, seconds, and milliseconds\r\nvar totalSeconds = Math.floor(rawSeconds);\r\nvar minutes = Math.floor(totalSeconds / 60);\r\nvar seconds = totalSeconds % 60;\r\nvar milliseconds = Math.round((rawSeconds - totalSeconds) * 1000);\r\n\r\n// Format with leading zeros\r\nvar formattedMinutes = minutes.toString().padStart(2, '0');\r\nvar formattedSeconds = seconds.toString().padStart(2, '0');\r\nvar formattedMilliseconds = milliseconds.toString().padStart(3, '0');\r\n\r\nreturn formattedMinutes + ':' + formattedSeconds + '.' + formattedMilliseconds;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Position-Number","FontSize":38.0,"Text":"99","TextColor":"#FF00BDFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":17.5,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":68.0,"Top":94.5,"Visible":true,"Width":48.0,"Name":"Lap Count","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"Expression":"[CurrentLap]"},"Mode":2}}}],"Visible":true,"Name":"Current Lap","RenderingSkip":0,"MinimumRefreshIntervalMS":1.0,"Bindings":{"Visible":{"Formula":{"Expression":"timespantoseconds([CurrentLapTime])>0"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"OG-Fade","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":119.0,"Top":20.0,"Visible":true,"Width":200.0,"Name":"Fades","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Square","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":50.0,"Left":64.1,"Top":20.0,"Visible":true,"Width":55.0,"Name":"Squares","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont FuelTire-Num-R","FontSize":38.0,"Text":"AVG","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":34.0,"Left":68.3,"Top":30.3,"Visible":false,"Width":48.0,"Name":"AVG","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"TextColor":{"Formula":{"Expression":"changed(3000, [CurrentLap]) ? '#00ff7f' : '#ffffff'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":3,"ShadowColor":"#A1000000","Font":"ForzaFont Text","FontSize":38.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":16.1,"SpecialCharsWidth":7.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":138.3,"Top":24.5,"Visible":true,"Width":145.0,"Name":"AVG-time","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"TextColor":{"Formula":{"Expression":"changed(3000, [CurrentLap]) ? '#00ff7f' : '#ffffff'"},"Mode":2},"Visible":{"Formula":{"Expression":"!changed(3000,[CompletedLaps]>0) and timespantoseconds([BestLapTime])!=0"},"Mode":2},"Text":{"Formula":{"Expression":"changed(3000, [CompletedLaps]) ? [variable.AvgTimeBest] : [variable.AvgTime]"},"Mode":2},"Top":{"Formula":{"Expression":"30.3-5.8"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowColor":"#A1000000","Font":"ForzaFont FuelTire-Num-R","FontSize":38.0,"Text":"A","TextColor":"#A1000000","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":20.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":69.3,"Top":26.6,"Visible":true,"Width":21.0,"Name":"A2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowColor":"#A1000000","Font":"ForzaFont FuelTire-Num-R","FontSize":38.0,"Text":"G","TextColor":"#A1000000","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":20.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":98.3,"Top":26.6,"Visible":true,"Width":21.0,"Name":"G2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowColor":"#A1000000","Font":"ForzaFont FuelTire-Num-R","FontSize":38.0,"Text":"V","TextColor":"#A1000000","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":20.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":82.9,"Top":26.6,"Visible":true,"Width":21.0,"Name":"V2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowColor":"#A1000000","Font":"ForzaFont FuelTire-Num-R","FontSize":38.0,"Text":"A","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":20.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":67.3,"Top":24.5,"Visible":true,"Width":21.0,"Name":"A","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"TextColor":{"Formula":{"Expression":"changed(3000, [CurrentLap]) ? '#00ff7f' : '#ffffff'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowColor":"#A1000000","Font":"ForzaFont FuelTire-Num-R","FontSize":38.0,"Text":"V","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":20.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":80.9,"Top":24.5,"Visible":true,"Width":21.0,"Name":"V","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"TextColor":{"Formula":{"Expression":"changed(3000, [CurrentLap]) ? '#00ff7f' : '#ffffff'"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowColor":"#A1000000","Font":"ForzaFont FuelTire-Num-R","FontSize":38.0,"Text":"G","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":20.0,"BackgroundColor":"#00FFFFFF","Height":40.0,"Left":96.3,"Top":24.5,"Visible":true,"Width":21.0,"Name":"G","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"TextColor":{"Formula":{"Expression":"changed(3000, [CurrentLap]) ? '#00ff7f' : '#ffffff'"},"Mode":2}}}],"Visible":true,"Name":"AVG txt","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0}],"Visible":true,"Name":"Average Laptime","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Visible":{"Formula":{"Expression":"[CompletedLaps]>=1"},"Mode":2}}}],"Visible":true,"Name":"Lap History","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"if([CurrentLap] > 1 && timespantoseconds([LastLapTime]) = 0, 0, 1)"},"Mode":2}}}],"MinimumRefreshIntervalMS":0.0}],"SnapToGrid":false,"HideLabels":true,"ShowForeground":true,"ForegroundOpacity":100.0,"ShowBackground":true,"BackgroundOpacity":100.0,"ShowBoundingRectangles":false,"GridSize":10,"Images":[{"Name":"Square","Extension":".png","Modified":false,"Optimized":true,"Width":132,"Height":120,"Length":2157,"MD5":"4a03d674ab4ef6e260e4428f09386ad2"},{"Name":"OG-Fade","Extension":".png","Modified":false,"Optimized":true,"Width":480,"Height":120,"Length":83422,"MD5":"2e045e4a4c82ba1411004c2f07a2310b"},{"Name":"BL-Fade","Extension":".png","Modified":false,"Optimized":true,"Length":87391,"MD5":"34da398c243b2ebb9bb709c6e11737c8"},{"Name":"PB-Fade","Extension":".png","Modified":false,"Optimized":true,"Length":87415,"MD5":"bc6dd4caf67970193d4ba97477d8c04f"},{"Name":"GL-Fade","Extension":".png","Modified":false,"Optimized":true,"Length":87242,"MD5":"48481bb2a8231714f8581aa2fbd1dbaa"},{"Name":"DT-Fade","Extension":".png","Modified":false,"Optimized":true,"Length":105316,"MD5":"7dd3aab0b0d4ed23a51c59255a2b43c1"}],"Metadata":{"ScreenCount":1.0,"InGameScreensIndexs":[0],"IdleScreensIndexs":[0],"MainPreviewIndex":0,"IsOverlay":true,"OverlaySizeWarning":false,"MetadataVersion":2.0,"EnableOnDashboardMessaging":true,"PitScreensIndexs":[],"SimHubVersion":"9.8.1","Title":"Art-Lap-History-v1a","Author":"Artiick","Width":339.0,"Height":368.0,"DashboardVersion":""},"ShowOnScreenControls":true,"IsOverlay":true,"EnableClickThroughOverlay":true,"EnableOnDashboardMessaging":true,"UseStrictJSIsolation":true,"UseStrictJSIsolationWarning":true}