{"Variables":{"DashboardVariables":[]},"DashboardDebugManager":{},"Version":2,"Id":"43bc64b1-ab9a-40b8-8f05-cc09d5002755","BaseHeight":410,"BaseWidth":248,"BackgroundColor":"#FF000000","Screens":[{"RenderingSkip":0,"Name":"Screen","InGameScreen":true,"IdleScreen":true,"PitScreen":false,"ScreenId":"139918fb-d21d-4121-ba15-e406ef6346d5","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":""},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#FFFF0000","Height":410.0,"Left":0.0,"Top":0.0,"Visible":false,"Width":248.0,"Name":"Alignment","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FF00FFFF","BorderStyle":{"RadiusTopLeft":9,"RadiusTopRight":9,"RadiusBottomLeft":9,"RadiusBottomRight":9},"Height":150.0,"Left":0.0,"Opacity":25.0,"Top":225.0,"Visible":true,"Width":114.0,"Name":"BG","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearRearLeft') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderTop":4,"BorderBottom":4,"BorderLeft":4,"BorderRight":4,"RadiusTopLeft":4,"RadiusTopRight":4,"RadiusBottomLeft":4,"RadiusBottomRight":4,"Bindings":{"BorderColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearRearLeft') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}},"Height":150.0,"Left":0.0,"Top":225.0,"Visible":true,"Width":114.0,"Name":"Border","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#99000000","Font":"ForzaFont FuelTire-Num-R","FontSize":50.0,"Text":"44.4%","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":65.0,"Left":5.4,"Top":273.0,"Visible":true,"Width":103.0,"Name":"Wear%","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0.0'%'","Formula":{"Expression":"if(\r\n    [CompletedLaps] > 1 && changed(3000, [CurrentLap]), \r\n    [LastLapTyreWearRearLeft], \r\n    [GameRawData.TireWearRearLeft] * 100\r\n)"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearRearLeft') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}}],"Visible":true,"Name":"RL","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FF00FFFF","BorderStyle":{"RadiusTopLeft":9,"RadiusTopRight":9,"RadiusBottomLeft":9,"RadiusBottomRight":9},"Height":150.0,"Left":134.0,"Opacity":25.0,"Top":225.0,"Visible":true,"Width":114.0,"Name":"BG","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearRearRight') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderTop":4,"BorderBottom":4,"BorderLeft":4,"BorderRight":4,"RadiusTopLeft":4,"RadiusTopRight":4,"RadiusBottomLeft":4,"RadiusBottomRight":4,"Bindings":{"BorderColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearRearRight') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}},"Height":150.0,"Left":134.0,"Top":225.0,"Visible":true,"Width":114.0,"Name":"Border","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#99000000","Font":"ForzaFont FuelTire-Num-R","FontSize":50.0,"Text":"44.4%","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":65.0,"Left":139.5,"Top":273.0,"Visible":true,"Width":103.0,"Name":"Wear%","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0.0'%'","Formula":{"Expression":"if(\r\n    [CompletedLaps] > 1 && changed(3000, [CurrentLap]), \r\n    [LastLapTyreWearRearRight], \r\n    [GameRawData.TireWearRearRight] * 100\r\n)"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearRearRight') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}}],"Visible":true,"Name":"RR","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FF00FFFF","BorderStyle":{"RadiusTopLeft":9,"RadiusTopRight":9,"RadiusBottomLeft":9,"RadiusBottomRight":9},"Height":150.0,"Left":134.0,"Opacity":25.0,"Top":35.0,"Visible":true,"Width":114.0,"Name":"BG","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearFrontRight') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderTop":4,"BorderBottom":4,"BorderLeft":4,"BorderRight":4,"RadiusTopLeft":4,"RadiusTopRight":4,"RadiusBottomLeft":4,"RadiusBottomRight":4,"Bindings":{"BorderColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearFrontRight') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}},"Height":150.0,"Left":134.0,"Top":35.0,"Visible":true,"Width":114.0,"Name":"Border","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#99000000","Font":"ForzaFont FuelTire-Num-R","FontSize":50.0,"Text":"44.4%","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":65.0,"Left":139.5,"Top":83.0,"Visible":true,"Width":103.0,"Name":"Wear%","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0.0'%'","Formula":{"Expression":"if(\r\n    [CompletedLaps] > 1 && changed(3000, [CurrentLap]), \r\n    [LastLapTyreWearFrontRight], \r\n    [GameRawData.TireWearFrontRight] * 100\r\n)"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearFrontRight') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}}],"Visible":true,"Name":"FR","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FF00FFFF","BorderStyle":{"RadiusTopLeft":9,"RadiusTopRight":9,"RadiusBottomLeft":9,"RadiusBottomRight":9},"Height":150.0,"Left":0.0,"Opacity":25.0,"Top":35.0,"Visible":true,"Width":114.0,"Name":"BG","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearFrontLeft') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#00FFFFFF","BorderStyle":{"BorderTop":4,"BorderBottom":4,"BorderLeft":4,"BorderRight":4,"RadiusTopLeft":4,"RadiusTopRight":4,"RadiusBottomLeft":4,"RadiusBottomRight":4,"Bindings":{"BorderColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearFrontLeft') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}},"Height":150.0,"Left":0.0,"Top":35.0,"Visible":true,"Width":114.0,"Name":"Border","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#99000000","Font":"ForzaFont FuelTire-Num-R","FontSize":50.0,"Text":"44.4%","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":65.0,"Left":5.4,"Top":83.0,"Visible":true,"Width":103.0,"Name":"Wear%","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0.0'%'","Formula":{"Expression":"if(\r\n    [CompletedLaps] > 1 && changed(3000, [CurrentLap]), \r\n    [LastLapTyreWearFrontLeft], \r\n    [GameRawData.TireWearFrontLeft] * 100\r\n)"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var tireWear = $prop('GameRawData.TireWearFrontLeft') * 100;\r\n\r\n// Ensure tireWear is a valid number and round to 1 decimal\r\nif (isNaN(tireWear) || tireWear < 0) {\r\n    return \"#FFFFFF\"; // Default to white if invalid input\r\n}\r\ntireWear = Math.round(tireWear * 10) / 10;  // Round to 0.1 steps\r\n\r\n// Define tire wear thresholds\r\nconst freshThreshold = 0;      // White\r\nconst greenThreshold = 15;     // Green to Yellow starts\r\nconst warnThreshold = 40;      // Yellow to Red starts\r\nconst dangerThreshold = 55;    // Red to Dark Red starts\r\nconst criticalThreshold = 60;  // Maximum wear (stays dark red)\r\n\r\n// Define color stops in RGB format\r\nconst colors = {\r\n    fresh: { r: 255, g: 255, b: 255 },  // #FFFFFF\r\n    good: { r: 0, g: 255, b: 106 },     // #00FF6A\r\n    warn: { r: 255, g: 255, b: 0 },     // #FFFF00\r\n    danger: { r: 255, g: 0, b: 51 },    // #FF0033\r\n    critical: { r: 77, g: 0, b: 0 }     // #4D0000\r\n};\r\n\r\n// Helper function to interpolate between two colors\r\nfunction interpolateColor(color1, color2, factor) {\r\n    return {\r\n        r: Math.round(color1.r + (color2.r - color1.r) * factor),\r\n        g: Math.round(color1.g + (color2.g - color1.g) * factor),\r\n        b: Math.round(color1.b + (color2.b - color1.b) * factor)\r\n    };\r\n}\r\n\r\nlet finalColor;\r\n\r\nif (tireWear >= criticalThreshold) {\r\n    finalColor = colors.critical;\r\n} else if (tireWear >= dangerThreshold) {\r\n    let factor = (tireWear - dangerThreshold) / (criticalThreshold - dangerThreshold);\r\n    finalColor = interpolateColor(colors.danger, colors.critical, factor);\r\n} else if (tireWear >= warnThreshold) {\r\n    let factor = (tireWear - warnThreshold) / (dangerThreshold - warnThreshold);\r\n    finalColor = interpolateColor(colors.warn, colors.danger, factor);\r\n} else if (tireWear >= greenThreshold) {\r\n    let factor = (tireWear - greenThreshold) / (warnThreshold - greenThreshold);\r\n    finalColor = interpolateColor(colors.good, colors.warn, factor);\r\n} else if (tireWear > freshThreshold) {\r\n    let factor = tireWear / greenThreshold;\r\n    finalColor = interpolateColor(colors.fresh, colors.good, factor);\r\n} else {\r\n    finalColor = colors.fresh;\r\n}\r\n\r\n// Convert RGB to HEX with proper handling of all cases\r\nfunction rgbToHex(r, g, b) {\r\n    // Ensure values are between 0 and 255\r\n    r = Math.max(0, Math.min(255, Math.floor(r)));\r\n    g = Math.max(0, Math.min(255, Math.floor(g)));\r\n    b = Math.max(0, Math.min(255, Math.floor(b)));\r\n    \r\n    // Convert to hex and pad with zeros\r\n    const rHex = r.toString(16).padStart(2, '0');\r\n    const gHex = g.toString(16).padStart(2, '0');\r\n    const bHex = b.toString(16).padStart(2, '0');\r\n    \r\n    return `#${rHex}${gHex}${bHex}`.toUpperCase();\r\n}\r\n\r\nreturn rgbToHex(finalColor.r, finalColor.g, finalColor.b);"},"Mode":2}}}],"Visible":true,"Name":"FL","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0}],"Visible":true,"Name":"Tires Wear","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Corner-TL","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":18.0,"Left":55.0,"Top":13.0,"Visible":true,"Width":27.0,"Name":"FancyBits","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Corner-TR","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":18.0,"Left":166.0,"Top":13.0,"Visible":true,"Width":27.0,"Name":"FancyBits2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Corner-BR","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":18.0,"Left":166.0,"Top":379.0,"Visible":true,"Width":27.0,"Name":"FancyBits3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Corner-BL","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":18.0,"Left":55.0,"Top":379.0,"Visible":true,"Width":27.0,"Name":"FancyBits4","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Center-L","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":32.0,"Left":55.0,"Top":189.0,"Visible":true,"Width":27.0,"Name":"FancyBits5","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"Center-R","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":32.0,"Left":166.0,"Top":189.0,"Visible":true,"Width":27.0,"Name":"FancyBits6","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0}],"Visible":true,"Name":"Fancy Shid","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#99000000","Font":"ForzaFont FuelTire-Num-R","FontSize":41.400000000000006,"Text":"99.9%","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":48.0,"Left":79.1,"Top":372.7,"Visible":true,"Width":90.0,"Name":"AVG Wear% Rear","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0.0'%'","Formula":{"JSExt":0,"Interpreter":1,"Expression":"var CompletedLaps = $prop('CompletedLaps');\r\nvar wearRL = $prop('LastLapTyreWearRearLeft');\r\nvar wearRR = $prop('LastLapTyreWearRearRight');\r\nvar fuelLastLapConsumption = $prop('DataCorePlugin.Computed.Fuel_LastLapConsumption');\r\n\r\n// Initialize global variables if not set\r\nif (typeof globalThis.latestValidRearWear === 'undefined') {\r\n    globalThis.latestValidRearWear = 0;  // Store the latest valid rear tire wear average\r\n    globalThis.CompletedLapStoredRear = 0;\r\n}\r\n\r\n// Reset on race start or if both conditions are met\r\nif (CompletedLaps === 0 && fuelLastLapConsumption === 0) {\r\n    globalThis.latestValidRearWear = 0;\r\n    globalThis.CompletedLapStoredRear = 0;\r\n    return 0;\r\n}\r\n\r\n// Calculate current average rear tire wear\r\nvar currentRearWear = (wearRL + wearRR) / 2;\r\n\r\n// Check if we have a new lap\r\nif (CompletedLaps > globalThis.CompletedLapStoredRear) {\r\n    // Only store non-zero values\r\n    if (currentRearWear > 0) {\r\n        // Update the latest valid rear tire wear\r\n        globalThis.latestValidRearWear = currentRearWear;\r\n    }\r\n    \r\n    globalThis.CompletedLapStoredRear = CompletedLaps;\r\n}\r\n\r\n// If current rear wear is 0 (pit stop), return the latest valid rear tire wear\r\nif (currentRearWear === 0) {\r\n    return globalThis.latestValidRearWear;\r\n}\r\n\r\n// Return current rear wear if it's valid, otherwise 0\r\nreturn currentRearWear || 0;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#99000000","Font":"ForzaFont FuelTire-Num-R","FontSize":41.400000000000006,"Text":"99.9%","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":48.0,"Left":79.1,"Top":182.6,"Visible":true,"Width":90.0,"Name":"AVG Wear% Overall","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0.0'%'","Formula":{"JSExt":0,"Interpreter":1,"Expression":"var CompletedLaps = $prop('CompletedLaps');\r\nvar wearFL = $prop('LastLapTyreWearFrontLeft');\r\nvar wearFR = $prop('LastLapTyreWearFrontRight');\r\nvar wearRL = $prop('LastLapTyreWearRearLeft');\r\nvar wearRR = $prop('LastLapTyreWearRearRight');\r\nvar sessionOdo = $prop('SessionOdo'); // Get the session odometer value\r\n\r\n// Initialize global variables if not set\r\nif (typeof globalThis.latestValidWear === 'undefined') {\r\n    globalThis.latestValidWear = 0;  // Store the latest valid wear average\r\n    globalThis.CompletedLapStored = 0;\r\n}\r\n\r\n// Reset on race start or if SessionOdo is less than 0.1\r\nif (CompletedLaps === 0 || sessionOdo < 0.1) {\r\n    globalThis.latestValidWear = 0;\r\n    globalThis.CompletedLapStored = 0;\r\n    return 0;\r\n}\r\n\r\n// Calculate current average wear\r\nvar currentWear = (wearFL + wearFR + wearRL + wearRR) / 4;\r\n\r\n// Check if we have a new lap\r\nif (CompletedLaps > globalThis.CompletedLapStored) {\r\n    // Only store non-zero values\r\n    if (currentWear > 0) {\r\n        // Update the latest valid wear\r\n        globalThis.latestValidWear = currentWear;\r\n    }\r\n    \r\n    globalThis.CompletedLapStored = CompletedLaps;\r\n}\r\n\r\n// If current wear is 0 (pit stop), return the latest valid wear\r\nif (currentWear === 0) {\r\n    return globalThis.latestValidWear;\r\n}\r\n\r\n// Return current wear if it's valid, otherwise 0\r\nreturn currentWear || 0;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#99000000","Font":"ForzaFont FuelTire-Num-R","FontSize":41.400000000000006,"Text":"99.9%","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":48.0,"Left":79.1,"Top":-7.1,"Visible":true,"Width":90.0,"Name":"AVG Wear% Front","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0.0'%'","Formula":{"JSExt":0,"Interpreter":1,"Expression":"var CompletedLaps = $prop('CompletedLaps');\r\nvar wearFL = $prop('LastLapTyreWearFrontLeft');\r\nvar wearFR = $prop('LastLapTyreWearFrontRight');\r\nvar fuelLastLapConsumption = $prop('DataCorePlugin.Computed.Fuel_LastLapConsumption');\r\n\r\n// Initialize global variables if not set\r\nif (typeof globalThis.latestValidFrontWear === 'undefined') {\r\n    globalThis.latestValidFrontWear = 0;  // Store the latest valid front tire wear average\r\n    globalThis.CompletedLapStoredFront = 0;\r\n}\r\n\r\n// Reset on race start or if both conditions are met\r\nif (CompletedLaps === 0 && fuelLastLapConsumption === 0) {\r\n    globalThis.latestValidFrontWear = 0;\r\n    globalThis.CompletedLapStoredFront = 0;\r\n    return 0;\r\n}\r\n\r\n// Calculate current average front tire wear\r\nvar currentFrontWear = (wearFL + wearFR) / 2;\r\n\r\n// Check if we have a new lap\r\nif (CompletedLaps > globalThis.CompletedLapStoredFront) {\r\n    // Only store non-zero values\r\n    if (currentFrontWear > 0) {\r\n        // Update the latest valid front tire wear\r\n        globalThis.latestValidFrontWear = currentFrontWear;\r\n    }\r\n    \r\n    globalThis.CompletedLapStoredFront = CompletedLaps;\r\n}\r\n\r\n// If current front wear is 0 (pit stop), return the latest valid front tire wear\r\nif (currentFrontWear === 0) {\r\n    return globalThis.latestValidFrontWear;\r\n}\r\n\r\n// Return current front wear if it's valid, otherwise 0\r\nreturn currentFrontWear || 0;"},"Mode":2}}}],"Visible":true,"Name":"Wear avgs","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"[CompletedLaps] > 1"},"Mode":2}}}],"Visible":true,"Name":"Tire Wear","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"timespantoseconds([CurrentLapTime])>0"},"Mode":2}}}],"MinimumRefreshIntervalMS":0.0}],"SnapToGrid":false,"HideLabels":true,"ShowForeground":true,"ForegroundOpacity":100.0,"ShowBackground":true,"BackgroundOpacity":100.0,"ShowBoundingRectangles":false,"GridSize":10,"Images":[{"Name":"Center-L","Extension":".png","Modified":false,"Optimized":true,"Width":48,"Height":56,"Length":798,"MD5":"41c01ffd47d29ab081114ff8442b39da"},{"Name":"Center-R","Extension":".png","Modified":false,"Optimized":true,"Width":48,"Height":56,"Length":753,"MD5":"1c825ef27e7f68f892f718d2391f6e1a"},{"Name":"Corner-TR","Extension":".png","Modified":false,"Optimized":true,"Width":48,"Height":31,"Length":526,"MD5":"bd2f7fa96be7b0c91c63185c3fd2657b"},{"Name":"Corner-TL","Extension":".png","Modified":false,"Optimized":true,"Width":48,"Height":31,"Length":556,"MD5":"639c4e7ebaf83c9599da1a21acbb4da5"},{"Name":"Corner-BR","Extension":".png","Modified":false,"Optimized":true,"Width":48,"Height":31,"Length":526,"MD5":"20c9df831ba42b7161bbef8e99840c41"},{"Name":"Corner-BL","Extension":".png","Modified":false,"Optimized":true,"Width":48,"Height":31,"Length":566,"MD5":"fc3449f9eab1e665480ccd7b7c893e6e"}],"Metadata":{"ScreenCount":1.0,"InGameScreensIndexs":[0],"IdleScreensIndexs":[0],"MainPreviewIndex":0,"IsOverlay":true,"OverlaySizeWarning":false,"MetadataVersion":2.0,"EnableOnDashboardMessaging":true,"PitScreensIndexs":[],"SimHubVersion":"9.7.2","Title":"Art-Tire-Wear","Author":"Artiick","Width":248.0,"Height":410.0,"DashboardVersion":""},"ShowOnScreenControls":true,"IsOverlay":true,"EnableClickThroughOverlay":true,"EnableOnDashboardMessaging":true}