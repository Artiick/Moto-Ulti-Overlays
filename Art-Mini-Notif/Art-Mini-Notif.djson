{"Variables":{"DashboardVariables":[{"VariableName":"fuelRectangleLeft","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"//Artiick-ver 1.5.4: Rectangle pos left (fuel)\r\n// Get fuel and lap data\r\nvar fuel = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nvar laps = $prop(\"CompletedLaps\");\r\nvar now = Date.now();\r\n\r\n// Reset all tracking if session just started\r\nif (laps === 0) {\r\n    globalThis.fuelAlert = undefined;\r\n    return 401;\r\n}\r\n\r\n// Initialize state once\r\nif (typeof globalThis.fuelAlert === 'undefined') {\r\n    globalThis.fuelAlert = {\r\n        lastTriggerTime: 0,\r\n        lastThreshold: null\r\n    };\r\n}\r\n\r\nvar state = globalThis.fuelAlert;\r\n\r\n// Define thresholds and tolerance\r\nvar thresholds = [5.4, 3.3, 1.2];\r\nvar tolerance = 0.05;\r\nvar hitThreshold = null;\r\n\r\n// Check for matching threshold\r\nfor (var i = 0; i < thresholds.length; i++) {\r\n    if (Math.abs(fuel - thresholds[i]) <= tolerance) {\r\n        hitThreshold = thresholds[i];\r\n        break;\r\n    }\r\n}\r\n\r\n// Trigger if new or expired\r\nif (hitThreshold !== null) {\r\n    if (state.lastThreshold !== hitThreshold || (now - state.lastTriggerTime) > 10000) {\r\n        state.lastThreshold = hitThreshold;\r\n        state.lastTriggerTime = now;\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Maintain alert for 10 seconds\r\nif ((now - state.lastTriggerTime) <= 10000) {\r\n    return 0;\r\n}\r\n\r\n// Default output\r\nreturn 401;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"fuelLapstxt","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"//Artiick-ver 1.5.4: Rectangle laps left text (fuel)\r\n// Get fuel and lap data\r\nvar fuel = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nvar laps = $prop(\"CompletedLaps\");\r\nvar now = Date.now();\r\n\r\n// Reset all tracking if session just started\r\nif (laps === 0) {\r\n    globalThis.fuelAlert = undefined;\r\n    return 430;\r\n}\r\n\r\n// Initialize state once\r\nif (typeof globalThis.fuelAlert === 'undefined') {\r\n    globalThis.fuelAlert = {\r\n        lastTriggerTime: 0,\r\n        lastThreshold: null\r\n    };\r\n}\r\n\r\nvar state = globalThis.fuelAlert;\r\n\r\n// Define thresholds and tolerance\r\nvar thresholds = [5.4, 3.3, 1.2];\r\nvar tolerance = 0.05;\r\nvar hitThreshold = null;\r\n\r\n// Check for matching threshold\r\nfor (var i = 0; i < thresholds.length; i++) {\r\n    if (Math.abs(fuel - thresholds[i]) <= tolerance) {\r\n        hitThreshold = thresholds[i];\r\n        break;\r\n    }\r\n}\r\n\r\n// Trigger if new or expired\r\nif (hitThreshold !== null) {\r\n    if (state.lastThreshold !== hitThreshold || (now - state.lastTriggerTime) > 10000) {\r\n        state.lastThreshold = hitThreshold;\r\n        state.lastTriggerTime = now;\r\n        return 29;\r\n    }\r\n}\r\n\r\n// Maintain alert for 10 seconds\r\nif ((now - state.lastTriggerTime) <= 10000) {\r\n    return 29;\r\n}\r\n\r\n// Default output\r\nreturn 430;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"fuelLapsnum","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"//Artiick-ver 1.5.4: Rectangle laps left number (fuel)\r\n// Get fuel and lap data\r\nvar fuel = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nvar laps = $prop(\"CompletedLaps\");\r\nvar now = Date.now();\r\n\r\n// Reset all tracking if session just started\r\nif (laps === 0) {\r\n    globalThis.fuelAlert = undefined;\r\n    return 406.8;\r\n}\r\n\r\n// Initialize state once\r\nif (typeof globalThis.fuelAlert === 'undefined') {\r\n    globalThis.fuelAlert = {\r\n        lastTriggerTime: 0,\r\n        lastThreshold: null\r\n    };\r\n}\r\n\r\nvar state = globalThis.fuelAlert;\r\n\r\n// Define thresholds and tolerance\r\nvar thresholds = [5.4, 3.3, 1.2];\r\nvar tolerance = 0.05;\r\nvar hitThreshold = null;\r\n\r\n// Check for matching threshold\r\nfor (var i = 0; i < thresholds.length; i++) {\r\n    if (Math.abs(fuel - thresholds[i]) <= tolerance) {\r\n        hitThreshold = thresholds[i];\r\n        break;\r\n    }\r\n}\r\n\r\n// Trigger if new or expired\r\nif (hitThreshold !== null) {\r\n    if (state.lastThreshold !== hitThreshold || (now - state.lastTriggerTime) > 10000) {\r\n        state.lastThreshold = hitThreshold;\r\n        state.lastTriggerTime = now;\r\n        return 5.8;\r\n    }\r\n}\r\n\r\n// Maintain alert for 10 seconds\r\nif ((now - state.lastTriggerTime) <= 10000) {\r\n    return 5.8;\r\n}\r\n\r\n// Default output\r\nreturn 406.8;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"fuelLapsfuelrem","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"//Artiick-ver 1.5.4: Rectangle laps left \"fuel ramining\" (fuel)\r\n// Get fuel and lap data\r\nvar fuel = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nvar laps = $prop(\"CompletedLaps\");\r\nvar now = Date.now();\r\n\r\n// Reset all tracking if session just started\r\nif (laps === 0) {\r\n    globalThis.fuelAlert = undefined;\r\n    return 630;\r\n}\r\n\r\n// Initialize state once\r\nif (typeof globalThis.fuelAlert === 'undefined') {\r\n    globalThis.fuelAlert = {\r\n        lastTriggerTime: 0,\r\n        lastThreshold: null\r\n    };\r\n}\r\n\r\nvar state = globalThis.fuelAlert;\r\n\r\n// Define thresholds and tolerance\r\nvar thresholds = [5.4, 3.3, 1.2];\r\nvar tolerance = 0.05;\r\nvar hitThreshold = null;\r\n\r\n// Check for matching threshold\r\nfor (var i = 0; i < thresholds.length; i++) {\r\n    if (Math.abs(fuel - thresholds[i]) <= tolerance) {\r\n        hitThreshold = thresholds[i];\r\n        break;\r\n    }\r\n}\r\n\r\n// Trigger if new or expired\r\nif (hitThreshold !== null) {\r\n    if (state.lastThreshold !== hitThreshold || (now - state.lastTriggerTime) > 10000) {\r\n        state.lastThreshold = hitThreshold;\r\n        state.lastTriggerTime = now;\r\n        return 229;\r\n    }\r\n}\r\n\r\n// Maintain alert for 10 seconds\r\nif ((now - state.lastTriggerTime) <= 10000) {\r\n    return 229;\r\n}\r\n\r\n// Default output\r\nreturn 630;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"fuelLapsOpacity","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"//Artiick-ver 1.5.4: Rectangle laps left \"fuel ramining\" (fuel)\r\n// Get fuel and lap data\r\nvar fuel = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nvar laps = $prop(\"CompletedLaps\");\r\nvar now = Date.now();\r\n\r\n// Reset all tracking if session just started\r\nif (laps === 0) {\r\n    globalThis.fuelAlert = undefined;\r\n    return 0;\r\n}\r\n\r\n// Initialize state once\r\nif (typeof globalThis.fuelAlert === 'undefined') {\r\n    globalThis.fuelAlert = {\r\n        lastTriggerTime: 0,\r\n        lastThreshold: null\r\n    };\r\n}\r\n\r\nvar state = globalThis.fuelAlert;\r\n\r\n// Define thresholds and tolerance\r\nvar thresholds = [5.4, 3.3, 1.2];\r\nvar tolerance = 0.05;\r\nvar hitThreshold = null;\r\n\r\n// Check for matching threshold\r\nfor (var i = 0; i < thresholds.length; i++) {\r\n    if (Math.abs(fuel - thresholds[i]) <= tolerance) {\r\n        hitThreshold = thresholds[i];\r\n        break;\r\n    }\r\n}\r\n\r\n// Trigger if new or expired\r\nif (hitThreshold !== null) {\r\n    if (state.lastThreshold !== hitThreshold || (now - state.lastTriggerTime) > 10000) {\r\n        state.lastThreshold = hitThreshold;\r\n        state.lastTriggerTime = now;\r\n        return 100;\r\n    }\r\n}\r\n\r\n// Maintain alert for 10 seconds\r\nif ((now - state.lastTriggerTime) <= 10000) {\r\n    return 100;\r\n}\r\n\r\n// Default output\r\nreturn 0;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"tiresRectLeft","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.5: Tire wear alert rectangle left (any tire)\r\n// Get tire wear data (percent-based)\r\nvar fl = ($prop(\"GameRawData.TireWearFrontLeft\") || 0) * 100;\r\nvar fr = ($prop(\"GameRawData.TireWearFrontRight\") || 0) * 100;\r\nvar rl = ($prop(\"GameRawData.TireWearRearLeft\") || 0) * 100;\r\nvar rr = ($prop(\"GameRawData.TireWearRearRight\") || 0) * 100;\r\nvar now = Date.now();\r\n\r\n// Reset if session hasn't started\r\nif ($prop(\"CompletedLaps\") === 0) {\r\n    globalThis.tireWearAlert = undefined;\r\n    return 401;\r\n}\r\n\r\n// Initialize once\r\nif (typeof globalThis.tireWearAlert === 'undefined') {\r\n    globalThis.tireWearAlert = {\r\n        lastTriggerTime: 0,\r\n        lastThreshold: null\r\n    };\r\n}\r\n\r\nvar state = globalThis.tireWearAlert;\r\n\r\n// Define thresholds and tolerance\r\nvar thresholds = [50, 60, 70];\r\nvar tolerance = 0.05;\r\nvar currentMax = Math.max(fl, fr, rl, rr);\r\nvar hitThreshold = null;\r\n\r\n// Check if this is a new threshold we should act on\r\nfor (var i = 0; i < thresholds.length; i++) {\r\n    var t = thresholds[i];\r\n    if (Math.abs(currentMax - t) <= tolerance) {\r\n        if (state.lastThreshold !== t || (now - state.lastTriggerTime) > 10000) {\r\n            hitThreshold = t;\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// Trigger new threshold if hit\r\nif (hitThreshold !== null) {\r\n    state.lastThreshold = hitThreshold;\r\n    state.lastTriggerTime = now;\r\n    return 0;\r\n}\r\n\r\n// Maintain alert for 10s\r\nif ((now - state.lastTriggerTime) <= 10000) {\r\n    return 0;\r\n}\r\n\r\n// Default state\r\nreturn 401;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"tiresWeartxt","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.5: Tire wear alert rectangle left (any tire)\r\n// Get tire wear data (percent-based)\r\nvar fl = ($prop(\"GameRawData.TireWearFrontLeft\") || 0) * 100;\r\nvar fr = ($prop(\"GameRawData.TireWearFrontRight\") || 0) * 100;\r\nvar rl = ($prop(\"GameRawData.TireWearRearLeft\") || 0) * 100;\r\nvar rr = ($prop(\"GameRawData.TireWearRearRight\") || 0) * 100;\r\nvar now = Date.now();\r\n\r\n// Reset if session hasn't started\r\nif ($prop(\"CompletedLaps\") === 0) {\r\n    globalThis.tireWearAlert = undefined;\r\n    return 417;\r\n}\r\n\r\n// Initialize once\r\nif (typeof globalThis.tireWearAlert === 'undefined') {\r\n    globalThis.tireWearAlert = {\r\n        lastTriggerTime: 0,\r\n        lastThreshold: null\r\n    };\r\n}\r\n\r\nvar state = globalThis.tireWearAlert;\r\n\r\n// Define thresholds and tolerance\r\nvar thresholds = [50, 60, 70];\r\nvar tolerance = 0.05;\r\nvar currentMax = Math.max(fl, fr, rl, rr);\r\nvar hitThreshold = null;\r\n\r\n// Check if this is a new threshold we should act on\r\nfor (var i = 0; i < thresholds.length; i++) {\r\n    var t = thresholds[i];\r\n    if (Math.abs(currentMax - t) <= tolerance) {\r\n        if (state.lastThreshold !== t || (now - state.lastTriggerTime) > 10000) {\r\n            hitThreshold = t;\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// Trigger new threshold if hit\r\nif (hitThreshold !== null) {\r\n    state.lastThreshold = hitThreshold;\r\n    state.lastTriggerTime = now;\r\n    return 16;\r\n}\r\n\r\n// Maintain alert for 10s\r\nif ((now - state.lastTriggerTime) <= 10000) {\r\n    return 16;\r\n}\r\n\r\n// Default state\r\nreturn 417;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"tiresTirewear","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.5: Tire wear alert rectangle left (any tire)\r\n// Get tire wear data (percent-based)\r\nvar fl = ($prop(\"GameRawData.TireWearFrontLeft\") || 0) * 100;\r\nvar fr = ($prop(\"GameRawData.TireWearFrontRight\") || 0) * 100;\r\nvar rl = ($prop(\"GameRawData.TireWearRearLeft\") || 0) * 100;\r\nvar rr = ($prop(\"GameRawData.TireWearRearRight\") || 0) * 100;\r\nvar now = Date.now();\r\n\r\n// Reset if session hasn't started\r\nif ($prop(\"CompletedLaps\") === 0) {\r\n    globalThis.tireWearAlert = undefined;\r\n    return 663.5;\r\n}\r\n\r\n// Initialize once\r\nif (typeof globalThis.tireWearAlert === 'undefined') {\r\n    globalThis.tireWearAlert = {\r\n        lastTriggerTime: 0,\r\n        lastThreshold: null\r\n    };\r\n}\r\n\r\nvar state = globalThis.tireWearAlert;\r\n\r\n// Define thresholds and tolerance\r\nvar thresholds = [50, 60, 70];\r\nvar tolerance = 0.05;\r\nvar currentMax = Math.max(fl, fr, rl, rr);\r\nvar hitThreshold = null;\r\n\r\n// Check if this is a new threshold we should act on\r\nfor (var i = 0; i < thresholds.length; i++) {\r\n    var t = thresholds[i];\r\n    if (Math.abs(currentMax - t) <= tolerance) {\r\n        if (state.lastThreshold !== t || (now - state.lastTriggerTime) > 10000) {\r\n            hitThreshold = t;\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// Trigger new threshold if hit\r\nif (hitThreshold !== null) {\r\n    state.lastThreshold = hitThreshold;\r\n    state.lastTriggerTime = now;\r\n    return 262.5;\r\n}\r\n\r\n// Maintain alert for 10s\r\nif ((now - state.lastTriggerTime) <= 10000) {\r\n    return 262.5;\r\n}\r\n\r\n// Default state\r\nreturn 663.5;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"tiresOpacity","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.5: Tire wear alert rectangle left (any tire)\r\n// Get tire wear data (percent-based)\r\nvar fl = ($prop(\"GameRawData.TireWearFrontLeft\") || 0) * 100;\r\nvar fr = ($prop(\"GameRawData.TireWearFrontRight\") || 0) * 100;\r\nvar rl = ($prop(\"GameRawData.TireWearRearLeft\") || 0) * 100;\r\nvar rr = ($prop(\"GameRawData.TireWearRearRight\") || 0) * 100;\r\nvar now = Date.now();\r\n\r\n// Reset if session hasn't started\r\nif ($prop(\"CompletedLaps\") === 0) {\r\n    globalThis.tireWearAlert = undefined;\r\n    return 0;\r\n}\r\n\r\n// Initialize once\r\nif (typeof globalThis.tireWearAlert === 'undefined') {\r\n    globalThis.tireWearAlert = {\r\n        lastTriggerTime: 0,\r\n        lastThreshold: null\r\n    };\r\n}\r\n\r\nvar state = globalThis.tireWearAlert;\r\n\r\n// Define thresholds and tolerance\r\nvar thresholds = [50, 60, 70];\r\nvar tolerance = 0.05;\r\nvar currentMax = Math.max(fl, fr, rl, rr);\r\nvar hitThreshold = null;\r\n\r\n// Check if this is a new threshold we should act on\r\nfor (var i = 0; i < thresholds.length; i++) {\r\n    var t = thresholds[i];\r\n    if (Math.abs(currentMax - t) <= tolerance) {\r\n        if (state.lastThreshold !== t || (now - state.lastTriggerTime) > 10000) {\r\n            hitThreshold = t;\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// Trigger new threshold if hit\r\nif (hitThreshold !== null) {\r\n    state.lastThreshold = hitThreshold;\r\n    state.lastTriggerTime = now;\r\n    return 100;\r\n}\r\n\r\n// Maintain alert for 10s\r\nif ((now - state.lastTriggerTime) <= 10000) {\r\n    return 100;\r\n}\r\n\r\n// Default state\r\nreturn 0;\r\n"},"EvaluateBeforeScreenRoles":false},{"VariableName":"fancyTirestxt","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"var fuelActive = $prop(\"variable.fuelRectangleLeft\") === 0;\r\nvar tireActive = $prop(\"variable.tiresRectLeft\") === 0;\r\n\r\nif (!tireActive) return 8.7;\r\nreturn fuelActive ? 63.7 : 8.7;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"fancyTiresrect","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"var fuelActive = $prop(\"variable.fuelRectangleLeft\") === 0;\r\nvar tireActive = $prop(\"variable.tiresRectLeft\") === 0;\r\n\r\nif (!tireActive) return 0;\r\nreturn fuelActive ? 55 : 0;"},"EvaluateBeforeScreenRoles":false}]},"DashboardDebugManager":{},"Version":2,"Id":"8180d2f7-e30a-4d7a-b0ca-8a1e1640ca7d","BaseHeight":105,"BaseWidth":400,"BackgroundColor":"#FF000000","Screens":[{"RenderingSkip":0,"Name":"Screen","InGameScreen":true,"IdleScreen":true,"PitScreen":false,"ScreenId":"ba0fc8ec-4c7d-4226-b099-4a5a36027c9f","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":""},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":105.0,"Left":0.0,"Top":0.0,"Visible":false,"Width":400.0,"Name":"ImageItem","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFD90000","BorderStyle":{"RadiusTopLeft":3,"RadiusTopRight":3,"RadiusBottomLeft":3,"RadiusBottomRight":3},"Height":50.0,"Left":0.0,"Top":55.0,"Visible":true,"Width":400.0,"Name":"Backg","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"inertia([variable.tiresRectLeft], 2000)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: Tire wear severity label\r\n\r\nvar fl = ($prop(\"GameRawData.TireWearFrontLeft\") || 0) * 100;\r\nvar fr = ($prop(\"GameRawData.TireWearFrontRight\") || 0) * 100;\r\nvar rl = ($prop(\"GameRawData.TireWearRearLeft\") || 0) * 100;\r\nvar rr = ($prop(\"GameRawData.TireWearRearRight\") || 0) * 100;\r\n\r\nvar maxWear = Math.max(fl, fr, rl, rr);\r\n\r\nif (maxWear >= 68) {\r\n    return \"#ffd90000\";\r\n} else if (maxWear >= 58) {\r\n    return \"#ffe55f00\";\r\n} else if (maxWear >= 48) {\r\n    return \"#fffca600\";\r\n} else {\r\n    return \"#FF00FF00\";\r\n}"},"Mode":2},"Top":{"Formula":{"Expression":"inertia([variable.fancyTiresrect], 350)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"Font":"ForzaFont Default0","FontSize":30.0,"Text":"Minor","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":33.3,"Left":16.0,"Top":63.7,"Visible":true,"Width":121.0,"Name":"Severity","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"inertia([variable.tiresWeartxt], 2000)"},"Mode":2},"Text":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: Tire wear severity label\r\n\r\nvar fl = ($prop(\"GameRawData.TireWearFrontLeft\") || 0) * 100;\r\nvar fr = ($prop(\"GameRawData.TireWearFrontRight\") || 0) * 100;\r\nvar rl = ($prop(\"GameRawData.TireWearRearLeft\") || 0) * 100;\r\nvar rr = ($prop(\"GameRawData.TireWearRearRight\") || 0) * 100;\r\n\r\nvar maxWear = Math.max(fl, fr, rl, rr);\r\n\r\nif (maxWear >= 68) {\r\n    return \"Severe\";\r\n} else if (maxWear >= 58) {\r\n    return \"Moderate\";\r\n} else if (maxWear >= 48) {\r\n    return \"Minor\";\r\n} else {\r\n    return \"N\";\r\n}"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: Tire wear severity label\r\n\r\nvar fl = ($prop(\"GameRawData.TireWearFrontLeft\") || 0) * 100;\r\nvar fr = ($prop(\"GameRawData.TireWearFrontRight\") || 0) * 100;\r\nvar rl = ($prop(\"GameRawData.TireWearRearLeft\") || 0) * 100;\r\nvar rr = ($prop(\"GameRawData.TireWearRearRight\") || 0) * 100;\r\n\r\nvar maxWear = Math.max(fl, fr, rl, rr);\r\n\r\nif (maxWear >= 68) {\r\n    return \"White\";\r\n} else if (maxWear >= 58) {\r\n    return \"Black\";\r\n} else if (maxWear >= 48) {\r\n    return \"Black\";\r\n} else {\r\n    return \"Black\";\r\n}"},"Mode":2},"Top":{"Formula":{"Expression":"inertia([variable.fancyTirestxt], 350)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"Font":"ForzaFont Default0","FontSize":30.0,"Text":"Tire Wear","TextColor":"#FFFFFFFF","HorizontalAlignment":2,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":33.3,"Left":262.5,"Top":63.7,"Visible":true,"Width":121.0,"Name":"Tirwear","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"inertia([variable.tiresTirewear], 2000)"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-ver 1.5.6: Tire wear severity label\r\n\r\nvar fl = ($prop(\"GameRawData.TireWearFrontLeft\") || 0) * 100;\r\nvar fr = ($prop(\"GameRawData.TireWearFrontRight\") || 0) * 100;\r\nvar rl = ($prop(\"GameRawData.TireWearRearLeft\") || 0) * 100;\r\nvar rr = ($prop(\"GameRawData.TireWearRearRight\") || 0) * 100;\r\n\r\nvar maxWear = Math.max(fl, fr, rl, rr);\r\n\r\nif (maxWear >= 68) {\r\n    return \"White\";\r\n} else if (maxWear >= 58) {\r\n    return \"Black\";\r\n} else if (maxWear >= 48) {\r\n    return \"Black\";\r\n} else {\r\n    return \"Black\";\r\n}"},"Mode":2},"Top":{"Formula":{"Expression":"inertia([variable.fancyTirestxt], 350)"},"Mode":2}}}],"Visible":true,"Name":"tires","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"Expression":"inertia([variable.tiresOpacity], 350)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFCA600","BorderStyle":{"RadiusTopLeft":3,"RadiusTopRight":3,"RadiusBottomLeft":3,"RadiusBottomRight":3},"Height":50.0,"Left":0.0,"Top":0.0,"Visible":true,"Width":400.0,"Name":"Bakcg","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"inertia([variable.fuelRectangleLeft], 2000)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var f = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nreturn f <= 1.3 ? \"#ffd90000\" : f <= 3.4 ? \"#ffe55f00\" : f <= 5.5 ? \"#fffca600\" : \"#FF00FF00\";"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowColor":"#FFFFFFFF","Font":"ForzaFont Default0","FontSize":30.0,"Text":" Laps","TextColor":"#FF000000","HorizontalAlignment":0,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":36.3,"Left":29.0,"Top":8.7000000000000028,"Visible":true,"Width":59.0,"Name":"laps","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"inertia([variable.fuelLapstxt], 2000)"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var f = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nreturn f <= 1.3 ? \"White\" : \"Black\";"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowColor":"#FFFFFFFF","Font":"ForzaFont Default0","FontSize":30.0,"Text":"4","TextColor":"#FF000000","HorizontalAlignment":1,"VerticalAlignment":0,"UseMonospacedText":true,"BackgroundColor":"#00FFFFFF","Height":33.3,"Left":5.8,"Top":8.7000000000000028,"Visible":true,"Width":34.0,"Name":"N-Laps","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var f = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nreturn f <= 1.3 ? 1 : f <= 3.4 ? 3 : f <= 5.5 ? 5 : 'N';"},"Mode":2},"Left":{"Formula":{"Expression":"inertia([variable.fuelLapsnum], 2000)"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var f = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nreturn f <= 1.3 ? \"White\" : \"Black\";"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowColor":"#FFFFFFFF","Font":"ForzaFont Default0","FontSize":30.0,"Text":"Fuel Remaining","TextColor":"#FF000000","HorizontalAlignment":2,"VerticalAlignment":0,"BackgroundColor":"#00FFFFFF","Height":33.3,"Left":229.0,"Top":8.7000000000000028,"Visible":true,"Width":155.0,"Name":"FuelRem","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"inertia([variable.fuelLapsfuelrem], 2000)"},"Mode":2},"TextColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var f = getsharedvalueordefault(\"artiick\", \"lapsEstFuelLeft\", \"0\");\r\nreturn f <= 1.3 ? \"White\" : \"Black\";"},"Mode":2}}}],"Visible":true,"Name":"fuel","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"Expression":"inertia([variable.fuelLapsOpacity], 350)"},"Mode":2}}}],"MinimumRefreshIntervalMS":0.0}],"SnapToGrid":false,"HideLabels":true,"ShowForeground":true,"ForegroundOpacity":100.0,"ShowBackground":true,"BackgroundOpacity":100.0,"ShowBoundingRectangles":false,"GridSize":10,"Images":[],"Metadata":{"ScreenCount":1.0,"InGameScreensIndexs":[0],"IdleScreensIndexs":[0],"MainPreviewIndex":0,"IsOverlay":true,"OverlaySizeWarning":false,"MetadataVersion":2.0,"EnableOnDashboardMessaging":true,"PitScreensIndexs":[],"SimHubVersion":"9.8.1","Title":"Art-Mini-Notif","Author":"Artiick","Width":400.0,"Height":105.0,"DashboardVersion":""},"ShowOnScreenControls":true,"IsOverlay":true,"EnableClickThroughOverlay":true,"EnableOnDashboardMessaging":true,"UseStrictJSIsolation":false,"UseStrictJSIsolationWarning":true}