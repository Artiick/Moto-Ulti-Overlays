{"Variables":{"DashboardVariables":[{"VariableName":"microSectors","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-Ver 1.5.17: Calculated MicroSectors (x15), skip fastestLapTimes in pit lane when predictedStop < 1, record all on lap 0\r\n\r\n// Track lengths (in kilometers, with pit lane entry/exit in meters)\r\nvar trackLengths = {\r\n    0: { length: 3.602, entry: 3120, exit: 721 },  // Laguna Seca Full\r\n    1: { length: 2.961, entry: 2365, exit: 198 },  // Laguna Seca Short\r\n    3: { length: 6.515, entry: 6079, exit: 435 },  // Road America Full\r\n    5: { length: 3.520, entry: 3049, exit: 470 },  // Road America East Route\r\n    16: { length: 4.088, entry: 2996, exit: 546 }, // Road Atlanta Full\r\n    17: { length: 2.881, entry: 2687, exit: 577 }, // Road Atlanta Club\r\n    21: { length: 5.891, entry: 5104, exit: 393 }, // Silverstone GP\r\n    22: { length: 2.639, entry: 2286, exit: 352 }, // Silverstone National\r\n    23: { length: 2.979, entry: 2382, exit: 398 }, // Silverstone International\r\n    31: { length: 25.378, entry: 23685, exit: 1692 }, // Nurburgring Endurance\r\n    32: { length: 20.830, entry: 19440, exit: 1389 }, // Nurburgring Nordschleife\r\n    33: { length: 5.148, entry: 4460, exit: 344 }, // Nurburgring GP\r\n    34: { length: 3.629, entry: 2902, exit: 242 }, // Nurburgring Sprint\r\n    35: { length: 5.246, entry: 4895, exit: 350 }, // Mugello Full\r\n    36: { length: 2.575, entry: 2230, exit: 172 }, // Mugello Club\r\n    37: { length: 5.809, entry: 5033, exit: 388 }, // Suzuka Full\r\n    38: { length: 2.253, entry: 1651, exit: 151 }, // Suzuka East\r\n    40: { length: 5.954, entry: 5556, exit: 794 }, // Sebring Full\r\n    42: { length: 3.219, entry: 3003, exit: 644 }, // Sebring Short\r\n    67: { length: 4.812, entry: 4169, exit: 642 }, // Maple Valley Full\r\n    68: { length: 1.851, entry: 1479, exit: 494 }, // Maple Valley Short\r\n    70: { length: 1.851, entry: 1356, exit: 371 }, // Maple Valley Short Reverse\r\n    78: { length: 16.480, entry: 15380, exit: 1099 }, // Fujimi Kaido Full\r\n    83: { length: 16.480, entry: 15380, exit: 1099 }, // Fujimi Kaido Full Reverse\r\n    100: { length: 13.626, entry: 12716, exit: 909 }, // Le Mans Full\r\n    101: { length: 13.535, entry: 12631, exit: 903 }, // Le Mans Old Mulsanne\r\n    110: { length: 4.657, entry: 4035, exit: 311 }, // Barcelona Catalunya GP\r\n    111: { length: 3.071, entry: 2660, exit: 410 }, // Barcelona Catalunya National\r\n    113: { length: 2.997, entry: 2396, exit: 400 }, // Barcelona Catalunya National Alt\r\n    231: { length: 4.023, entry: 3485, exit: 537 }, // Indianapolis Brickyard\r\n    232: { length: 3.925, entry: 3139, exit: 524 }, // Indianapolis GP\r\n    250: { length: 4.574, entry: 4268, exit: 269 }, // Hockenheimring\r\n    251: { length: 3.692, entry: 3198, exit: 493 }, // Hockenheimring National\r\n    252: { length: 2.638, entry: 2285, exit: 352 }, // Hockenheimring Short\r\n    510: { length: 5.280, entry: 4927, exit: 705 }, // Yas Marina\r\n    511: { length: 3.000, entry: 2599, exit: 801 }, // Yas Marina North\r\n    512: { length: 2.190, entry: 1897, exit: 147 }, // Yas Marina South\r\n    513: { length: 2.290, entry: 1983, exit: 764 }, // Yas Marina North Corkscrew\r\n    530: { length: 7.004, entry: 6536, exit: 467 }, // Spa Francorchamps Full\r\n    540: { length: 6.213, entry: 5797, exit: 415 }, // Mount Panorama Bathurst\r\n    840: { length: 5.777, entry: 5390, exit: 771 }, // Daytona 24h Sports Car\r\n    841: { length: 4.023, entry: 3753, exit: 269 }, // Daytona Tri-Oval\r\n    860: { length: 3.915, entry: 3392, exit: 262 }, // Brands Hatch GP\r\n    861: { length: 1.944, entry: 1554, exit: 130 }, // Brands Hatch Indy\r\n    870: { length: 5.552, entry: 5180, exit: 741 }, // Watkins Glen Full\r\n    873: { length: 3.943, entry: 3679, exit: 526 }, // Watkins Glen Short\r\n    880: { length: 2.414, entry: 2091, exit: 161 }, // Lime Rock Park Full\r\n    882: { length: 2.366, entry: 2049, exit: 158 }, // Lime Rock Park South Chicane\r\n    883: { length: 2.414, entry: 2092, exit: 161 }, // Lime Rock Park Full Alt\r\n    990: { length: 5.260, entry: 4557, exit: 351 }, // Virginia International Raceway Full\r\n    991: { length: 3.620, entry: 3136, exit: 242 }, // Virginia International Raceway North\r\n    992: { length: 2.660, entry: 2481, exit: 178 }, // Virginia International Raceway South\r\n    995: { length: 6.598, entry: 6157, exit: 440 }, // Virginia International Raceway Grand West\r\n    996: { length: 6.759, entry: 6307, exit: 451 }, // Virginia International Raceway Grand East\r\n    1110: { length: 2.414, entry: 2091, exit: 322 }, // Homestead-Miami Speedway\r\n    1111: { length: 3.556, entry: 3317, exit: 475 }, // Homestead-Miami Road Circuit\r\n    1450: { length: 3.622, entry: 3379, exit: 483 }, // Mid-Ohio Sports Car Circuit\r\n    1452: { length: 2.817, entry: 2440, exit: 276 }, // Mid-Ohio Short\r\n    1590: { length: 4.529, entry: 3924, exit: 302 }, // Kyalami GP\r\n    1620: { length: 4.474, entry: 3876, exit: 299 }, // Sunset Peninsula Raceway Full\r\n    1621: { length: 3.122, entry: 2496, exit: 417 }, // Sunset Peninsula Raceway Club\r\n    1622: { length: 4.474, entry: 4174, exit: 597 }, // Sunset Peninsula Raceway Full Reverse\r\n    1623: { length: 3.122, entry: 2704, exit: 625 }, // Sunset Peninsula Raceway Club Reverse\r\n    1624: { length: 3.927, entry: 3664, exit: 524 }, // Sunset Peninsula Raceway Speedway\r\n    1630: { length: 3.734, entry: 3235, exit: 498 }, // Grand Oak National\r\n    1631: { length: 2.623, entry: 2097, exit: 525 }, // Grand Oak Club\r\n    1632: { length: 3.734, entry: 3235, exit: 747 }, // Grand Oak National Reverse\r\n    1640: { length: 4.281, entry: 3709, exit: 286 }, // Hakone GP\r\n    1641: { length: 3.315, entry: 2651, exit: 222 }, // Hakone Club\r\n    1643: { length: 3.315, entry: 3093, exit: 443 }, // Hakone Club Reverse\r\n    1660: { length: 1.642, entry: 1093, exit: 548 }, // Eaglerock Speedway Oval\r\n    1661: { length: 1.722, entry: 1147, exit: 575 }, // Eaglerock Speedway Club\r\n    1663: { length: 1.722, entry: 1147, exit: 575 } // Eaglerock Speedway Club Reverse\r\n};\r\n\r\n// Read telemetry data\r\nvar trackId = parseInt($prop(\"TrackId\")) || -1;\r\nvar carId = parseInt($prop(\"CarId\")) || -1;\r\nvar distanceTraveled = parseFloat($prop(\"GameRawData.DistanceTraveled\")) || 0;\r\nvar completedLaps = parseInt($prop(\"CompletedLaps\")) || 0;\r\nvar currentRaceTime = parseFloat($prop(\"GameRawData.CurrentRaceTime\")) || 0;\r\nvar predictedStop = parseFloat(getsharedvalueordefault('artiick', 'predictedStop', 0)) || 0;\r\n\r\n// Get track length, segment size, and pit lane data\r\nvar trackData = trackLengths[trackId] || { length: 0, entry: null, exit: null };\r\nvar trackLength = trackData.length > 0 ? trackData.length * 1000 : 0;\r\nvar segmentSize = trackLength > 0 ? trackLength / 15 : 0;\r\nvar pitEntry = trackData.entry !== null ? parseFloat(trackData.entry) : null;\r\nvar pitExit = trackData.exit !== null ? parseFloat(trackData.exit) : null;\r\n\r\n// Early exit if no track data\r\nif (trackLength <= 0) {\r\n    return Array.from({ length: 15 }, (_, i) => i + \".#00000000\").join(\" \") + \" 15.0.00000\";\r\n}\r\n\r\n// Initialize persistent storage\r\nif (typeof globalThis.microSectorData === 'undefined') {\r\n    globalThis.microSectorData = {\r\n        trackId: -1,\r\n        carId: -1,\r\n        lastCompletedLaps: -1,\r\n        lastSegmentIndex: -1,\r\n        isFirstLapStarted: false,\r\n        lastDistance: 0,\r\n        crossedSegments: Array(15).fill(false),\r\n        currentLapTimes: Array(15).fill(null),\r\n        fastestLapTimes: Array(15).fill(null),\r\n        segmentStartTime: 0,\r\n        lastResetTime: 0\r\n    };\r\n}\r\n\r\n// Reset on track/car change or session reset\r\nif ((trackId !== globalThis.microSectorData.trackId || carId !== globalThis.microSectorData.carId || \r\n     (distanceTraveled < 0 && completedLaps === 0)) && Date.now() - globalThis.microSectorData.lastResetTime > 1000) {\r\n    globalThis.microSectorData = {\r\n        trackId: trackId,\r\n        carId: carId,\r\n        lastCompletedLaps: -1,\r\n        lastSegmentIndex: -1,\r\n        isFirstLapStarted: false,\r\n        lastDistance: 0,\r\n        crossedSegments: Array(15).fill(false),\r\n        currentLapTimes: Array(15).fill(null),\r\n        fastestLapTimes: Array(15).fill(null),\r\n        segmentStartTime: 0,\r\n        lastResetTime: Date.now()\r\n    };\r\n}\r\n\r\n// Calculate lap distance\r\nvar lapDistance = distanceTraveled - (completedLaps * trackLength);\r\nif (lapDistance < 0 || lapDistance > trackLength * 1) {\r\n    lapDistance = distanceTraveled % trackLength;\r\n}\r\n\r\n// Determine current segment\r\nvar currentSegmentIndex = Math.min(Math.floor(lapDistance / segmentSize), 14);\r\n\r\n// Determine pit lane segments\r\nvar pitLaneSegments = [];\r\nif (pitEntry !== null && pitExit !== null && pitEntry >= 0 && pitExit >= 0 && pitExit <= trackLength) {\r\n    var startSegment = Math.floor(pitEntry / segmentSize);\r\n    var endSegment = Math.floor(pitExit / segmentSize);\r\n    if (pitEntry <= trackLength) {\r\n        for (var i = startSegment; i < 15; i++) {\r\n            pitLaneSegments.push(i);\r\n        }\r\n    }\r\n    if (pitExit > 0) {\r\n        for (var i = 0; i <= endSegment; i++) {\r\n            if (!pitLaneSegments.includes(i)) {\r\n                pitLaneSegments.push(i);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Detect lap 1 start (distanceTraveled > 0)\r\nif (!globalThis.microSectorData.isFirstLapStarted && distanceTraveled > 0 && globalThis.microSectorData.lastDistance <= 0) {\r\n    globalThis.microSectorData.isFirstLapStarted = true;\r\n    globalThis.microSectorData.lastSegmentIndex = -1;\r\n    globalThis.microSectorData.crossedSegments = Array(15).fill(false);\r\n    globalThis.microSectorData.currentLapTimes = Array(15).fill(null);\r\n    globalThis.microSectorData.segmentStartTime = currentRaceTime;\r\n}\r\n\r\n// Detect new lap (reset current lap data)\r\nif (completedLaps > globalThis.microSectorData.lastCompletedLaps) {\r\n    globalThis.microSectorData.lastCompletedLaps = completedLaps;\r\n    globalThis.microSectorData.lastSegmentIndex = -1;\r\n    globalThis.microSectorData.crossedSegments = Array(15).fill(false);\r\n    globalThis.microSectorData.currentLapTimes = Array(15).fill(null);\r\n    globalThis.microSectorData.segmentStartTime = currentRaceTime;\r\n    globalThis.microSectorData.isFirstLapStarted = true;\r\n}\r\n\r\n// Update microsector times\r\nif (globalThis.microSectorData.isFirstLapStarted && currentSegmentIndex !== globalThis.microSectorData.lastSegmentIndex && currentRaceTime > 0) {\r\n    if (globalThis.microSectorData.lastSegmentIndex >= 0 && globalThis.microSectorData.lastSegmentIndex < 15) {\r\n        var segmentTime = currentRaceTime - globalThis.microSectorData.segmentStartTime;\r\n        if (segmentTime > 0) {\r\n            globalThis.microSectorData.currentLapTimes[globalThis.microSectorData.lastSegmentIndex] = segmentTime;\r\n            // Update fastestLapTimes if on lap 0 or if predictedStop >= 1 or segment is not in pit lane\r\n            if (completedLaps === 0 || predictedStop >= 2 || !pitLaneSegments.includes(globalThis.microSectorData.lastSegmentIndex)) {\r\n                if (globalThis.microSectorData.fastestLapTimes[globalThis.microSectorData.lastSegmentIndex] === null || \r\n                    segmentTime <= globalThis.microSectorData.fastestLapTimes[globalThis.microSectorData.lastSegmentIndex]) {\r\n                    globalThis.microSectorData.fastestLapTimes[globalThis.microSectorData.lastSegmentIndex] = segmentTime;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    globalThis.microSectorData.segmentStartTime = currentRaceTime;\r\n    if (currentSegmentIndex >= 0 && currentSegmentIndex < 15) {\r\n        globalThis.microSectorData.crossedSegments[currentSegmentIndex] = true;\r\n        globalThis.microSectorData.lastSegmentIndex = currentSegmentIndex;\r\n    }\r\n}\r\n\r\n// Set colors based on time comparison\r\nvar colors = Array(15).fill(\"#00000000\");\r\nfor (var i = 0; i < 15; i++) {\r\n    if (globalThis.microSectorData.crossedSegments[i]) {\r\n        var currentTime = globalThis.microSectorData.currentLapTimes[i];\r\n        var fastestTime = globalThis.microSectorData.fastestLapTimes[i];\r\n        if (currentTime !== null && fastestTime !== null) {\r\n            if (currentTime <= fastestTime) {\r\n                colors[i] = \"#aa00ff\";\r\n            } else if (currentTime <= fastestTime * 1.00125) {\r\n                colors[i] = \"#00ff7f\";\r\n            } else {\r\n                colors[i] = \"#ff0033\";\r\n            }\r\n        } else if (currentTime !== null) {\r\n            colors[i] = \"#aa00ff\";\r\n        }\r\n    }\r\n}\r\n\r\n// Calculate sum of best microsector times (0–13, exclude 14)\r\nvar bestTimesSum = 0;\r\nfor (var i = 0; i < 14; i++) {\r\n    if (globalThis.microSectorData.fastestLapTimes[i] !== null) {\r\n        bestTimesSum += globalThis.microSectorData.fastestLapTimes[i];\r\n    }\r\n}\r\n\r\n// Update state\r\nglobalThis.microSectorData.lastDistance = distanceTraveled;\r\n\r\n// Format output\r\nreturn colors.map((color, i) => i + \".\" + color).join(\" \") + \" 15.\" + bestTimesSum.toFixed(5);"},"EvaluateBeforeScreenRoles":false},{"VariableName":"prevLapSegments","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"// Artiick-Ver 1.5.14: Store & return previous lap segments for 3s at the start of the lap. And calculate the 15th segment in case the main formula is missing it \r\n\r\n// Read telemetry data\r\nvar trackId = parseInt($prop(\"TrackId\")) || -1;\r\nvar carId = parseInt($prop(\"CarId\")) || -1;\r\nvar completedLaps = parseInt($prop(\"CompletedLaps\")) || 0;\r\nvar currentRaceTime = parseFloat($prop(\"GameRawData.CurrentRaceTime\")) || 0;\r\nvar distanceTraveled = parseFloat($prop(\"GameRawData.DistanceTraveled\")) || 0;\r\nvar microSectors = $prop(\"variable.microSectors\") || Array.from({ length: 15 }, (_, i) => i + \".#00000000\").join(\" \") + \" 15.0.00000\";\r\n\r\n// Initialize persistent storage\r\nif (typeof globalThis.prevLapSegmentData === 'undefined') {\r\n    globalThis.prevLapSegmentData = {\r\n        trackId: -1,\r\n        carId: -1,\r\n        lastCompletedLaps: -1,\r\n        prevColors: Array(15).fill(\"#00000000\"),\r\n        currentColors: Array(15).fill(\"#00000000\"),\r\n        lastResetTime: 0,\r\n        segment13StartTime: 0,\r\n        fastestLastSegmentTime: null\r\n    };\r\n}\r\n\r\n// Reset on track/car change or session reset\r\nif ((trackId !== globalThis.prevLapSegmentData.trackId || carId !== globalThis.prevLapSegmentData.carId || \r\n     (distanceTraveled < 0 && completedLaps === 0)) && Date.now() - globalThis.prevLapSegmentData.lastResetTime > 1000) {\r\n    globalThis.prevLapSegmentData = {\r\n        trackId: trackId,\r\n        carId: carId,\r\n        lastCompletedLaps: -1,\r\n        prevColors: Array(15).fill(\"#00000000\"),\r\n        currentColors: Array(15).fill(\"#00000000\"),\r\n        lastResetTime: Date.now(),\r\n        segment13StartTime: 0,\r\n        fastestLastSegmentTime: null\r\n    };\r\n}\r\n\r\n// Detect new lap\r\nif (completedLaps > globalThis.prevLapSegmentData.lastCompletedLaps && completedLaps >= 1) {\r\n    // Calculate last microsector (14) time\r\n    if (globalThis.prevLapSegmentData.segment13StartTime > 0 && currentRaceTime > globalThis.prevLapSegmentData.segment13StartTime) {\r\n        var lastSegmentTime = currentRaceTime - globalThis.prevLapSegmentData.segment13StartTime;\r\n        if (lastSegmentTime > 0) {\r\n            if (globalThis.prevLapSegmentData.fastestLastSegmentTime === null || lastSegmentTime <= globalThis.prevLapSegmentData.fastestLastSegmentTime) {\r\n                globalThis.prevLapSegmentData.fastestLastSegmentTime = lastSegmentTime;\r\n            }\r\n            var newColors = globalThis.prevLapSegmentData.currentColors.slice();\r\n            if (lastSegmentTime <= globalThis.prevLapSegmentData.fastestLastSegmentTime) {\r\n                newColors[14] = \"#aa00ff\";\r\n            } else if (lastSegmentTime <= globalThis.prevLapSegmentData.fastestLastSegmentTime * 1.00125) {\r\n                newColors[14] = \"#00ff7f\";\r\n            } else {\r\n                newColors[14] = \"#ff0033\";\r\n            }\r\n            globalThis.prevLapSegmentData.prevColors = newColors;\r\n        }\r\n    }\r\n    globalThis.prevLapSegmentData.currentColors = Array(15).fill(\"#00000000\");\r\n    globalThis.prevLapSegmentData.lastCompletedLaps = completedLaps;\r\n    globalThis.prevLapSegmentData.segment13StartTime = 0;\r\n}\r\n\r\n// Update currentColors and segment13StartTime from microSectors\r\nvar colorEntries = microSectors.split(\" \");\r\nvar newColors = Array(15).fill(\"#00000000\");\r\nfor (var i = 0; i < colorEntries.length && i < 15; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1) {\r\n        var index = parseInt(parts[0]);\r\n        if (index >= 0 && index < 15) {\r\n            newColors[index] = parts[1];\r\n        }\r\n    }\r\n}\r\nglobalThis.prevLapSegmentData.currentColors = newColors;\r\n\r\n// Capture segment 13 start time\r\nif (newColors[13] !== \"#00000000\" && globalThis.prevLapSegmentData.segment13StartTime === 0) {\r\n    globalThis.prevLapSegmentData.segment13StartTime = currentRaceTime;\r\n}\r\n\r\n\r\n// Format output\r\nvar output = globalThis.prevLapSegmentData.prevColors.map((color, i) => i + \".\" + color).join(\" \");\r\nif (globalThis.prevLapSegmentData.fastestLastSegmentTime !== null) {\r\n    output += \" 15.\" + globalThis.prevLapSegmentData.fastestLastSegmentTime.toFixed(5);\r\n} else {\r\n    output += \" 15.0.00000\";\r\n}\r\nreturn output;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"mSegmSum14","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 15;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts.slice(1).join(\".\"); // Join all parts after index\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 15 | ColorString: \" + colorString + \" | Value: \" + color;\r\nreturn color;"},"EvaluateBeforeScreenRoles":false},{"VariableName":"mSegm15","EvaluateOnlyOnce":false,"OverrideWithParentDashboardVariableWhenAvailable":false,"ValueExpression":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 15;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts.slice(1).join(\".\"); // Join all parts after index\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 15 | ColorString: \" + colorString + \" | Value: \" + color;\r\nreturn color;"},"EvaluateBeforeScreenRoles":false}]},"DashboardDebugManager":{},"Version":2,"Id":"fab79aeb-2d39-4b12-92a0-ac3413cf1fc8","BaseHeight":50,"BaseWidth":600,"BackgroundColor":"#FF000000","Screens":[{"RenderingSkip":0,"Name":"Screen","InGameScreen":true,"IdleScreen":true,"PitScreen":false,"ScreenId":"ec18158a-51b8-4832-9126-5215241f33c5","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":""},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FF000000","BorderStyle":{"RadiusTopLeft":4,"RadiusTopRight":4,"RadiusBottomLeft":4,"RadiusBottomRight":4},"Height":16.0,"Left":0.0,"Opacity":35.0,"Top":34.0,"Visible":true,"Width":600.0,"Name":"Background","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"[CompletedLaps] = 0 ? 1 : 0"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"back-fancy","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":38.17,"Left":0.0,"Opacity":35.0,"Top":11.81,"Visible":true,"Width":600.0,"Name":"background-fancy","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.ImageItem, SimHub.Plugins","Image":"base","AutoSize":false,"BackgroundColor":"#00FFFFFF","Height":38.17,"Left":0.0,"Top":11.81,"Visible":true,"BlinkDelay":200.0,"BlinkEnabled":true,"Width":600.0,"Name":"outer-line-fancy","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Image":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var best = $prop(\"GameRawData.BestLap\");\r\nvar last = $prop(\"GameRawData.LastLap\");\r\n\r\n// Validate inputs\r\nif (isNaN(best) || best <= 0 || isNaN(last) || last <= 0) {\r\n    return \"base\";\r\n}\r\n\r\n// Threshold for \"good lap\" = 100.125% of best\r\nvar goodThreshold = best * 1.00125;\r\n\r\n// 1. Exact match: valid new PB\r\nif (last === best) {\r\n    return \"outer-fancy-pb\";\r\n}\r\n\r\n// 2. Faster than best, but best hasn't updated: invalid lap\r\nif (last < best) {\r\n    return \"outer-fancy-dirty\";\r\n}\r\n\r\n// 3. Slower than best, but within acceptable range: good lap\r\nif (last <= goodThreshold) {\r\n    return \"outer-fancy-gl\";\r\n}\r\n\r\n// 4. Slower and outside threshold: bad lap\r\nreturn \"outer-fancy-bl\";"},"Mode":2},"BlinkEnabled":{"Formula":{"Expression":"if(\r\n[CompletedLaps] = 0, '',\r\nchanged(1199, [CompletedLaps])\r\n)"},"Mode":2},"Opacity":{"Formula":{"Expression":"changed(3000, [CompletedLaps]) ? 100 : 0"},"Mode":2}}}],"Visible":true,"Name":"fancy bg","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"[CompletedLaps] > 0 ? 1 : 0"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont BigNum","FontSize":25.0,"Text":"44:44.444","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":1,"UseMonospacedText":true,"CharWidth":10.8,"SpecialCharsWidth":4.0,"BackgroundColor":"#00FFFFFF","Height":25.0,"Left":314.5,"Top":11.7,"Visible":true,"Width":138.2,"Name":"optim-Time","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"// Get segment values (default to 0 if empty or undefined)\r\nvar seg14 = parseFloat($prop(\"variable.mSegmSum14\")) || 0;\r\nvar seg15 = parseFloat($prop(\"variable.mSegm15\")) || 0;\r\n\r\n// Sum the two segments\r\nvar total = seg14 + seg15;\r\n\r\n// Convert to minutes, seconds, and milliseconds\r\nvar minutes = Math.floor(total / 60);\r\nvar seconds = Math.floor(total % 60);\r\nvar milliseconds = Math.floor((total - Math.floor(total)) * 1000);\r\n\r\n// Format to mm:ss.fff\r\nreturn minutes.toString().padStart(2, '0') + \":\" +\r\n       seconds.toString().padStart(2, '0') + \".\" +\r\n       milliseconds.toString().padStart(3, '0');"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"ShadowDepth":2,"ShadowColor":"#A1000000","Font":"ForzaFont Numbers","FontSize":25.0,"Text":"OPTIMAL LAP:","TextColor":"#FFFFFFFF","HorizontalAlignment":0,"VerticalAlignment":0,"CharWidth":10.8,"SpecialCharsWidth":4.0,"BackgroundColor":"#00FFFFFF","Height":25.0,"Left":200.7,"Top":11.7,"Visible":true,"Width":138.2,"Name":"opt-Timetxt","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0}],"Visible":true,"Name":"optimal lap","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"[CompletedLaps] > 0 ? 1 : 0"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","BorderStyle":{"RadiusTopLeft":2,"RadiusBottomLeft":2},"Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*1)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*2)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg4","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*3)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg5","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*4)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg6","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*5)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg7","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*6)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg8","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*7)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg9","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*8)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg10","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*9)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg11","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*10)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg12","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*11)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg13","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*12)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg14","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*13)"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2},"Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg15","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*14)"},"Mode":2}}}],"Opacity":25.0,"Visible":true,"Name":"Background mini sec","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","BorderStyle":{"RadiusTopLeft":2,"RadiusBottomLeft":2},"Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#00000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 0;\r\nvar color = \"#00000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*1)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#00000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 1;\r\nvar color = \"#00000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*2)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#00000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 2;\r\nvar color = \"#00000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg4","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*3)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 3;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg5","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*4)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 4;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg6","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*5)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 5;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg7","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*6)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 6;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg8","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*7)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 7;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg9","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*8)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 8;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg10","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*9)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 9;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg11","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*10)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 10;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg12","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*11)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 11;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg13","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*12)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 12;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg14","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*13)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 13;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2},"Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg15","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*14)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.microSectors\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 14;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}}],"Visible":true,"Name":"colors mini sec","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","BorderStyle":{"RadiusTopLeft":2,"RadiusBottomLeft":2},"Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#00000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 0;\r\nvar color = \"#00000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg2","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*1)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#00000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 1;\r\nvar color = \"#00000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg3","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*2)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#00000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 2;\r\nvar color = \"#00000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg4","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*3)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 3;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg5","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*4)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 4;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg6","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*5)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 5;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg7","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*6)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 6;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg8","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*7)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 7;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg9","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*8)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 8;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg10","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*9)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 9;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg11","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*10)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 10;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg12","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*11)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 11;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg13","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*12)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 12;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg14","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*13)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 13;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#FFFFFFFF","BorderStyle":{"RadiusTopRight":2,"RadiusBottomRight":2},"Height":8.0,"Left":4.0,"Top":38.0,"Visible":true,"Width":37.6,"Name":"Mini-sect-backg15","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Left":{"Formula":{"Expression":"4 + ((37.6+2)*14)"},"Mode":2},"BackgroundColor":{"Formula":{"JSExt":0,"Interpreter":1,"Expression":"var colorString = $prop(\"variable.prevLapSegments\") || \"0.#000000\";\r\nvar colorEntries = colorString.split(\" \");\r\nvar index = 14;\r\nvar color = \"#000000\";\r\nfor (var i = 0; i < colorEntries.length; i++) {\r\n    var parts = colorEntries[i].split(\".\");\r\n    if (parts.length > 1 && parseInt(parts[0]) === index) {\r\n        color = parts[1];\r\n        break;\r\n    }\r\n}\r\nroot[\"MicroSectorDebug0\"] = \"Segment 0 | ColorString: \" + colorString + \" | Color: \" + color;\r\nreturn color;"},"Mode":2}}}],"Visible":true,"Name":"previous lap mi sec","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Opacity":{"Formula":{"Expression":"changed(3000, [CompletedLaps]) ? 100 : 0"},"Mode":2}}}],"Visible":true,"Name":"Mini Sectors","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Visible":{"Formula":{"Expression":"timespantoseconds([CurrentLapTime])>0"},"Mode":2}}}],"MinimumRefreshIntervalMS":0.0}],"SnapToGrid":false,"HideLabels":true,"ShowForeground":true,"ForegroundOpacity":100.0,"ShowBackground":true,"BackgroundOpacity":100.0,"ShowBoundingRectangles":false,"GridSize":10,"Images":[{"Name":"back-fancy","Extension":".png","Modified":false,"Optimized":true,"Width":1000,"Height":63,"Length":7153,"MD5":"0fc49d88dc519025fc89795890473974"},{"Name":"base","Extension":".png","Modified":false,"Optimized":true,"Width":1000,"Height":63,"Length":9202,"MD5":"57aa47219176c5b3f209513a5a6f10bd"},{"Name":"outer-fancy-dirty","Extension":".png","Modified":false,"Optimized":true,"Length":10719,"MD5":"de3d252cc4963f92b8a2d12da070f784"},{"Name":"outer-fancy-bl","Extension":".png","Modified":false,"Optimized":true,"Length":10194,"MD5":"231b242aec08619d72130381852760b4"},{"Name":"outer-fancy-gl","Extension":".png","Modified":false,"Optimized":true,"Length":10551,"MD5":"894b75260957bf86d40e01b4c2a917c4"},{"Name":"outer-fancy-pb","Extension":".png","Modified":false,"Optimized":true,"Length":10582,"MD5":"32a7c23e0ff1640b059a8c9ad29ac9c6"}],"Metadata":{"ScreenCount":1.0,"InGameScreensIndexs":[0],"IdleScreensIndexs":[0],"MainPreviewIndex":0,"IsOverlay":true,"OverlaySizeWarning":false,"MetadataVersion":2.0,"EnableOnDashboardMessaging":true,"PitScreensIndexs":[],"SimHubVersion":"9.8.1","Title":"Art-Mini-Sectors","Author":"Artiick","Width":600.0,"Height":50.0,"DashboardVersion":""},"ShowOnScreenControls":true,"IsOverlay":true,"EnableClickThroughOverlay":true,"EnableOnDashboardMessaging":true,"UseStrictJSIsolation":false,"UseStrictJSIsolationWarning":true}